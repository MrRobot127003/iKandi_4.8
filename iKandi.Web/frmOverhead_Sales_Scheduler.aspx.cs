using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Net.Mail;
using iKandi.Common;
using System.IO;
using iKandi.BLL;
using System.Data;
using System.Net;

namespace iKandi.Web
{
    public partial class frmOverhead_Sales_Scheduler : System.Web.UI.Page
    {
        string MailType = "BIPL Core Figures";
        string Flag = string.Empty;
        string FitsPath = string.Empty;

        AdminController objadmin = new AdminController();
        ReportController controller = new ReportController();
        string Production_Stock_Detail = "Production Stock Detail";

        protected void Page_Load(object sender, EventArgs e)
        {
            #region MailBody :- Subject
            string EmailContent = @"
                                                 <div style='font-family:arial; font-size:12px;padding:0 15px;'>
                                                    <div style='padding: 10px 0 0 10px;color: #39589c;font-size: 14px;'> Hi All,</div>
                                                        <br/> 
                                                    <div style='padding: 10px 0 0 10px;color: #39589c;font-size: 14px;'> Please find Financial Figure of sales.</div> 
                                                        <br/>
                                                    <style>                                                            
                                                            .sticky {
                                                              position: -webkit-sticky;
                                                              position: sticky;
                                                              top: 0px;                                                          
                                                            }
                                                            .sticky1 {
                                                              position: -webkit-sticky;
                                                              position: sticky;
                                                              top: 18px;                                                          
                                                            }
                                                            .sticky2 {
                                                              position: -webkit-sticky;
                                                              position: sticky;
                                                              top: 30px;                                                          
                                                            }
                                                    </style>";
            #endregion

            EmailContent = EmailContent + CreateMailBodyForMaterialReport(objadmin.GetMaterialReport(Production_Stock_Detail), Production_Stock_Detail);

            string url = Constants.MainUrlMail + "/frmSalesOHRevenue.aspx";

            EmailContent = EmailContent + "<br>" + HttpContent(url);

            //CreateExcel(objadmin.GetMaterialReport(Production_Stock_Detail), Production_Stock_Detail); //commented this as per discussion with Ravi Sir as excel will be generated by materialdetails.aspx.cs page as this will be executed first (Girish)

            SendEmailWithAttachment(EmailContent, MailType);

        }

        //new work start :Girish
        //public void CreateExcel(DataSet ds, string ReportMailType)
        //{
        //    string sourcePath = @"E:\";
        //    string FileName = ReportMailType + ".xlsx";         

        //    if ((System.IO.File.Exists(Constants.MATERIAL_FOLDER_PATH + FileName))) { System.IO.File.Delete(Constants.MATERIAL_FOLDER_PATH + FileName); }

        //    string targetPath_Fabric_Po_Details = Constants.MATERIAL_FOLDER_PATH + FileName;

        //    string sourceFile_Fabric_Po_Details = System.IO.Path.Combine(sourcePath, FileName);

        //    System.IO.File.Copy(sourceFile_Fabric_Po_Details, targetPath_Fabric_Po_Details, true);

        //    string ExcelFilePath_Fabric_Po_Details = Path.Combine(Constants.MATERIAL_FOLDER_PATH, FileName);

        //    bool success_Rescan = controller.GenerateMaterialReportExcel(ExcelFilePath_Fabric_Po_Details, ReportMailType, ds);
        //}
        
        private string CreateMailBodyForMaterialReport(DataSet ds, string ReportMailType)
        {
            string ReportMailBody = "";

            #region ReportType :- InventoryDetail From Cut To Ship on FOB
            if (ReportMailType == "Production Stock Detail")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[1].Rows)
                    {
                        ReportMailBody += @"<table border='1' cellspacing='0' cellpadding='3' style='margin-left:40px;'border: 1px solid #999;border-collapse: collapse;'>
                                            <tbody>
                                                  <tr class='' style='background-color:#39589C;color:white;border-color: #7798e1;text-align:center'>
                                                    <td colspan='10'>Production Stock Summary</td>     
                                                 </tr>
                                                <tr style='background-color:#39589C;color:white;border-color: #7798e1;font-size:11px;font-family: Arial, Helvetica, sans-serif;text-align:center;'>
                                                    <td colspan='2'>Issued</td>
                                                    <td colspan='2'>Cutting</td>
                                                    <td colspan='2'>Stitching</td>
                                                    <td colspan='2'>Packing</td>
                                                    <td colspan='2'>Total</td>
                                                </tr>
                                                <tr style='background-color:#39589C; color:white;border-color: #7798e1;font-size:11px;font-family: Arial, Helvetica, sans-serif;text-align:center;'>
                                                    <td>Qty.</td>
                                                    <td>Val.<br><span style='font-size:8px;'>" + dr["PendingIssueValuePercentage"] + @" % of FOB</span></td>

                                                    <td>Qty.</td>
                                                    <td>Val.<br><span style='font-size:8px;'>" + dr["PendingCutValuePercentage"] + @" % of FOB</span></td>

                                                    <td>Qty.</td>
                                                    <td>Val.<br><span style='font-size:8px;'>" + dr["PendingStitchValuePercentage"] + @" % of FOB</span></td>

                                                    <td>Qty.</td>
                                                    <td>Val.<br><span style='font-size:8px;'>" + dr["PendingPackValuePercentage"] + @" % of FOB</span></td>

                                                    <td>Qty.</td>
                                                    <td>Val.</td>

                                                </tr>";
                    }
                }

                if (ds.Tables[2].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        ReportMailBody += @"<tr style='font-size:11px;text-align:center;font-family: Arial, Helvetica, sans-serif;'>
                                                    <td>" + dr["PendingIssueBalance"] + @"</td>                                                 
                                                    <td>" + dr["PendingIssueValue(In Cr)"] + @"</td>

                                                    <td>" + dr["PendingCutBalance"] + @"</td>
                                                    <td>" + dr["PendingCutValue(In Cr)"] + @"</td>                                                 

                                                    <td>" + dr["PendingStitchBalance"] + @"</td>
                                                    <td>" + dr["PendingStitchValue(In Cr)"] + @"</td>                                                 

                                                    <td>" + dr["PendingPackBalance"] + @"</td> 
                                                    <td>" + dr["PendingPackValue(In Cr)"] + @"</td> 

                                                    <td>" + dr["TotalQty"] + @"</td> 
                                                    <td>" + dr["TotalValue(In Cr)"] + @"</td> 
                                           </tr>";
                    }

                }

                ReportMailBody += @"  </tbody>
                                        </table>
                                                ";
            }
            #endregion

            return ReportMailBody;
        }
        //new work End :Girish


        public static string HttpContent(string url)
        {
            string result = "";

            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);
            req.Timeout = 2000000;
            req.UserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E)";
            using (var resp = req.GetResponse())
            {
                result = new StreamReader(resp.GetResponseStream()).ReadToEnd();
            }
            return result;
        }

        public Boolean SendEmailWithAttachment(String ToEmail, string MailType)
        {

            try
            {
                 string CoreExcelReportPath = @"D:\UpComming_Exfactory\";

                String fromName = BLLCache.GetConfigurationKeyValue("FROMEMAIL");
                List<String> to = new List<String>();

                NotificationController objcontroller = new NotificationController();

                DataSet ds = objcontroller.GetpRODUCTMAIL(MailType);
                DataTable dt = ds.Tables[0];

                string email = ds.Tables[0].Rows[0]["EmailName"].ToString();
                string[] email2 = email.Split(',');
                foreach (string em in email2)
                {
                    to.Add(em);
                }

                if (MailType != string.Empty)
                {
                    if (MailType == "BIPL Core Figures")
                    {
                        List<Attachment> atts = new List<Attachment>();

                        string ExcellPath = "";

                        if (File.Exists(CoreExcelReportPath + "Production Stock Detail.xlsx"))
                        {
                            ExcellPath = Path.Combine(CoreExcelReportPath, "Production Stock Detail.xlsx");
                            atts.Add(new Attachment(ExcellPath));
                        }
                        if (File.Exists(CoreExcelReportPath + "Rates.xlsx"))
                        {
                            ExcellPath = Path.Combine(CoreExcelReportPath, "Rates.xlsx");
                            atts.Add(new Attachment(ExcellPath));
                        }
                        this.SendEmail(fromName, to, null, null, ToEmail, MailType, atts, false, false);
                    }
                }

                return true;

            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));

                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                // this.SendErrorEmail(ex.Message + "\n" + ex.StackTrace);
                return false;
            }
        }
        public Boolean SendEmail(String FromEmail, List<String> To, List<String> CC, List<String> BCC, String Subject, String Content, List<Attachment> Attachments, Boolean hasAppendAttachment, Boolean isAsync)
        {
            MailMessage mailMessage = new MailMessage();
            mailMessage.From = new MailAddress(FromEmail);
            mailMessage.ReplyTo = new MailAddress(FromEmail);
            mailMessage.Priority = MailPriority.Normal;

            mailMessage.Subject = "BIPL Core Figures";

            mailMessage.IsBodyHtml = true;

            AlternateView htmlView = AlternateView.CreateAlternateViewFromString(Subject, null, "text/html");

            mailMessage.AlternateViews.Add(htmlView);

            if (hasAppendAttachment && Attachments != null)
            {
                int i = 1;

                foreach (Attachment attachment in Attachments)
                {
                    if (attachment.ContentStream.Length > 0)
                    {
                        LinkedResource imageId = new LinkedResource(attachment.ContentStream, "image/jpeg");
                        imageId.ContentId = "imageId" + i.ToString();
                        imageId.TransferEncoding = System.Net.Mime.TransferEncoding.Base64;
                        htmlView.LinkedResources.Add(imageId);
                    }

                    i++;
                }
            }
            else
            {
                mailMessage.Body = Subject;
            }

            Boolean isDebug = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["isDebug"]);

            if (isDebug)
            {
                mailMessage.To.Add(System.Configuration.ConfigurationManager.AppSettings["debugModeEmailId"]);
                mailMessage.Bcc.Add(Constants.WEBMASTER_EMAIL);
            }
            else
            {
                foreach (String to in To)
                    mailMessage.To.Add(to);

                if (CC != null)
                    foreach (String to in CC)
                        mailMessage.CC.Add(to);

                if (BCC != null)
                    foreach (String to in BCC)
                        mailMessage.Bcc.Add(to);

                mailMessage.Bcc.Add(System.Configuration.ConfigurationManager.AppSettings["debugModeEmailId"]);


            }

            SmtpClient smtpClient = new SmtpClient(Constants.SMTP_HOST, Constants.SMTP_PORT);

            if (!hasAppendAttachment && Attachments != null)
            {
                foreach (Attachment att in Attachments)
                {
                    mailMessage.Attachments.Add(att);
                }
            }

            smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;
            smtpClient.Timeout = Constants.SMTP_TIMEOUT;

            if (Constants.SMTP_SECURE)
            {
                smtpClient.EnableSsl = true;
            }

            if (Constants.SMTP_IS_AUTH_REQUIRED)
            {
                smtpClient.UseDefaultCredentials = false;
                smtpClient.Credentials = new System.Net.NetworkCredential(Constants.SMTP_USERNAME, Constants.SMTP_PASSWORD);
            }
            try
            {
                smtpClient.Timeout = 300000;
                smtpClient.Send(mailMessage);
                System.Diagnostics.Trace.WriteLine("Email Having Subject of --" + Subject.ToString() + " is send successfully on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt") + "\n");
                //   ShowAlert("Mail Sent successfully");
                return true;

            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Some error has been occur in Email having subject of ---" + Subject.ToString() + " On" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                System.Diagnostics.Trace.WriteLine("Sorry !! Email has not been send on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt") + "\n");
                return false;
            }

            finally
            {
                try
                {
                    if (Attachments != null)
                    {
                        foreach (Attachment att in Attachments)
                        {
                            att.Dispose();
                        }

                        Attachments = null;
                    }

                    foreach (Attachment att in mailMessage.Attachments)
                    {
                        att.Dispose();
                    }

                    mailMessage = null;

                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));

                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
        }
        public void ShowAlert(string stringAlertMsg)
        {
            string myStringVariable = string.Empty;
            myStringVariable = stringAlertMsg;
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "myalert", "alert('" + myStringVariable + "');", true);
        }
    }
}