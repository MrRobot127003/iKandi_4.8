using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using iKandi.Common;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using iKandi.Common.Entities;



namespace iKandi.DAL
{
    public class AdminDataProvider : BaseDataProvider
    {

        #region Ctor(s)

        public AdminDataProvider(SessionInfo LoggedInUser)
            : base(LoggedInUser)
        {
        }

        #endregion

        #region ZIP Rate Methods

        /// <summary>
        /// Get All Zip Rates
        /// </summary>
        /// <returns></returns>
        public List<Zip> GetAllZipRate()
        {
            // Create a connection object and data adapter
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object
                string cmdText = "sp_zip_rate_get_all_zip_rate";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                // Set the command type to StoredProcedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataReader reader = cmd.ExecuteReader();

                List<Zip> ziprate = new List<Zip>();

                while (reader.Read())
                {
                    Zip zip = new Zip();

                    zip.Id = Convert.ToInt32(reader["Id"]);
                    zip.Detail = Convert.ToString(reader["Detail"]);
                    zip.Type = Convert.ToString(reader["Type"]);
                    zip.Size = Convert.ToInt32(reader["Size"]);
                    zip.Rate = Convert.ToDouble(reader["Rate"]);

                    ziprate.Add(zip);
                }

                cnx.Close();

                return ziprate;
            }
        }
        public DataTable GetTaskDesignationMapping(string iTaskType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "sp_get_task_designation_mapping";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@TaskType", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = iTaskType;
                cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds.Tables[0];

            }
        }




        public DataTable GetDesignation(int iTaskId, int iDesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "sp_get_designation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@TaskId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = iTaskId;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = iDesignationId;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds.Tables[0];

            }
        }

        public Zip GetZipRateById(int ZipRateId)
        {
            Zip zip = new Zip();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_zip_rate_get_zip_rate_by_id";

                cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@d", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = ZipRateId;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    zip.Id = Convert.ToInt32(reader["Id"]);
                    zip.Detail = Convert.ToString(reader["Detail"]);
                    zip.Type = Convert.ToString(reader["Type"]);
                    zip.Size = Convert.ToInt32(reader["Size"]);
                    zip.Rate = Convert.ToDouble(reader["Rate"]);
                }

                cnx.Close();
                return zip;
            }
        }

        public int InternalAuditCount(int UnitId)
        {
            int unitId;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Internal_Audit_Record";

                cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UnitId;
                cmd.Parameters.Add(param);

                unitId = Convert.ToInt32(cmd.ExecuteScalar());

                cnx.Close();
                return unitId;
            }
        }

        public bool InsertZipRate(Zip objZipRate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_zip_rate_insert_zip_rate";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                //SqlDataAdapter da = new SqlDataAdapter();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Detail", SqlDbType.VarChar);
                param.Value = objZipRate.Detail;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = objZipRate.Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Size", SqlDbType.Int);
                param.Value = objZipRate.Size;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Rate", SqlDbType.Float);
                param.Value = objZipRate.Rate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return true;
        }

        public bool UpdateZipRate(Zip objZipRate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_zip_rate_update_zip_rate";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                // SqlDataAdapter da = new SqlDataAdapter();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Detail", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = objZipRate.Detail;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = objZipRate.Type;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Size", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = objZipRate.Size;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Rate", SqlDbType.Float);
                param.Direction = ParameterDirection.Input;
                param.Value = objZipRate.Rate;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@d", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = objZipRate.Id;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return true;
        }

        public bool DeleteZipRate(int ZipRateId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_zip_rate_delete_zip_rate_by_id";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@d", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = ZipRateId;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return true;
        }


        #endregion

        #region Application Module Methods

        public List<ApplicationModule> GetAllApplicationModule()
        {
            // Create a connection object 
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object, Sql Data Reader object
                SqlCommand cmd;

                string cmdText = "sp_application_module_get_all_application_module";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsAM = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsAM);

                List<ApplicationModule> applicationModules = new List<ApplicationModule>();

                if (dsAM.Tables.Count > 1)
                {
                    foreach (DataRow row in dsAM.Tables[0].Rows)
                    {
                        ApplicationModule applicationModule = new ApplicationModule();

                        applicationModule.ApplicationModuleID = Convert.ToInt32(row["Id"]);
                        applicationModule.ApplicationModuleName = (row["Name"] == DBNull.Value) ? string.Empty : row["Name"].ToString();
                        //if (applicationModule.ApplicationModuleName == "A")
                        //{
                        //    applicationModule.ApplicationModuleName = "";
                        //    applicationModule.ApplicationModuleName = "<b>" + applicationModule.ApplicationModuleName + "</b>";

                        //}
                        applicationModule.Type = (PageType)Convert.ToInt16(row["Type"]);
                        applicationModule.Path = (row["Path"] == DBNull.Value) ? string.Empty : row["Path"].ToString();
                        applicationModule.SubPhaseID = (row["SubPhaseID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["SubPhaseID"]);
                        applicationModule.IncludeInNavigation = (row["IncludeInNavigation"] == DBNull.Value) ? false : Convert.ToBoolean(row["IncludeInNavigation"]);
                        applicationModule.StatusModeID = (row["StatusModeID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["StatusModeID"]);

                        DataRow[] columns = dsAM.Tables[1].Select("ApplicationModuleID=" + applicationModule.ApplicationModuleID.ToString());

                        applicationModule.Columns = new List<ApplicationModuleColumn>();

                        foreach (DataRow columnRow in columns)
                        {
                            ApplicationModuleColumn amc = new ApplicationModuleColumn();

                            amc.ApplicationModuleColumnID = Convert.ToInt32(row["Id"]);
                            amc.ApplicationModuleColumnName = (row["Name"] == DBNull.Value) ? string.Empty : row["Name"].ToString();

                            applicationModule.Columns.Add(amc);
                        }

                        applicationModules.Add(applicationModule);
                    }
                }

                cnx.Close();
                return applicationModules;

            }
        }

        public List<ApplicationModule> GetAllApplicationModuleByDesignation(int DesignationID)
        {
            // Create a connection object 
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object, Sql Data Reader object
                SqlCommand cmd;

                string cmdText = "sp_application_module_get_all_application_module_by_designation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DesignationID;
                cmd.Parameters.Add(param);

                DataSet dsAM = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsAM);

                List<ApplicationModule> applicationModules = new List<ApplicationModule>();

                if (dsAM.Tables.Count > 0)
                {
                    foreach (DataRow row in dsAM.Tables[0].Rows)
                    {
                        ApplicationModule applicationModule = new ApplicationModule();

                        applicationModule.ApplicationModuleID = Convert.ToInt32(row["Id"]);
                        applicationModule.ApplicationModuleName = (row["Name"] == DBNull.Value) ? string.Empty : row["Name"].ToString();
                        applicationModule.Type = (PageType)Convert.ToInt16(row["Type"]);
                        applicationModule.Path = (row["Path"] == DBNull.Value) ? string.Empty : row["Path"].ToString();
                        applicationModule.SubPhaseID = (row["SubPhaseID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["SubPhaseID"]);
                        applicationModule.IncludeInNavigation = (row["IncludeInNavigation"] == DBNull.Value) ? false : Convert.ToBoolean(row["IncludeInNavigation"]);
                        applicationModule.StatusModeID = (row["StatusModeID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["StatusModeID"]);

                        applicationModules.Add(applicationModule);
                    }
                }

                cnx.Close();
                return applicationModules;

            }
        }

        public List<ApplicationModule> GetAllApplicationModuleByUser(int UserID)
        {
            // Create a connection object 
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object, Sql Data Reader object
                SqlCommand cmd;

                string cmdText = "sp_application_module_get_all_application_module_by_user";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserID;
                cmd.Parameters.Add(param);

                DataSet dsAM = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsAM);

                List<ApplicationModule> applicationModules = new List<ApplicationModule>();

                if (dsAM.Tables.Count > 0)
                {
                    foreach (DataRow row in dsAM.Tables[0].Rows)
                    {
                        ApplicationModule applicationModule = new ApplicationModule();

                        applicationModule.ApplicationModuleID = Convert.ToInt32(row["Id"]);
                        applicationModule.ApplicationModuleName = (row["Name"] == DBNull.Value) ? string.Empty : row["Name"].ToString();
                        applicationModule.Type = (PageType)Convert.ToInt16(row["Type"]);
                        applicationModule.Path = (row["Path"] == DBNull.Value) ? string.Empty : row["Path"].ToString();
                        applicationModule.SubPhaseID = (row["SubPhaseID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["SubPhaseID"]);
                        applicationModule.IncludeInNavigation = (row["IncludeInNavigation"] == DBNull.Value) ? false : Convert.ToBoolean(row["IncludeInNavigation"]);
                        applicationModule.StatusModeID = (row["StatusModeID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["StatusModeID"]);

                        applicationModules.Add(applicationModule);
                    }
                }

                cnx.Close();
                return applicationModules;

            }
        }

        public List<ApplicationModule> GetAllApplicationModuleByDepartment(int DepartmentID)
        {
            // Create a connection object 
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object, Sql Data Reader object
                SqlCommand cmd;

                string cmdText = "sp_application_module_get_all_application_module_by_department";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DepartmentID;
                cmd.Parameters.Add(param);

                DataSet dsAM = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsAM);

                List<ApplicationModule> applicationModules = new List<ApplicationModule>();

                if (dsAM.Tables.Count > 0)
                {
                    foreach (DataRow row in dsAM.Tables[0].Rows)
                    {
                        ApplicationModule applicationModule = new ApplicationModule();

                        applicationModule.ApplicationModuleID = Convert.ToInt32(row["Id"]);
                        applicationModule.ApplicationModuleName = (row["Name"] == DBNull.Value) ? string.Empty : row["Name"].ToString();
                        applicationModule.Type = (PageType)Convert.ToInt16(row["Type"]);
                        applicationModule.Path = (row["Path"] == DBNull.Value) ? string.Empty : row["Path"].ToString();
                        applicationModule.SubPhaseID = (row["SubPhaseID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["SubPhaseID"]);
                        applicationModule.IncludeInNavigation = (row["IncludeInNavigation"] == DBNull.Value) ? false : Convert.ToBoolean(row["IncludeInNavigation"]);
                        applicationModule.StatusModeID = (row["StatusModeID"] == DBNull.Value) ? -1 : Convert.ToInt32(row["StatusModeID"]);

                        applicationModules.Add(applicationModule);
                    }
                }

                cnx.Close();
                return applicationModules;

            }
        }

        #endregion

        #region Production Unit Methods


        #endregion

        #region Top Navigation Methods

        public WorkFlowPhaseCollection GetPhase(int UserID)
        {
            WorkFlowPhaseCollection objWorkFlowPhaseCollection = new WorkFlowPhaseCollection();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_phases_get_phases";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    DataSet dsPhase = new DataSet();
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    SqlParameter param;

                    param = new SqlParameter("@UserID", SqlDbType.Int);
                    param.Value = UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    adapter.Fill(dsPhase);
                    objWorkFlowPhaseCollection = ConvertDataSetToWorkflowPhase(dsPhase);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return objWorkFlowPhaseCollection;
        }

        //private WorkFlowPhaseCollection ConvertDataSetToWorkflowPhase(DataSet dsPhase)
        //{
        //    WorkFlowPhaseCollection objWorkFlowPhaseCollection = new WorkFlowPhaseCollection();

        //    DataTable dt = null;
        //    if (dsPhase.Tables.Count == 5)
        //    {
        //        dt = dsPhase.Tables[0];
        //    }

        //    foreach (DataRow row1 in dt.Rows)
        //    {
        //        WorkflowPhase workflowPhase = new WorkflowPhase();
        //        workflowPhase.Id = Convert.ToInt32(row1["Id"]);
        //        workflowPhase.Name = (row1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(row1["Name"]);
        //        workflowPhase.Order = (row1["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(row1["Order"]);
        //        objWorkFlowPhaseCollection.Add(workflowPhase);

        //        DataTable dt2 = dsPhase.Tables[1];
        //        workflowPhase.SubPhase = new List<WorkflowSubPhase>();

        //        DataRow[] subPhaseRows = dt2.Select("PhaseID=" + workflowPhase.Id.ToString());

        //        foreach (DataRow dr in subPhaseRows)
        //        {
        //            WorkflowSubPhase workflowSubPhase = new WorkflowSubPhase();
        //            workflowSubPhase.Id = Convert.ToInt32(dr["Id"]);
        //            workflowSubPhase.Name = (dr["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Name"]);
        //            workflowSubPhase.Order = (dr["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Order"]);
        //            workflowSubPhase.PhaseID = Convert.ToInt32(dr["PhaseID"]);
        //            workflowPhase.SubPhase.Add(workflowSubPhase);

        //            DataTable dt3 = dsPhase.Tables[2];
        //            workflowSubPhase.Forms = new List<ApplicationModule>();

        //            DataRow[] formRows = dt3.Select("SubPhaseID=" + workflowSubPhase.Id.ToString());

        //            foreach (DataRow r1 in formRows)
        //            {
        //                ApplicationModule applicationModule1 = new ApplicationModule();
        //                applicationModule1.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule1.ApplicationModuleName = (r1["Name"] == null) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule1.Type = PageType.FORM;
        //                applicationModule1.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule1.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule1.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule1.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Forms.Add(applicationModule1);
        //            }

        //            DataTable dt4 = dsPhase.Tables[3];
        //            workflowSubPhase.Files = new List<ApplicationModule>();

        //            DataRow[] fileRows = dt4.Select("SubPhaseID=" + workflowSubPhase.Id.ToString());

        //            foreach (DataRow r1 in fileRows)
        //            {
        //                ApplicationModule applicationModule2 = new ApplicationModule();
        //                applicationModule2.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule2.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule2.Type = PageType.FILE;
        //                applicationModule2.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule2.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule2.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule2.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Files.Add(applicationModule2);
        //            }

        //            DataTable dt5 = dsPhase.Tables[4];
        //            workflowSubPhase.Reports = new List<ApplicationModule>();

        //            DataRow[] reportRows = dt5.Select("SubPhaseID=" + workflowSubPhase.Id.ToString());

        //            foreach (DataRow r1 in reportRows)
        //            {
        //                ApplicationModule applicationModule3 = new ApplicationModule();
        //                applicationModule3.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule3.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule3.Type = PageType.REPORT;
        //                applicationModule3.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule3.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule3.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule3.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Reports.Add(applicationModule3);
        //            }
        //        }
        //    }
        //    return objWorkFlowPhaseCollection;
        //}

        private WorkFlowPhaseCollection ConvertDataSetToWorkflowPhase(DataSet dsPhase)
        {
            WorkFlowPhaseCollection objWorkFlowPhaseCollection = new WorkFlowPhaseCollection();

            DataTable dt = null;
            if (dsPhase.Tables.Count == 5)
            {
                dt = dsPhase.Tables[0];
            }
            dt = dsPhase.Tables[0];
            foreach (DataRow row1 in dt.Rows)
            {
                WorkflowPhase workflowPhase = new WorkflowPhase();
                workflowPhase.Id = Convert.ToInt32(row1["DepartmentID"]);
                workflowPhase.Name = (row1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(row1["Name"]);
                // workflowPhase.Order = (row1["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(row1["Order"]);
                objWorkFlowPhaseCollection.Add(workflowPhase);

                DataTable dt2 = dsPhase.Tables[1];
                workflowPhase.SubPhase = new List<WorkflowSubPhase>();

                DataRow[] subPhaseRows = dt2.Select("DepartmentID=" + workflowPhase.Id.ToString());

                foreach (DataRow dr in subPhaseRows)
                {
                    WorkflowSubPhase workflowSubPhase = new WorkflowSubPhase();
                    workflowSubPhase.Id = Convert.ToInt32(dr["DepartmentID"]);
                    workflowSubPhase.Name = (dr["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Name"]);
                    //  workflowSubPhase.Order = (dr["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Order"]);
                    //  workflowSubPhase.PhaseID = Convert.ToInt32(dr["PhaseID"]);
                    workflowPhase.SubPhase.Add(workflowSubPhase);

                    DataTable dt3 = dsPhase.Tables[2];
                    workflowSubPhase.Forms = new List<ApplicationModule>();

                    DataRow[] formRows = dt3.Select("DepartmentID=" + workflowPhase.Id.ToString());

                    foreach (DataRow r1 in formRows)
                    {
                        ApplicationModule applicationModule1 = new ApplicationModule();
                        applicationModule1.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
                        applicationModule1.ApplicationModuleName = (r1["Name"] == null) ? string.Empty : Convert.ToString(r1["Name"]);
                        applicationModule1.Type = PageType.FORM;
                        applicationModule1.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
                        applicationModule1.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
                        applicationModule1.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
                        applicationModule1.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
                        workflowSubPhase.Forms.Add(applicationModule1);
                    }

                    DataTable dt4 = dsPhase.Tables[3];
                    workflowSubPhase.Files = new List<ApplicationModule>();

                    DataRow[] fileRows = dt4.Select("DepartmentID=" + workflowSubPhase.Id.ToString());

                    foreach (DataRow r1 in fileRows)
                    {
                        ApplicationModule applicationModule2 = new ApplicationModule();
                        applicationModule2.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
                        applicationModule2.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
                        applicationModule2.Type = PageType.FILE;
                        applicationModule2.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
                        applicationModule2.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
                        applicationModule2.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
                        applicationModule2.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
                        workflowSubPhase.Files.Add(applicationModule2);
                    }

                    DataTable dt5 = dsPhase.Tables[4];
                    workflowSubPhase.Reports = new List<ApplicationModule>();

                    DataRow[] reportRows = dt5.Select("DepartmentID=" + workflowSubPhase.Id.ToString());

                    foreach (DataRow r1 in reportRows)
                    {
                        ApplicationModule applicationModule3 = new ApplicationModule();
                        applicationModule3.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
                        applicationModule3.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
                        applicationModule3.Type = PageType.REPORT;
                        applicationModule3.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
                        applicationModule3.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
                        applicationModule3.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
                        applicationModule3.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
                        workflowSubPhase.Reports.Add(applicationModule3);
                    }
                    //added by abhishek 2/6/2016

                    DataTable dt6 = dsPhase.Tables[5];
                    workflowSubPhase.Admins = new List<ApplicationModule>();

                    DataRow[] AdminRows = dt6.Select("DepartmentID=" + workflowSubPhase.Id.ToString());

                    foreach (DataRow r1 in AdminRows)
                    {
                        ApplicationModule applicationModule4 = new ApplicationModule();
                        applicationModule4.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
                        applicationModule4.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
                        applicationModule4.Type = PageType.REPORT;
                        applicationModule4.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
                        applicationModule4.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
                        applicationModule4.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
                        applicationModule4.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
                        workflowSubPhase.Admins.Add(applicationModule4);
                    }
                }
            }
            return objWorkFlowPhaseCollection;
        }

        //private WorkFlowPhaseCollection ConvertDataSetToWorkflowPhase(DataSet dsPhase)
        //{
        //    WorkFlowPhaseCollection objWorkFlowPhaseCollection = new WorkFlowPhaseCollection();

        //    DataTable dt = null;
        //    //if (dsPhase.Tables.Count == 5)
        //    //{
        //    //    dt = dsPhase.Tables[0];
        //    //}
        //    dt = dsPhase.Tables[0];
        //    foreach (DataRow row1 in dt.Rows)
        //    {
        //        WorkflowPhase workflowPhase = new WorkflowPhase();
        //        workflowPhase.Id = Convert.ToInt32(row1["DepartmentID"]);
        //        workflowPhase.Name = (row1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(row1["Name"]);
        //        // workflowPhase.Order = (row1["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(row1["Order"]);
        //        objWorkFlowPhaseCollection.Add(workflowPhase);

        //        DataTable dt2 = dsPhase.Tables[1];
        //        workflowPhase.SubPhase = new List<WorkflowSubPhase>();

        //        DataRow[] subPhaseRows = dt2.Select("DepartmentID=" + workflowPhase.Id.ToString());

        //        foreach (DataRow dr in subPhaseRows)
        //        {
        //            WorkflowSubPhase workflowSubPhase = new WorkflowSubPhase();
        //            workflowSubPhase.Id = Convert.ToInt32(dr["DepartmentID"]);
        //            workflowSubPhase.Name = (dr["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Name"]);
        //            //  workflowSubPhase.Order = (dr["Order"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Order"]);
        //            //  workflowSubPhase.PhaseID = Convert.ToInt32(dr["PhaseID"]);
        //            workflowPhase.SubPhase.Add(workflowSubPhase);

        //            DataTable dt3 = dsPhase.Tables[2];
        //            workflowSubPhase.Forms = new List<ApplicationModule>();

        //            DataRow[] formRows = dt3.Select("DepartmentID=" + workflowPhase.Id.ToString());

        //            foreach (DataRow r1 in formRows)
        //            {
        //                ApplicationModule applicationModule1 = new ApplicationModule();
        //                applicationModule1.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule1.ApplicationModuleName = (r1["Name"] == null) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule1.Type = PageType.FORM;
        //                applicationModule1.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule1.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule1.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule1.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Forms.Add(applicationModule1);
        //            }

        //            DataTable dt4 = dsPhase.Tables[3];
        //            workflowSubPhase.Files = new List<ApplicationModule>();

        //            DataRow[] fileRows = dt4.Select("DepartmentID=" + workflowSubPhase.Id.ToString());

        //            foreach (DataRow r1 in fileRows)
        //            {
        //                ApplicationModule applicationModule2 = new ApplicationModule();
        //                applicationModule2.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule2.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule2.Type = PageType.FILE;
        //                applicationModule2.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule2.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule2.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule2.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Files.Add(applicationModule2);
        //            }

        //            DataTable dt5 = dsPhase.Tables[4];
        //            workflowSubPhase.Reports = new List<ApplicationModule>();

        //            DataRow[] reportRows = dt5.Select("DepartmentID=" + workflowSubPhase.Id.ToString());

        //            foreach (DataRow r1 in reportRows)
        //            {
        //                ApplicationModule applicationModule3 = new ApplicationModule();
        //                applicationModule3.ApplicationModuleID = Convert.ToInt32(r1["Id"]);
        //                applicationModule3.ApplicationModuleName = (r1["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Name"]);
        //                applicationModule3.Type = PageType.REPORT;
        //                applicationModule3.Path = (r1["Path"] == DBNull.Value) ? string.Empty : Convert.ToString(r1["Path"]);
        //                applicationModule3.SubPhaseID = (r1["SubPhaseID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["SubPhaseID"]);
        //                applicationModule3.IncludeInNavigation = Convert.ToBoolean(r1["IncludeInNavigation"]);
        //                applicationModule3.StatusModeID = (r1["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(r1["StatusModeID"]);
        //                workflowSubPhase.Reports.Add(applicationModule3);
        //            }
        //        }
        //    }
        //    return objWorkFlowPhaseCollection;
        //}

        #endregion


        //Add By Prabhaker 15-feb-18//
        public int InsertUpdate_Line_Process_Audit_decision(int ProcessType, int UnitID, int Internal_Audit_ProcessID, int QAComplaine_TypeAdmin, int ValuesID, int status, string Remarks, int ApplyToAll, int CreatedBy, string floorType, int IsClosed, string ImageFile, int IsActive, string CompareDate, int OutHouseValue, int flag)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {

                    cnx.Open();
                    string cmdText = "InsertUpdate_Line_Process_Audit_decision";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@ProcessType", SqlDbType.Int);
                    param.Value = ProcessType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@InternalAuditId", SqlDbType.Int);
                    param.Value = Internal_Audit_ProcessID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    param = new SqlParameter("@QAcompilation", SqlDbType.Int);
                    param.Value = QAComplaine_TypeAdmin;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ValueId", SqlDbType.Int);
                    param.Value = ValuesID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@status", SqlDbType.Int);
                    param.Value = status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    param = new SqlParameter("@Remarks", SqlDbType.VarChar);
                    param.Value = Remarks;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@applyall", SqlDbType.Int);
                    param.Value = ApplyToAll;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@createdBy", SqlDbType.Int);
                    param.Value = CreatedBy;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@floorType", SqlDbType.VarChar);
                    param.Value = floorType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsClosed", SqlDbType.VarChar);
                    param.Value = IsClosed;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ImageFile", SqlDbType.VarChar);
                    param.Value = ImageFile;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsActive", SqlDbType.Int);
                    param.Value = IsActive;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessDate", SqlDbType.DateTime);
                    param.Value = CompareDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OutHouseValue", SqlDbType.Int);
                    param.Value = OutHouseValue;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@flag", SqlDbType.Int);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    result = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return result;
        }

        public int InsertUpdate_Line_Process_Audit_decision_All(int ProcessType, int UnitID, int Internal_Audit_ProcessID, int QAComplaine_TypeAdmin, int ValuesID, int status, string Remarks, int ApplyToAll, int CreatedBy, string floorType, string CompareDate)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {

                    cnx.Open();
                    string cmdText = "InsertUpdate_Line_Process_Audit_decision_All";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@ProcessType", SqlDbType.Int);
                    param.Value = ProcessType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@InternalAuditId", SqlDbType.Int);
                    param.Value = Internal_Audit_ProcessID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    param = new SqlParameter("@QAcompilation", SqlDbType.Int);
                    param.Value = QAComplaine_TypeAdmin;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ValueId", SqlDbType.Int);
                    param.Value = ValuesID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@status", SqlDbType.Int);
                    param.Value = status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Remarks", SqlDbType.VarChar);
                    param.Value = Remarks;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@applyall", SqlDbType.Int);
                    param.Value = ApplyToAll;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@createdBy", SqlDbType.Int);
                    param.Value = CreatedBy;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@floorType", SqlDbType.VarChar);
                    param.Value = floorType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessDate", SqlDbType.DateTime);
                    param.Value = CompareDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    result = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return result;
        }

        public DataSet GetLineProcessAuditdecision(int UnitId, int ProcessType, int InternalAuditId, int QAComplienceId, int ValueId, string LineNo, string CompareDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Get_Line_Process_Audit_decision";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@InternalAuditId", SqlDbType.Int);
                param.Value = InternalAuditId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@QAComplienceId", SqlDbType.Int);
                param.Value = QAComplienceId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ValueId", SqlDbType.Int);
                param.Value = ValueId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@floorType", SqlDbType.VarChar);
                param.Value = LineNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProcessDate", SqlDbType.DateTime);
                param.Value = CompareDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }
        }


        public DataSet GetProductOccuptionResult(int UnitId, int QAComplienceId, int ValueId, int processType, string newdate, string floortype, bool bOpenFromLink)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_GetProductOccuptionResult";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@QAcompilation", SqlDbType.Int);
                param.Value = QAComplienceId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ValueId", SqlDbType.Int);
                param.Value = ValueId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = processType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@newdate", SqlDbType.VarChar);
                param.Value = newdate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@floorType", SqlDbType.VarChar);
                param.Value = floortype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@bOpenFromLink", SqlDbType.Bit);
                param.Value = bOpenFromLink;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }
        }


        public DataSet GetLineProcessValue(int UnitId, int ProcessType, int InternalAuditId, int QAComplienceId, int ValueId, string floorType, string newdate, bool bOpenFromLink)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "sp_GetLineProcessValue";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@InternalAuditId", SqlDbType.Int);
                param.Value = InternalAuditId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@QAcompilation", SqlDbType.Int);
                param.Value = QAComplienceId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ValueId", SqlDbType.Int);
                param.Value = ValueId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@floorType", SqlDbType.VarChar);
                param.Value = floorType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@newdate", SqlDbType.VarChar);
                param.Value = newdate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@bOpenFromLink", SqlDbType.Bit);
                param.Value = bOpenFromLink;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }
        }

        public DataSet GetProductOccupationalAudit(int UnitId, int processType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dt = new DataSet();
                cnx.Open();

                string cmdText = "sp_Product_Occup_Safety_Audit";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@processType", SqlDbType.Int);
                param.Value = processType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }


        public DataSet GetParentDepartment(int ClientId, int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_GetParentDepartment";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(ds);
                return ds;
            }
        }


        public DataSet GetComplianceAdmin(int UnitId, int ProcessType, int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_InsertUpdateDeleteComplianceAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 0;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(ds);
                return ds;
            }
        }

        public int Insert_Update_AuditParameter_Admin(int QAComplienceId, string AuditParameter, int UnitId, int ProcessType, int Sequence, int IsActive, int flag)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    DataSet ds = new DataSet();
                    cnx.Open();

                    string cmdText = "Usp_Insert_Update_AuditParameter_Admin";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@QAComplienceId", SqlDbType.Int);
                    param.Value = QAComplienceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AuditParameter", SqlDbType.VarChar);
                    param.Value = AuditParameter;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessType", SqlDbType.Int);
                    param.Value = ProcessType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Sequence", SqlDbType.Int);
                    param.Value = Sequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsActive", SqlDbType.Int);
                    param.Value = IsActive;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@flag", SqlDbType.Int);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    result = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return result;
        }


        public DataSet Get_AuditParameter_Admin(int UnitId, int ProcessType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_Get_AuditParameter_Admin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(ds);
                return ds;
            }
        }
        //Add By Prabhaker 28-jun-18

        public DataSet GetUnitAdmin(string UnitAdmin, int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_InsertUpdateUnitAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UnitAdmin", SqlDbType.VarChar);
                param.Value = UnitAdmin;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(ds);
                return ds;
            }
        }


        //public int InsertUnitAdmin(int GroupAdminId, string UnitAdmin, int convertPerpcs, int Active, int flag)
        public string InsertUnitAdmin(int GroupAdminId, string UnitAdmin, int convertPerpcs, bool IsActive, bool Isfabric, bool IsAccessory, int flag)
        {
            //int result = -1;
            string result = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    string cmdText = "Usp_InsertUpdateUnitAdmin";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@GroupAdminId", SqlDbType.Int);
                    param.Value = GroupAdminId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitAdmin", SqlDbType.VarChar);
                    param.Value = UnitAdmin;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@convertPerpcs", SqlDbType.Int);
                    param.Value = convertPerpcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Active", SqlDbType.Bit);
                    param.Value = IsActive;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //added by raghvinder on 23-09-2020 start
                    param = new SqlParameter("@IsFabric", SqlDbType.Bit);
                    param.Value = Isfabric;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsAccessory", SqlDbType.Bit);
                    param.Value = IsAccessory;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //added by raghvinder on 23-09-2020 end

                    //result = cmd.ExecuteNonQuery();
                    result = cmd.ExecuteScalar().ToString();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return result;
        }

        //public int UpdateUnitAdmin(int GroupAdminId, string UnitAdmin, int convertPerpcs, int Active, int flag)
        public int UpdateUnitAdmin(int GroupAdminId, string UnitAdmin, int convertPerpcs, bool IsActive, bool Isfabric, bool IsAccessory, int flag)
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();

                    DataSet dsorderDetail = new DataSet();
                    string cmdText = "Usp_InsertUpdateUnitAdmin";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@GroupAdminId", SqlDbType.Int);
                    param.Value = GroupAdminId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitAdmin", SqlDbType.VarChar);
                    param.Value = UnitAdmin;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@convertPerpcs", SqlDbType.Int);
                    param.Value = convertPerpcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Active", SqlDbType.Bit);
                    param.Value = IsActive;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlParameter outParam;
                    outParam = new SqlParameter("@RESULT", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    //added by raghvinder on 23-09-2020 start
                    param = new SqlParameter("@IsFabric", SqlDbType.Bit);
                    param.Value = Isfabric;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsAccessory", SqlDbType.Bit);
                    param.Value = IsAccessory;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //added by raghvinder on 23-09-2020 end

                    //param = new SqlParameter("@RESULT", SqlDbType.Int);
                    //param.Direction = ParameterDirection.Output;
                    //cmd.Parameters.Add(param);                   

                    adapter.Fill(dsorderDetail);


                    // Result = cmd.ExecuteNonQuery();
                    cnx.Close();
                    Result = Convert.ToInt32(outParam.Value);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return Result;

        }

        //End Of Code
        public int InsertParentDept(string DeptName, int ClientId)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Insert_Updt_ParentDepartment";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@DeptName", SqlDbType.VarChar);
                param.Value = DeptName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();

            }
            return result;
        }
        public int UpdateParentDept(int Id, string DeptName)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Insert_Updt_ParentDepartment";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@DeptName", SqlDbType.VarChar);
                param.Value = DeptName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();

            }
            return result;
        }
        public int InsertComplianceAdmin(string ProcessName, int UnitId, int ProcessType, int flag, int UserId)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    string cmdText = "Usp_InsertUpdateDeleteComplianceAdmin";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@ProcessName", SqlDbType.VarChar);
                    param.Value = ProcessName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessType", SqlDbType.Int);
                    param.Value = ProcessType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    result = cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return result;
        }

        public int UpdateComplianceAdmin(int Internal_Audit_ProcessID, string ProcessName, int UnitId, int ProcessType, int flag, int UserId)
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "Usp_InsertUpdateDeleteComplianceAdmin";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@Internal_Audit_ProcessID", SqlDbType.Int);
                    param.Value = Internal_Audit_ProcessID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessName", SqlDbType.VarChar);
                    param.Value = ProcessName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessType", SqlDbType.Int);
                    param.Value = ProcessType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    Result = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return Result;

        }
        public int deleteComplianceAdminData(int Internal_Audit_ProcessID, int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsAql = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_InsertUpdateDeleteComplianceAdmin";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter param;
                param = new SqlParameter("@Internal_Audit_ProcessID", SqlDbType.Int);
                param.Value = Internal_Audit_ProcessID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                int result = cmd.ExecuteNonQuery();

                return result;
            }
        }
        // End Of 15-May-18


        public DataSet GetHeaderQCSummeryReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_GetQCFualtSummary";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        // add by bhrata on 11-sep-19

        public DataSet GetMasterTaitorReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "usp_Mastermonthlyperformance";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }

        // Add By Prabhaker on 3-oct-18


        public DataSet Get_RevenueForBarchart()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Get_Revenue_For_Barchart";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }
        public DataSet Get_RevenueMonthWise()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Get_Revenue_InMonth_FinanicalWise";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }

        public DataSet Get_RevenueMonthWise_Delivery()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Get_Revenue_InMonth_FinanicalWise_Delivery";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }

        public DataSet Get_RevenueForBarchart_Department()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Get_Revenue_For_Barchart_Department";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }
        //End Of Code

        public DataSet GetHeaderLineManSummeryReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_GetLineManFualtSummary";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }
        public DataSet GetHeaderAchievmentLineManSummeryReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_LineManPerformance_production";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }
        //End Of code//
        ////added abhishek 27/3/2015
        public DataSet GetWorkdType_Details_MMR()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetWorker_Details_MMR";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }

        }

        //added by raghvinder on 20/03/2020 start
        public DataSet GetSloWiseQCReport(DateTime QCDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "usp_DailySlotWiseQCReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlParameter param;

                param = new SqlParameter("@Date", SqlDbType.VarChar);
                param.Value = QCDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }//added by raghvinder on 20/03/2020 end

        //added by raghvinder on 28/05/2020 start
        public DataSet GetMMRReportDate()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "spGetMMRReportDate";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //added by raghvinder on 28/05/2020 start

        //added by raghvinder on 19-05-2020 start
        public DataSet GetMMRSummaryreport(string CreatedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetMMRSummaryReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlParameter param;

                //param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                //param.Value = WorkerType;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@Dept", SqlDbType.VarChar);
                //param.Value = Dept;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@DtRpt", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //new code end

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //added by raghvinder on 19-05-2020 end


        //added by raghvinder on 16-09-2020 start
        public DataSet GetPoSrvReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "usp_Get_PO_SRV_Report";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //added by raghvinder on 16-09-2020 end
        //added by Bharat on 27-Nov-2020 start
        public DataSet GetAccessoryPoSrvReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "usp_GetAccessoryPO_Detail_Report";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //End
        //added by raghvinder on 21-05-2020 start
        public DataSet GetBIPLBudgetShortfall(string CreatedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "uspGetBIPLBudgetShortfall";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlParameter param;

                param = new SqlParameter("@CreatedOn", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }
        public DataSet GetKeyManPowerMMRreport(string CreatedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "uspGetKeyManpwerSummary";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlParameter param;

                param = new SqlParameter("@CreatedOn", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //added by raghvinder on 21-05-2020 end


        //added by raghvinder on 16/03/2020 start

        public DataSet GetMMRreport(string WorkerType, string Dept, string CreatedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetMMRReport_Details";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                //new code start
                SqlParameter param;

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Dept", SqlDbType.VarChar);
                param.Value = Dept;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedDate", SqlDbType.VarChar);
                param.Value = Convert.ToDateTime(CreatedDate).ToString();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //new code end

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //added by raghvinder on 22/06/2020 starts

        //added by raghvinder on 22/06/2020 ends
        public int UpdateCmtAdminRateAndPieces(decimal Rate, int Pieces)
        {
            int row;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "spUpdateRateAndPieces_CmtAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Rate", SqlDbType.Decimal);
                param.Value = Rate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Pieces", SqlDbType.Int);
                param.Value = Pieces;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                row = cmd.ExecuteNonQuery();
            }
            return row;
        }
        //added by raghvinder on 23/05/2020 start

        //added by raghvinder on 29/07/2020 start
        public int InsertOTDays(string CreatedDate, int OTDays)
        {
            int row;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "uspGet_MMRMonthlyOTDays";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DtRpt", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OTDays", SqlDbType.Int);
                param.Value = OTDays;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                row = cmd.ExecuteNonQuery();
            }
            return row;
        }
        //added by raghvinder on 29/07/2020 end

        public int InsertBudgetShortfall_Report(string stringXMLDataAQL, string CreatedDate)
        {
            int row;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "uspInsertUpdate_BudgetShortfall";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Xml", SqlDbType.VarChar);
                param.Value = stringXMLDataAQL;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedDate", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                row = cmd.ExecuteNonQuery();
            }
            return row;
        }
        //added by raghvinder on 23/05/2020 end

        public int InserNewMMR_Report(string stringXMLDataAQL, string CreatedDate)
        {
            int row;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "InsertUpdateMMRreport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Xml", SqlDbType.VarChar);
                param.Value = stringXMLDataAQL;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedDate", SqlDbType.VarChar);
                param.Value = CreatedDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                row = cmd.ExecuteNonQuery();
            }
            return row;
        }
        public int MMRLogOut(int UserID, int Flag)
        {
            int row;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Insert_LogOut_MMR";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                row = cmd.ExecuteNonQuery();
            }
            return row;
        }
        //added by raghvinder on 16/03/2020 end

        //Added By Prabhaker 09-jan-18
        public DataSet GetHeaderProductionMatrix(string StyleCode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                cnx.Open();

                string cmdText = "Usp_Dynamacially_Exfactory_For_ProductionMatrix_ForStyleCode";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);




                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(ds);
                return ds;
            }
        }

        //-----End of Code
        // Added By Prabhaker 12-dec-17
        public DataSet GetHeaderPOUploadPending()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_PO_Pendin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public DataSet GetHeaderOnHoldUploadPending()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_OnHold_Pending";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }

        //Add by Bharat on 18/12/2019.
        public DataSet GetHeaderPendingCostConfirmation()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_CostConfirmation_Pending";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }

        public string Usp_GetPenCostCon_Contract_Status_BreakDown(string AM, string Exfactory)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetCostConfirmation_Contract_Status_BreakDown";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AM", SqlDbType.VarChar);
                param.Value = AM;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory_PO", SqlDbType.VarChar);
                param.Value = Exfactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Res"].ToString();
                return (str);

            }
        }

        //Add by surendra2 on 02/08/2018.
        public DataSet GetHeaderOutHouseAuditReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetHeader_OutHouse_Unit_Process";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }

        //Add by Surendra2 on 28-05-2018.
        public DataSet GetHeaderComplianceQAuditReport(int ProcessType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetHeader_Line_Process";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlParameter param;

                param = new SqlParameter("@ProcessType", SqlDbType.VarChar);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public void SetTruncateTable()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_TruncateTable";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
            }
        }
        public DataSet GetHeaderPOUploadPendingMiddle()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Dynamacially_POPending";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        // End Of Prabhaker  Code 

        public int InsertUpdateWorkerDAL_MMR(string WorkerType, int Salary_Range, int UserID, int machinecount, int Mmrcount, string ddlstaffvalue, string Discription, int OT1, int OT2, int OT3, int OT4, int IsStaff, string Catagorys, decimal Measurement, decimal Qty, decimal Percent, int IsStatus)//for insert
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "InsertUpdateWorkerDetails_MMR";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@salary", SqlDbType.Int);
                param.Value = Salary_Range;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@machinecount", SqlDbType.Bit);
                param.Value = machinecount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Mmrcount", SqlDbType.Bit);
                param.Value = Mmrcount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ddlstaffvalue", SqlDbType.VarChar);
                param.Value = ddlstaffvalue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@OT1", SqlDbType.Int);
                param.Value = OT1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT2", SqlDbType.Int);
                param.Value = OT2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@OT3", SqlDbType.Int);
                param.Value = OT3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT4", SqlDbType.Int);
                param.Value = OT4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Isstaff", SqlDbType.Bit);
                param.Value = IsStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Category", SqlDbType.VarChar);

                param.Value = Catagorys;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Measurement", SqlDbType.Float);

                param.Value = Measurement;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Qty", SqlDbType.Float);
                param.Value = Qty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Percent", SqlDbType.Float);
                param.Value = Percent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsStatus", SqlDbType.Float);
                param.Value = IsStatus;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }
        //Added by Abhishek on 20/5/2015
        public int UpdateWorkerDAL_MMR(string WorkerType, int Salary_Range, int UserID, int HdnID, string DdlStaff, int Machine_Count_rdo, int MmrCount, string txt_Discription, int OT1, int OT2, int OT3, int OT4, int isstaff, string Catagorys, decimal Measurement, decimal Qty, decimal Percent, int isStatus)// for update
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "UpdateWorkerDetails_MMR";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@salary", SqlDbType.Int);
                param.Value = Salary_Range;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);//For Output
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@staffDept", SqlDbType.VarChar);
                param.Value = DdlStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Check_Machinecount", SqlDbType.Bit);
                param.Value = Machine_Count_rdo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@check_MMR_Count", SqlDbType.Bit);
                param.Value = MmrCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = txt_Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@OT1", SqlDbType.Int);
                param.Value = OT1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT2", SqlDbType.Int);
                param.Value = OT2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@OT3", SqlDbType.Int);
                param.Value = OT3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT4", SqlDbType.Int);
                param.Value = OT4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@isFatcoryStaff", SqlDbType.Bit);
                param.Value = isstaff;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Category", SqlDbType.VarChar);

                param.Value = Catagorys;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Measurement", SqlDbType.Float);

                param.Value = Measurement;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Qty", SqlDbType.Float);
                param.Value = Qty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Percent", SqlDbType.Float);
                param.Value = Percent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsStatus", SqlDbType.Float);
                param.Value = isStatus;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }

        public int InsertUpdateWorkerDAL(string WorkerType, int Salary_Range, int UserID, int machinecount, int Mmrcount, string ddlstaffvalue, string Discription, int OT1, int OT2, int OT3, int OT4, int IsStaff, string Catagorys, decimal Measurement, decimal Qty, decimal Percent)//for insert
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "InsertUpdateWorkerDetails";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@salary", SqlDbType.Int);
                param.Value = Salary_Range;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@machinecount", SqlDbType.Bit);
                param.Value = machinecount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Mmrcount", SqlDbType.Bit);
                param.Value = Mmrcount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ddlstaffvalue", SqlDbType.VarChar);
                param.Value = ddlstaffvalue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@OT1", SqlDbType.Int);
                param.Value = OT1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT2", SqlDbType.Int);
                param.Value = OT2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@OT3", SqlDbType.Int);
                param.Value = OT3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT4", SqlDbType.Int);
                param.Value = OT4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Isstaff", SqlDbType.Bit);
                param.Value = IsStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Category", SqlDbType.VarChar);

                param.Value = Catagorys;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Measurement", SqlDbType.Float);

                param.Value = Measurement;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Qty", SqlDbType.Float);
                param.Value = Qty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Percent", SqlDbType.Float);
                param.Value = Percent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }
        //Added by Abhishek on 20/5/2015
        public int UpdateWorkerDAL(string WorkerType, int Salary_Range, int UserID, int HdnID, string DdlStaff, int Machine_Count_rdo, int MmrCount, string txt_Discription, int OT1, int OT2, int OT3, int OT4, int isstaff, string Catagorys, decimal Measurement, decimal Qty, decimal Percent)// for update
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "UpdateWorkerDetails";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@salary", SqlDbType.Int);
                param.Value = Salary_Range;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);//For Output
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@staffDept", SqlDbType.VarChar);
                param.Value = DdlStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Check_Machinecount", SqlDbType.Bit);
                param.Value = Machine_Count_rdo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@check_MMR_Count", SqlDbType.Bit);
                param.Value = MmrCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = txt_Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@OT1", SqlDbType.Int);
                param.Value = OT1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT2", SqlDbType.Int);
                param.Value = OT2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@OT3", SqlDbType.Int);
                param.Value = OT3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT4", SqlDbType.Int);
                param.Value = OT4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@isFatcoryStaff", SqlDbType.Bit);
                param.Value = isstaff;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Category", SqlDbType.VarChar);

                param.Value = Catagorys;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Measurement", SqlDbType.Float);

                param.Value = Measurement;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Qty", SqlDbType.Float);
                param.Value = Qty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Percent", SqlDbType.Float);
                param.Value = Percent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }

        public DataSet GetWorkdType_Details()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetWorker_Details";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }

        public DataSet Getattchmentdetails()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetAttchmentDetails";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public int InsertAttachmentDAL(string AttachmentName, string Discription, int UserID)//for insert
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "Insert_Attachment_details";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AttachmentName", SqlDbType.VarChar);
                param.Value = AttachmentName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@CeratedBy", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;
                cnx.Close();
            }
            return Result;

        }

        public int UpdateAttachmentDAL(string AttachmentName, string Discription, int UserID, int HdnID)// for update
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "Update_Attachment_Details";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AttachmentName", SqlDbType.VarChar);
                param.Value = AttachmentName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifBy", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Retval", SqlDbType.Int);//For Output
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;

                cnx.Close();
            }
            return Result;

        }
        //Funtion for MachineAttchment Form 
        public DataSet GetMachienAttchment()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetMachineAttach_Details2";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }

        public DataSet BindCheckboxDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Select AttachmentID,AttachmentName from tblAttachment";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataSet BindDDlDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Select WorkerType,FactoryWorkSpace from tblFactoryWorkSpace";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }

        public int InsertMachienAttachmentDAL(string Machien_typ, string Chklist, string DdlselectedValue, int UserID)//for insert
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "Sp_insertMachineAttchment";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Machinetype", SqlDbType.VarChar);
                param.Value = Machien_typ;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttchmentId", SqlDbType.VarChar);
                param.Value = Chklist;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryworkId", SqlDbType.VarChar);
                param.Value = DdlselectedValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CeratedBy", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }

        public int UpdateMachienAttachmentDAL(string txtMachientype, string WorkerTypeSelectedtext, string Attachment_Id, int CurrentLoggedInUserID, int hdnID)//for insert
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "UpdateMachineAttchment_Details";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Machientype", SqlDbType.VarChar);
                param.Value = txtMachientype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WorkerTypeID", SqlDbType.VarChar);
                param.Value = WorkerTypeSelectedtext;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttachmentIds", SqlDbType.VarChar);
                param.Value = Attachment_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifiedBy", SqlDbType.Int);
                param.Value = CurrentLoggedInUserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.Int);
                param.Value = hdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }

        //for frm Garments Type DAL method
        public DataSet GetGarment_TypeDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetGarmenttypes_Details";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }


        public int InsertUpdateGarmentsDAL(string Garmenttype, string Discription, int UserID)//for insert
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "GarmentsTypesDetails_Insertforgarment";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Garmenttype", SqlDbType.VarChar);
                param.Value = Garmenttype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);
                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;

                cnx.Close();
            }
            return Result;

        }
        public int UpdateGarmentstypeDAL(string Machinetype, string discription, int UserID, int HdnID)// for update
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "GarmentsTypesDetails_InsetUpdate";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Garmenttype", SqlDbType.VarChar);
                param.Value = Machinetype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);//For Output
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;
                cnx.Close();
            }
            return Result;

        }

        public DataSet GetOBSectionDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "GetSection_Details";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }


        public int InsertOBSectionDAL(string section, string Discription, int UserID)//for insert
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                //string text = "OnsectionDetails_InsetUpdate";//spname
                string text = "GarmentsTypesDetails_Insert";

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@section", SqlDbType.VarChar);
                param.Value = section;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = Discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;

                //Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }
        public int UpdateOBSectionDAL(string section, string discription, int UserID, int HdnID)// for update
        {
            int Result; ;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                //string text = "OnsectionDetails_InsetUpdate";
                string text = "GarmentsTypesDetails_Update";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@section", SqlDbType.VarChar);
                param.Value = section;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Discription", SqlDbType.VarChar);
                param.Value = discription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);//For Output
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                Result = (int)cmd.Parameters["@RetVal"].Value;
                // Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }
        //2/6/2015
        public DataSet GetManpowerOT()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Usp_GetmanpowerOTdetials";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public int InsertGetManpowerOTDAL(string CatgoryOT, double CostPPPh, string FactoryStaff, int UserID)//for insert
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "InsertManpowerOTDAL";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CatgoryOT", SqlDbType.VarChar);
                param.Value = CatgoryOT;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CostPPPh", SqlDbType.Int);
                param.Value = CostPPPh;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryStaff", SqlDbType.VarChar);
                param.Value = FactoryStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }

        public int UpdateGetManpowerOTDAL(string CatgoryOT, double CostPPPh, string FactoryStaff, int UserID, int HdnID)// for update
        {
            int Result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string text = "UpdateGetManpowerOT";//spname

                SqlCommand cmd = new SqlCommand(text, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CatgoryOT", SqlDbType.VarChar);
                param.Value = CatgoryOT;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CostPPPh", SqlDbType.Decimal);
                param.Value = CostPPPh;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@FactoryStaff", SqlDbType.VarChar);
                param.Value = FactoryStaff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = HdnID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;

        }
        //END
        ////Added by abhishek on 5/6/2015
        //public DataSet GetClientlistUpdateDeliveryModesAssociation( int modeid)//Get client
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
        //    {
        //        cnx.Open();

        //        //string cmdText = "select ClientId,clientcode from client select * from tblCMTAdmin";
        //        //updated on 24/8/2015
        //        string cmdText = "Usp_GetProductionListData";
        //        //end

        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        //SqlParameter Param = new SqlParameter();
        //        cmd.CommandType = CommandType.Text;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;
        //        param = new SqlParameter("@Modeid", SqlDbType.Int);
        //        param.Value = modeid;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);
        //        //DataTable dt = new DataTable();
        //        DataSet ds = new DataSet();
        //        SqlDataAdapter adapter = new SqlDataAdapter(cmd);
        //        adapter.Fill(ds);



        //        cnx.Close();
        //        return ds;
        //    }
        //}

        //added by abhishek on 3/6/2016 for check user have right to see the page .
        public DataSet GetClientlist(int modeid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetProductionListData";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@Modeid", SqlDbType.Int);
                param.Value = modeid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }
        }

        public DataTable GetClientlistFillter(string Clientids)//Get client fiileteranme
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Sp_GetfillerclientName";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                //DataTable dt = new DataTable();
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.VarChar);
                if (string.IsNullOrEmpty(Clientids))
                {
                    Clientids = "-1";

                }
                else
                { param.Value = Clientids; }


                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }
        }
        //added by abhishek on 24/8/2015
        public DataTable GeIedetails(string ids)//Get IE fiileteranme
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Usp_GetIEName";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                //DataTable dt = new DataTable();
                SqlParameter param;

                param = new SqlParameter("@IE", SqlDbType.VarChar);
                if (string.IsNullOrEmpty(ids))
                {
                    ids = "-1";

                }
                else
                { param.Value = ids; }


                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }
        }

        //END


        //added by abhishek on 3/6/2016 for check user have right to see the page .
        public DataTable PermissionToAccessPage(int departmentID, string ApplicationModulaPath)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_IsUserHavePermission_Access_Page";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@DepertmentID", SqlDbType.Int);
                param.Value = departmentID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModulaPath", SqlDbType.VarChar);
                param.Value = ApplicationModulaPath;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataTable ds = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }
        }
        //end by abhishek 3/6/2016
        /*-----END------ */

        #region Email Template

        public void UpdateEmailTemplate(EmailTemplate objEmailTemplate)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdtext = "sp_email_template_update_email_template";

                SqlCommand cmd = base.SqlCommand(cmdtext, cnx, QueryType.Update);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = objEmailTemplate.EmailTemplateID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Title", SqlDbType.VarChar);
                param.Value = objEmailTemplate.Title;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Subject", SqlDbType.VarChar);
                param.Value = objEmailTemplate.Subject;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Description", SqlDbType.VarChar);
                param.Value = objEmailTemplate.Description;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Content", SqlDbType.VarChar);
                param.Value = objEmailTemplate.Content;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentList", SqlDbType.VarChar);
                param.Value = objEmailTemplate.DepartmentIDs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationList", SqlDbType.VarChar);
                param.Value = objEmailTemplate.DesignationIDs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                cnx.Close();

            }
        }

        public EmailTemplate GetEmailTemplateById(int EmailTemplateID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_email_template_get_by_id";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@d", SqlDbType.VarChar);
                param.Value = EmailTemplateID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsEmailTemplate = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsEmailTemplate);

                EmailTemplate emailtemplateobj = ConvertDataSetToEmailTemplate(dsEmailTemplate);

                cnx.Close();

                return emailtemplateobj;
            }

        }

        public EmailTemplate GetEmailTemplateByType(EmailTemplateType type)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_email_template_get_by_type";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = (int)type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsEmailTemplate = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsEmailTemplate);

                EmailTemplate emailtemplateobj = ConvertDataSetToEmailTemplate(dsEmailTemplate);

                cnx.Close();

                return emailtemplateobj;
            }
        }

        private EmailTemplate ConvertDataSetToEmailTemplate(DataSet DSEmailTemplate)
        {
            DataTable EmailTemplateTable = DSEmailTemplate.Tables[0];

            DataRowCollection rows = EmailTemplateTable.Rows;
            EmailTemplate emailtemplateobject = new EmailTemplate();
            if (rows.Count > 0)
            {
                emailtemplateobject.EmailTemplateID = Convert.ToInt32(rows[0]["Id"]);
                emailtemplateobject.Title = Convert.ToString(rows[0]["Title"]);
                emailtemplateobject.Subject = Convert.ToString(rows[0]["Subject"]);
                emailtemplateobject.Description = Convert.ToString(rows[0]["Description"]);
                emailtemplateobject.Content = Convert.ToString(rows[0]["Content"]);
                emailtemplateobject.DepartmentIDs = (rows[0]["DepartmentList"] == DBNull.Value) ? string.Empty : Convert.ToString(rows[0]["DepartmentList"]);
                emailtemplateobject.DesignationIDs = (rows[0]["DesignationList"] == DBNull.Value) ? string.Empty : Convert.ToString(rows[0]["DesignationList"]);
            }
            return emailtemplateobject;

        }

        public List<EmailTemplate> GetAllEmailTemplate()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_email_template_get_all";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsEmailTemplateList = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsEmailTemplateList);

                List<EmailTemplate> emailtemplate = ConvertDataSetToGetAllEmailTemplate(dsEmailTemplateList);
                cnx.Close();
                return emailtemplate;

            }
        }

        public DataSet GetAllEmailSchedule()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_email_schedule_get_all";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsEmailTemplateList = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsEmailTemplateList);

                List<EmailTemplate> emailtemplate = ConvertDataSetToGetAllEmailTemplate(dsEmailTemplateList);

                cnx.Close();
                return dsEmailTemplateList;
            }
        }

        public void Insert_Email_Schedule_Data(int emailid, string days, string time)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_email_schedule_insert_data";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = emailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("days", SqlDbType.VarChar);
                param.Value = days.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("etime", SqlDbType.VarChar);
                param.Value = time.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
        }

        public List<EmailSchedule> Get_All_Email_Schedule_Tempalte_Data(string tmFrom, string tmTo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_get_all_email_schedule_template_by_time";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("tmFrom", SqlDbType.VarChar);
                param.Value = tmFrom.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("tmTo", SqlDbType.VarChar);
                param.Value = tmTo.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsEmailTemplate = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsEmailTemplate);
                List<EmailSchedule> emailtemplate = ConvertDataSetToGetAllEmailSchedule(dsEmailTemplate);

                cnx.Close();

                return emailtemplate;
            }
        }

        private List<EmailTemplate> ConvertDataSetToGetAllEmailTemplate(DataSet DSEmailTemplateList)
        {
            List<EmailTemplate> objEmailTemplateList = new List<EmailTemplate>();
            DataTable ETTable = DSEmailTemplateList.Tables[0];

            foreach (DataRow rows in ETTable.Rows)
            {
                EmailTemplate emailtemplateobject = new EmailTemplate();
                emailtemplateobject.EmailTemplateID = Convert.ToInt32(rows["Id"]);
                emailtemplateobject.Title = Convert.ToString(rows["Title"]);
                emailtemplateobject.Subject = Convert.ToString(rows["Subject"]);
                emailtemplateobject.Description = Convert.ToString(rows["Description"]);
                emailtemplateobject.Content = Convert.ToString(rows["Content"]);
                emailtemplateobject.TemplateType = (EmailTemplateType)(Convert.ToInt32(rows["TemplateTypeID"]));

                objEmailTemplateList.Add(emailtemplateobject);
            }

            return objEmailTemplateList;
        }

        private List<EmailSchedule> ConvertDataSetToGetAllEmailSchedule(DataSet DSEmailTemplateList)
        {
            List<EmailSchedule> objEmailTemplateList = new List<EmailSchedule>();
            DataTable ETTable = DSEmailTemplateList.Tables[0];

            foreach (DataRow rows in ETTable.Rows)
            {
                EmailSchedule emailtemplateobject = new EmailSchedule();
                emailtemplateobject.EmailTemplateID = Convert.ToInt32(rows["EmailId"]);
                emailtemplateobject.Title = Convert.ToString(rows["Title"]);
                emailtemplateobject.Subject = Convert.ToString(rows["Subject"]);
                emailtemplateobject.Description = Convert.ToString(rows["Description"]);
                emailtemplateobject.Content = Convert.ToString(rows["Content"]);
                emailtemplateobject.TemplateType = (EmailTemplateType)(Convert.ToInt32(rows["TemplateTypeID"]));
                emailtemplateobject.EmailScheduleID = Convert.ToInt64(rows["ScheduleId"]);
                emailtemplateobject.Time = Convert.ToString(rows["ETime"]);
                emailtemplateobject.DateTime = DateTime.ParseExact(rows["ETime"].ToString(), "HH:mm:ss",
                                                                   System.Globalization.CultureInfo.InvariantCulture);
                emailtemplateobject.DayOfWeek =
                    (DayOfWeek)(Convert.ToInt32(rows["Days"]) == 0 ? 7 : (Convert.ToInt32(rows["Days"]) - 1));
                objEmailTemplateList.Add(emailtemplateobject);
            }

            return objEmailTemplateList;
        }

        #endregion







        #region Category Methods

        public int CreateCategory(Category category)
        {
            int categoryid = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_category_create_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;

                    paramOut = new SqlParameter("@CategoryId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);


                    SqlParameter param;
                    param = new SqlParameter("@CategoryId_i", SqlDbType.Int);
                    param.Value = category.CategoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Name", SqlDbType.VarChar);
                    param.Value = category.CategoryName;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Code", SqlDbType.VarChar);
                    param.Value = category.CategoryCode;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentId", SqlDbType.Int);
                    if (category.Parent.CategoryID == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.Parent.CategoryID;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = category.Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@UserID", SqlDbType.Int);
                    param.Value = LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    /*
                     param = new SqlParameter("@Weeks", SqlDbType.Int);
                     param.Value = category.Weeks;
                     param.Direction = ParameterDirection.Input;
                     cmd.Parameters.Add(param);
                     */
                    // executes the query


                    param = new SqlParameter("@wastgae", SqlDbType.Float);
                    if (category.wastage == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.wastage;
                    param.Direction = ParameterDirection.Input;


                    cmd.Parameters.Add(param);
                    cmd.ExecuteNonQuery();


                    if (paramOut.Value != DBNull.Value)
                    {
                        categoryid = Convert.ToInt32(paramOut.Value);
                    }
                    else
                    {
                        categoryid = -1;
                    }
                    category.CategoryID = categoryid;

                    cnx.Close();

                    return categoryid;
                }
                catch
                {
                    categoryid = -1;
                    return categoryid;
                }
            }
        }
        //Add By Prabhaker 23-jun-18


        public DataSet GetAllAdminUnit(string UnitType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();
                string cmdText = "sp_get_All_Unit_Admin";
                //end
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UnitType", SqlDbType.VarChar);
                param.Value = UnitType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //DataTable dt = new DataTable();
                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds;
            }
        }

        public int CreateCategory_New(Category category)
        {
            int categoryid = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_category_create_New_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;

                    paramOut = new SqlParameter("@CategoryId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);


                    SqlParameter param;
                    param = new SqlParameter("@CategoryId_i", SqlDbType.Int);
                    param.Value = category.CategoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Name", SqlDbType.VarChar);
                    param.Value = category.CategoryName;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Code", SqlDbType.VarChar);
                    param.Value = category.CategoryCode;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentId", SqlDbType.Int);
                    if (category.CategoryID == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.CategoryID;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = category.Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@UserID", SqlDbType.Int);
                    param.Value = category.LoggedInUser;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@wastgae", SqlDbType.Float);
                    if (category.wastage == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.wastage;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DyedRate", SqlDbType.Float);
                    param.Value = category.DyedRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PrintRate", SqlDbType.Float);
                    param.Value = category.PrintRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DigitalRate", SqlDbType.Float);
                    param.Value = category.DigitalRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsCANDC", SqlDbType.Bit);
                    param.Value = category.Is_CANDC;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@unit", SqlDbType.VarChar);
                    param.Value = category.unit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GST", SqlDbType.Decimal);
                    param.Value = category.GST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GriegeGST", SqlDbType.Decimal);
                    param.Value = category.GriegeGST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessGST", SqlDbType.Decimal);
                    param.Value = category.ProcessGST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // Start add new colum for HNSCode (06022023 Rajeevs)                    
                    param = new SqlParameter("@HSNCode", SqlDbType.NVarChar);
                    param.Value = category.HSNCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    // End 

                    cmd.ExecuteNonQuery();

                    if (paramOut.Value != DBNull.Value)                    
                        categoryid = Convert.ToInt32(paramOut.Value);
                    
                    else                    
                        categoryid = -1;
                    
                    category.CategoryID = categoryid;

                    cnx.Close();

                    return categoryid;
                }
                catch
                {
                    categoryid = -1;
                    return categoryid;
                }
            }
        }
        public int UpdateCategorySupplierDays(int CategoryID, int grgDays, int grgrange, int dyedDays, int dyedrange, int ProcessDays, int Process_drange, int PrintDays, int PrintRange, int FinishDays, int FinishRange, int RFDstg1day, int RFDstg1Range, int RFDstg2Days, int RFDstg2range, int embrDays, int embrRange, int embllDays, int embllRange, int Userid)
        {
            int categoryid = -1;
            int output = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "Usp_UpadateSupplierDays_For_GroupAdmin";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;

                    paramOut = new SqlParameter("@Category_Group_id", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Input;
                    paramOut.Value = CategoryID;

                    cmd.Parameters.Add(paramOut);


                    SqlParameter param;
                    param = new SqlParameter("@fab_Griegday", SqlDbType.Int);
                    param.Value = grgDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_Griegday_drange", SqlDbType.Int);
                    param.Value = grgrange;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_DyedDay", SqlDbType.VarChar);
                    param.Value = dyedDays;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_DyedDay_drange", SqlDbType.Int);

                    param.Value = dyedrange;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessDay", SqlDbType.Int);
                    param.Value = ProcessDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Process_drange", SqlDbType.Int);
                    param.Value = Process_drange;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@fab_PrintDay", SqlDbType.Int);
                    param.Value = PrintDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@fab_PrintDay_drange", SqlDbType.Int);
                    param.Value = PrintRange;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_FinishDay", SqlDbType.Int);

                    param.Value = FinishDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@fab_FinishDay_drange", SqlDbType.Int);
                    param.Value = FinishRange;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_RFDDay_stage1", SqlDbType.Int);
                    param.Value = RFDstg1day;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_RFD_stage1drange", SqlDbType.Int);
                    param.Value = RFDstg1Range;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@fab_RFD_stage2", SqlDbType.Int);
                    param.Value = RFDstg2Days;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_RFD_stage2drange", SqlDbType.Int);
                    param.Value = RFDstg2range;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@fab_EmbroderyDay", SqlDbType.Int);
                    param.Value = embrDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@fab_EmbroderyDay_drange", SqlDbType.Int);
                    param.Value = embrRange;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Fab_Embellishment_drange", SqlDbType.Int);
                    param.Value = embllRange;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Fab_EmbellishmentDay", SqlDbType.Int);
                    param.Value = embllDays;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                    param.Value = Userid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreatedOn",SqlDbType.DateTime);
                    param.Value = DateTime.Today;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ModifiedOn", SqlDbType.DateTime);
                    param.Value = DateTime.Today;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ModifiedBy", SqlDbType.Int);
                    param.Value = Userid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                     output = cmd.ExecuteNonQuery();
                }
                catch( Exception  ex)
                {

                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    cnx.Close();


                }
            }
            return output;
        }

        public int UpdateCategory_New(Category category)
        {
            int Id = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_category_update_New_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);                  
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;
                    paramOut = new SqlParameter("@oId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    SqlParameter param;
                    param = new SqlParameter("@CategoryId", SqlDbType.Int);
                    param.Value = category.CategoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Name", SqlDbType.VarChar);
                    param.Value = category.CategoryName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Code", SqlDbType.VarChar);
                    param.Value = category.CategoryCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = category.Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@wastage", SqlDbType.Int);
                    if (category.wastage == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.wastage;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@userID", SqlDbType.Int);
                    param.Value = category.LoggedInUser;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DyedRate", SqlDbType.Float);
                    param.Value = category.DyedRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PrintRate", SqlDbType.Float);
                    param.Value = category.PrintRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DigitalRate", SqlDbType.Float);
                    param.Value = category.DigitalRate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = category.UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCANDC", SqlDbType.Bit);
                    param.Value = category.Is_CANDC;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GST", SqlDbType.Decimal);
                    param.Value = category.GST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GriegeGST", SqlDbType.Decimal);
                    param.Value = category.GriegeGST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProcessGST", SqlDbType.Decimal);
                    param.Value = category.ProcessGST;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    // Start add new colum for HNSCode (06022023 Rajeevs)       
                    param = new SqlParameter("HSNCode", SqlDbType.NVarChar);                    
                    param.Value = category.HSNCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    //end
                    cmd.ExecuteNonQuery();

                    if (paramOut.Value != DBNull.Value)
                        category.CategoryID = Convert.ToInt32(paramOut.Value);
                    else
                        category.CategoryID = -1;

                    Id = category.CategoryID;
                    cnx.Close();

                    return category.CategoryID;
                }
                catch
                {
                    category.CategoryID = -1;
                    Id = category.CategoryID;
                    return Id;
                }
            }
        }


        public Category GetCategoryById_New(int categoryId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_category_by_id_New";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@CategoryId", SqlDbType.Int);
                param.Value = categoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                Category category = null;

                if (reader.Read())
                {
                    category = new Category();
                    category.CategoryID = Convert.ToInt32(reader["Id"]);
                    category.CategoryName = reader["Name"].ToString();
                    category.CategoryCode = reader["Code"].ToString();
                    category.Type = Convert.ToInt32(reader["Type"]);
                    category.wastage = (reader["AccesoriesWastage"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["AccesoriesWastage"]);
                    if ((reader["AccesoriesWastage"] == DBNull.Value) || (reader["AccesoriesWastage"].ToString() == "0"))
                    {
                        category.wastage_ = "";
                    }
                    else
                    {
                        category.wastage_ = (reader["AccesoriesWastage"]).ToString();
                    }
                    //category.GreigeToFinished = Convert.ToBoolean(reader["GreigeToFinished"]);
                    //category.finished = Convert.ToBoolean(reader["Finished"]);
                    category.DyedRate = (float)Convert.ToDouble(reader["DyedRate"]);
                    category.PrintRate = (float)Convert.ToDouble(reader["PrintRate"]);
                    category.DigitalRate = (float)Convert.ToDouble(reader["DigitalRate"]);
                    category.unit = reader["Unit"].ToString();
                    //if (reader["ParentId"] != DBNull.Value)
                    //{
                    //    category.Parent = new Category();
                    //    category.Parent.CategoryID = Convert.ToInt32(reader["ParentId"]);
                    //}
                    //else
                    //{
                    //    category.Parent = new Category();
                    //    category.Parent.CategoryID = -1;
                    //}
                    //category.CreatedBy = Convert.ToInt32(reader["CreatedBy"]);
                    //category.CreatedOn = Convert.ToDateTime(reader["CreatedOn"]);
                    //category.ModifiedBy = Convert.ToInt32(reader["ModifiedBy"]);
                    //category.ModifiedOn = Convert.ToDateTime(reader["ModifiedOn"]);
                }

                return category;
            }

        }

        public int UpdateAuditCategory(AuditCategory category)
        {
            int Id = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_internal_audit_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "UPDATE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = category.Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@InternalAuditCatgName", SqlDbType.VarChar);
                    param.Value = category.InternalAuditCatgName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ModifiedBy", SqlDbType.Int);
                    param.Value = category.CreatedBy;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlParameter paramOut;
                    paramOut = new SqlParameter("@AuditCategoryId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    // executes the query
                    Id = cmd.ExecuteNonQuery();
                    if (paramOut.Value != DBNull.Value)
                        Id = Convert.ToInt32(paramOut.Value);

                    cnx.Close();

                    return Id;
                }
                catch
                {
                    category.Id = -1;
                    Id = category.Id;
                    return Id;
                }
            }
        }

        public int UpdateAuditCategoryDetails(AuditCategoryDetails category)
        {
            int Id = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();


                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_internal_audit_category_details";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "UPDATE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CategoryQuesId", SqlDbType.Int);
                    param.Value = category.CategoryQuesId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@QuestionName", SqlDbType.VarChar);
                    param.Value = category.QuestionName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = category.DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = category.DesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CategoryId", SqlDbType.Int);
                    param.Value = category.CategoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ModyfiedBy", SqlDbType.Int);
                    param.Value = Convert.ToInt32(category.UpdatedBy);
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlParameter paramOut;
                    paramOut = new SqlParameter("@AuditCategoryQuesId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    // executes the query
                    Id = cmd.ExecuteNonQuery();
                    if (paramOut.Value != DBNull.Value)
                        Id = Convert.ToInt32(paramOut.Value);
                    cnx.Close();

                    return Id;
                }
                catch
                {
                    category.CategoryQuesId = -1;
                    Id = category.CategoryQuesId;
                    return Id;
                }
            }
        }

        public int UpdateAuditDetails(AuditCategoryDetails category)
        {
            int Id = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_update_audit_category_details";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@CategoryQuesId", SqlDbType.Int);
                    param.Value = category.CategoryQuesId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AllDetailsSameCatg", SqlDbType.Bit);
                    param.Value = category.AllDetailsSameCatg;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AllCatgAllDetails", SqlDbType.Bit);
                    param.Value = category.AllCatgAllDetails;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    // executes the query
                    cmd.ExecuteNonQuery();

                    cnx.Close();

                    return category.CategoryQuesId;
                }
                catch
                {
                    category.CategoryQuesId = -1;
                    Id = category.CategoryQuesId;
                    return Id;
                }
            }
        }

        public AuditCategoryDetails GetAuditDetails(int CatgQusId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();
                SqlDataReader reader;

                // Create a SQL command object
                string cmdText = "sp_get_audit_category_details";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                // Set the command type to StoredProcedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@CategoryQuesId", SqlDbType.Int);
                param.Value = CatgQusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                AuditCategoryDetails internalAuditDetails = new AuditCategoryDetails();

                while (reader.Read())
                {

                    internalAuditDetails.AllDetailsSameCatg = Convert.ToBoolean(reader["AllDetailsSameCategory"]);
                    internalAuditDetails.AllCatgAllDetails = Convert.ToBoolean(reader["AllCategoryAllDetails"]);
                }
                reader.Close();

                return internalAuditDetails;
            }
        }

        public DataSet GetAllUnit()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object
                string cmdText = "sp_get_all_unit";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds;
            }
        }

        public bool CheckAuditor(int CatgQusId, int UserId)
        {
            bool AuditorCheck = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                // Create a SQL command object
                string cmdText = "sp_auditor";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                // Set the command type to StoredProcedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter paramOut;
                paramOut = new SqlParameter("@CheckUser", SqlDbType.Bit);
                paramOut.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramOut);

                SqlParameter param;

                param = new SqlParameter("@CategoryQusId", SqlDbType.Int);
                param.Value = CatgQusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "GetAuditorByUserId";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
                if (paramOut.Value != DBNull.Value)
                    AuditorCheck = Convert.ToBoolean(paramOut.Value);

                return AuditorCheck;
            }
        }

        public int DeleteAuditCategory(AuditCategory category)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_internal_audit_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;
                    paramOut = new SqlParameter("@AuditCategoryId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "DELETE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = category.Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // executes the query
                    cmd.ExecuteNonQuery();

                    cnx.Close();
                    if (paramOut.Value != DBNull.Value)
                        category.Id = Convert.ToInt32(paramOut.Value);
                    else
                        category.Id = 0;
                    return category.Id;
                }
                catch
                {
                    category.Id = -1;
                    return category.Id;
                }
            }
        }

        public int DeleteAuditCategoryDetails(AuditCategoryDetails category)
        {
            int ID = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_internal_audit_category_details";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "DELETE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CategoryQuesId", SqlDbType.Int);
                    param.Value = category.CategoryQuesId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // executes the query
                    cmd.ExecuteNonQuery();

                    cnx.Close();
                    return category.CategoryQuesId;
                }
                catch
                {
                    category.CategoryQuesId = -1;
                    ID = category.CategoryQuesId;
                    return ID;
                }
            }
        }

        public int DeleteAuditorById(int Id)
        {
            int ID = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_auditor";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "DELETE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // executes the query
                    cmd.ExecuteNonQuery();

                    cnx.Close();
                    return ID;
                }
                catch
                {
                    return 0;
                }
            }
        }

        //ADDED BY RAGHVINDER ON 22-09-2020 STARTS
        public DataTable GetFabricCountConstruction(int CategoryID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dt = new DataTable();

                string cmdText = "usp_get_Fabric_CountConstruction";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CategoryID", SqlDbType.Int);
                param.Value = CategoryID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;

            }
        }
        //ADDED BY RAGHVINDER ON 22-09-2020 ENDS


        //ADDED BY RAGHVINDER ON 02-10-2020 START
        public DataTable FreezeUnit(int CategoryId, int Type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dt = new DataTable();

                string cmdText = "usp_Unit_Freeze";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CategoryID", SqlDbType.Int);
                param.Value = CategoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;

            }
        }
        //ADDED BY RAGHVINDER ON 02-10-2020 END

        //ADDED BY RAGHVINDER ON 25-09-2020 STARTS
        public DataTable GetApprovedUnit(int Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dt = new DataTable();

                string cmdText = "usp_GetApprovedUnit";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;

            }
        }
        //ADDED BY RAGHVINDER ON 25-09-2020 ENDS

        public List<Category> GetAllCategories_New_Submit(int UserId, out int totalRecords)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_all_categories_New_Submit";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter outParam;
                outParam = new SqlParameter("@Count", SqlDbType.Int);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                SqlParameter param;

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> categories = new List<Category>();

                while (reader.Read())
                {
                    Category category = PopulateCategory_New(reader);
                    categories.Add(category);
                }
                reader.Close();
                totalRecords = Convert.ToInt32(outParam.Value);

                return categories;
            }

        }

        public List<Category> GetAllCategories_New(Category searchCrtieria)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_all_categories_New";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                //SqlParameter outParam;
                //outParam = new SqlParameter("@Count", SqlDbType.Int);
                //outParam.Direction = ParameterDirection.Output;
                //cmd.Parameters.Add(outParam);


                //param = new SqlParameter("@PageSize", SqlDbType.Int);
                //param.Value = pageSize;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@StartRecord", SqlDbType.Int);
                //param.Value = startRecord;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = searchCrtieria.Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CategoryID", SqlDbType.Int);
                param.Value = searchCrtieria.CategoryID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = searchCrtieria.LoggedInUser;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> categories = new List<Category>();

                while (reader.Read())
                {
                    Category category = PopulateCategory_New(reader);
                    categories.Add(category);
                }
                reader.Close();
                //totalRecords = Convert.ToInt32(outParam.Value);

                return categories;
            }

        }

        public List<Category> GetSubCategories_New(int parentId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_sub_categories_New";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@ParentId", SqlDbType.Int);
                param.Value = parentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> subCategories = new List<Category>();

                while (reader.Read())
                {
                    Category subCategory = PopulateCategory_New(reader);
                    subCategories.Add(subCategory);
                }

                return subCategories;
            }

        }

        public IList<Category> GetAllCategoriesType_New(int Type)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_categories_by_type_New";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> categories = new List<Category>();

                while (reader.Read())
                {
                    Category category = PopulateCategory_New(reader);
                    categories.Add(category);
                }

                return categories;
            }

        }

        private Category PopulateCategory_New(SqlDataReader reader)
        {
            Category category = new Category();
            if (reader.HasRows)
            {

                category.CategoryID = Convert.ToInt32(reader["Id"]);
                category.CategoryName = reader["Name"].ToString();
                category.CategoryCode = reader["Code"].ToString();
                category.wastage = (reader["AccesoriesWastage"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["AccesoriesWastage"]);
                if ((reader["AccesoriesWastage"] == DBNull.Value) || (reader["AccesoriesWastage"].ToString() == "0"))
                {
                    category.wastage_ = "";
                }
                else
                {
                    category.wastage_ = (reader["AccesoriesWastage"]).ToString();
                }
                category.Type = Convert.ToInt32(reader["Type"]);

                if (reader["DyedRate"] == DBNull.Value)
                {

                }
                else
                {
                    category.DyedRate = Convert.ToSingle(reader["DyedRate"]);
                }

                category.PrintRate = (reader["PrintRate"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["PrintRate"]);
                category.DigitalRate = (reader["DigitalRate"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["DigitalRate"]);
                category.unit = reader["Unit"].ToString();
                category.UnitId = reader["UnitId"] == DBNull.Value ? -1 : Convert.ToInt32(reader["UnitId"]);
                category.Is_CANDC = reader["Is_CANDC"] == DBNull.Value ? false : Convert.ToBoolean(reader["Is_CANDC"]);
                category.GST = reader["GST"] == DBNull.Value ? 0 : Convert.ToDecimal(reader["GST"]);//new line
                category.fab_Griegday = reader["fab_Griegday"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_Griegday"]);
                category.fab_Griegday_drange = reader["fab_Griegday_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_Griegday_drange"]);
                category.fab_DyedDay = reader["fab_DyedDay"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_DyedDay"]);
                category.fab_DyedDay_drange = reader["fab_DyedDay_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_DyedDay_drange"]);
                category.fab_PrintDay = reader["fab_PrintDay"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_PrintDay"]);
                category.fab_PrintDay_drange = reader["fab_PrintDay_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_PrintDay_drange"]);
                category.fab_FinishDay = reader["fab_FinishDay"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_FinishDay"]);
                category.fab_FinishDay_drange = reader["fab_FinishDay_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_FinishDay_drange"]);
                category.fab_RFDDay_stage1 = reader["fab_RFDDay_stage1"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_RFDDay_stage1"]);
                category.fab_RFD_stage1drange = reader["fab_RFD_stage1drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_RFD_stage1drange"]);
                category.fab_RFD_stage2 = reader["fab_RFD_stage2"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_RFD_stage2"]);
                category.fab_RFD_stage2drange = reader["fab_RFD_stage2drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_RFD_stage2drange"]);
                category.Fab_EmbellishmentDay = reader["Fab_EmbellishmentDay"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Fab_EmbellishmentDay"]);
                category.Fab_Embellishment_drange = reader["Fab_Embellishment_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Fab_Embellishment_drange"]);
                category.fab_EmbroderyDay = reader["fab_EmbroderyDay"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_EmbroderyDay"]);
                category.fab_EmbroderyDay_drange = reader["fab_EmbroderyDay_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["fab_EmbroderyDay_drange"]);
                category.Process_day = reader["Process_day"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Process_day"]);
                category.Process_drange = reader["Process_drange"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Process_drange"]);

                category.GriegeGST = reader["GriegeGST"] == DBNull.Value ? 0 : Convert.ToDecimal(reader["GriegeGST"]);
                category.ProcessGST = reader["ProcessGST"] == DBNull.Value ? 0 : Convert.ToDecimal(reader["ProcessGST"]);
                // Start add new colum for HNSCode (06022023 Rajeevs)       
                category.HSNCode = reader["HSNCode"].ToString();
                //
            }
            return category;
        }
        //End Of Code

        public int UpdateCategory(Category category)
        {
            int Id = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    // Create a SQL command object
                    string cmdText = "sp_category_update_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    // Set the command type to StoredProcedure
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    // Add parameters
                    SqlParameter paramOut;
                    paramOut = new SqlParameter("@oId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    SqlParameter param;
                    param = new SqlParameter("@CategoryId", SqlDbType.Int);
                    param.Value = category.CategoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Name", SqlDbType.VarChar);
                    param.Value = category.CategoryName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Code", SqlDbType.VarChar);
                    param.Value = category.CategoryCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentId", SqlDbType.Int);
                    if (category.Parent.CategoryID == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.Parent.CategoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = category.Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@wastage", SqlDbType.Int);
                    if (category.wastage == -1)
                        param.Value = DBNull.Value;
                    else
                        param.Value = category.wastage;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@userID", SqlDbType.Int);
                    param.Value = LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // executes the query
                    cmd.ExecuteNonQuery();

                    if (paramOut.Value != DBNull.Value)
                        category.CategoryID = Convert.ToInt32(paramOut.Value);
                    else
                        category.CategoryID = -1;

                    Id = category.CategoryID;
                    cnx.Close();

                    return category.CategoryID;
                }
                catch
                {
                    category.CategoryID = -1;
                    Id = category.CategoryID;
                    return Id;
                }
            }
        }

        /// <summary>
        /// Retrieves the <c>Category</c> by the given category id.
        /// </summary>
        /// <param name="categoryId">Id of the category to be retrieved.</param>
        /// <returns>The retrieved category.</returns>
        public Category GetCategoryById(int categoryId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_category_by_id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@CategoryId", SqlDbType.Int);
                param.Value = categoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                Category category = null;

                if (reader.Read())
                {
                    category = new Category();
                    category.CategoryID = Convert.ToInt32(reader["Id"]);
                    category.CategoryName = reader["Name"].ToString();
                    category.CategoryCode = reader["Code"].ToString();
                    category.Type = Convert.ToInt32(reader["Type"]);
                    category.wastage = (reader["AccesoriesWastage"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["AccesoriesWastage"]);
                    if ((reader["AccesoriesWastage"] == DBNull.Value) || (reader["AccesoriesWastage"].ToString() == "0"))
                    {
                        category.wastage_ = "";
                    }
                    else
                    {
                        category.wastage_ = (reader["AccesoriesWastage"]).ToString();
                    }
                    if (reader["ParentId"] != DBNull.Value)
                    {
                        category.Parent = new Category();
                        category.Parent.CategoryID = Convert.ToInt32(reader["ParentId"]);
                    }
                    else
                    {
                        category.Parent = new Category();
                        category.Parent.CategoryID = -1;
                    }
                    //category.CreatedBy = Convert.ToInt32(reader["CreatedBy"]);
                    //category.CreatedOn = Convert.ToDateTime(reader["CreatedOn"]);
                    //category.ModifiedBy = Convert.ToInt32(reader["ModifiedBy"]);
                    //category.ModifiedOn = Convert.ToDateTime(reader["ModifiedOn"]);
                }

                return category;
            }

        }

        /// <summary>
        /// Retrieves all the categories with paging.
        /// If pageSize = 0 then all the categories are retrieved.
        /// </summary>
        /// <param name="startRecord"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRecords"></param>
        /// <param name="searchCrtieria"></param>
        /// <returns>Paged categories.</returns>
        public List<Category> GetAllCategories(int startRecord, int pageSize, out int totalRecords,
            Category searchCrtieria)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_all_categories";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter outParam;
                outParam = new SqlParameter("@Count", SqlDbType.Int);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                SqlParameter param;

                param = new SqlParameter("@PageSize", SqlDbType.Int);
                param.Value = pageSize;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartRecord", SqlDbType.Int);
                param.Value = startRecord;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = searchCrtieria.Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ParentId", SqlDbType.Int);
                param.Value = searchCrtieria.Parent != null ? searchCrtieria.Parent.CategoryID : -1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Name", SqlDbType.VarChar);
                param.Value = searchCrtieria.CategoryName == null ? "" : searchCrtieria.CategoryName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Code", SqlDbType.VarChar);
                param.Value = searchCrtieria.CategoryCode == null ? "" : searchCrtieria.CategoryCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@weeks", SqlDbType.Int);
                param.Value = searchCrtieria.Weeks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> categories = new List<Category>();

                while (reader.Read())
                {
                    Category category = PopulateCategory(reader);
                    categories.Add(category);
                }
                reader.Close();
                totalRecords = Convert.ToInt32(outParam.Value);

                return categories;
            }

        }

        /// <summary>
        /// Retrieves categories of the given type.
        /// </summary>
        /// <param name="Type">Type of which categories are to be searched.</param>
        /// <returns>Categories of the given type.</returns>
        public IList<Category> GetAllCategories(int Type)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_categories_by_type";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> categories = new List<Category>();

                while (reader.Read())
                {
                    Category category = PopulateCategory(reader);
                    categories.Add(category);
                }

                return categories;
            }

        }

        /// <summary>
        /// Retrieves the sub categories of the given parent category.
        /// </summary>
        /// <param name="parentId">Id of the parent category.</param>
        /// <returns>Sub categories of the given parent category.</returns>
        public List<Category> GetSubCategories(int parentId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_category_get_sub_categories";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@ParentId", SqlDbType.Int);
                param.Value = parentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<Category> subCategories = new List<Category>();

                while (reader.Read())
                {
                    Category subCategory = PopulateCategory(reader);
                    subCategories.Add(subCategory);
                }

                return subCategories;
            }

        }
        #endregion

        #region Private Methods

        private Category PopulateCategory(SqlDataReader reader)
        {
            Category category = new Category();
            category.CategoryID = Convert.ToInt32(reader["Id"]);
            category.CategoryName = reader["Name"].ToString();
            category.CategoryCode = reader["Code"].ToString();
            category.wastage = (reader["AccesoriesWastage"] == DBNull.Value) ? default(float) : Convert.ToSingle(reader["AccesoriesWastage"]);
            if ((reader["AccesoriesWastage"] == DBNull.Value) || (reader["AccesoriesWastage"].ToString() == "0"))
            {
                category.wastage_ = "";
            }
            else
            {
                category.wastage_ = (reader["AccesoriesWastage"]).ToString();
            }
            // category.Weeks = Convert.ToInt32(reader["Weeks"]);
            category.Type = Convert.ToInt32(reader["Type"]);
            if (reader["ParentId"] != DBNull.Value)
            {
                category.Parent = GetCategoryById(Convert.ToInt32(reader["ParentId"]));
            }
            else
            {
                category.Parent = new Category();
                category.Parent.CategoryID = -1;
            }
            return category;
        }

        #endregion

        #region Delivery Mode Method

        // update method by sushil for getting delivery modes by client for order processing 
        public List<DeliveryMode> GetAllDeliveryModes(int ClientID = 0)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_modes_get_all_modes";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();
                List<DeliveryMode> modes = new List<DeliveryMode>();

                while (reader.Read())
                {
                    DeliveryMode deliveryMode = new DeliveryMode();
                    deliveryMode.Id = Convert.ToInt32(reader["Id"]);

                    //deliveryMode.SupplyType = (reader["SupplyType"] == DBNull.Value) ? (short)1 : Convert.ToInt16(reader["SupplyType"]);
                    //deliveryMode.ModeType = (reader["ModeType"] == DBNull.Value) ? (short)2 : Convert.ToInt16(reader["ModeType"]);
                    //deliveryMode.PackingType = (reader["PackingType"] == DBNull.Value) ? (short)1 : Convert.ToInt16(reader["PackingType"]);
                    //deliveryMode.Terms = (reader["Terms"] == DBNull.Value) ? (short)1 : Convert.ToInt16(reader["Terms"]);

                    deliveryMode.SupplyType = (reader["SupplyType"] == DBNull.Value) ? SupplyType.LANDED : (SupplyType)Convert.ToInt32(reader["SupplyType"]);
                    deliveryMode.ModeType = (reader["ModeType"] == DBNull.Value) ? ModeType.AIR : (ModeType)Convert.ToInt32(reader["ModeType"]);
                    deliveryMode.PackingType = (reader["PackingType"] == DBNull.Value) ? PackingType.HANGING : (PackingType)Convert.ToInt32(reader["PackingType"]);
                    deliveryMode.Terms = (reader["Terms"] == DBNull.Value) ? Terms.FOB : (Terms)Convert.ToInt32(reader["Terms"]);

                    deliveryMode.Code = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                    deliveryMode.SystemExDC = (reader["SystemExDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["SystemExDC"]);
                    deliveryMode.ActualExDC = (reader["ActualExDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["ActualExDC"]);

                    deliveryMode.GreenRangeStart = (reader["GreenRangeStart"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["GreenRangeStart"]);
                    deliveryMode.GreenRangeEnd = (reader["GreenRangeEnd"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["GreenRangeEnd"]);

                    deliveryMode.AmberRangeStart = (reader["AmberRangeStart"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["AmberRangeStart"]);
                    deliveryMode.AmberRangeEnd = (reader["AmberRangeEnd"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["AmberRangeEnd"]);

                    deliveryMode.RedRangeStart = (reader["RedRangeStart"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["RedRangeStart"]);
                    deliveryMode.RedRangeEnd = (reader["RedRangeEnd"] == DBNull.Value) ? (short)0 : Convert.ToInt16(reader["RedRangeEnd"]);

                    deliveryMode.LeadTime = (reader["LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["LeadTime"]);

                    // Added By Yadvendra on 22/10/2019
                    deliveryMode.USSystemEXDC = (reader["US_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["US_SystemEXDC"]);
                    deliveryMode.USLeadTime = (reader["US_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["US_LeadTime"]);

                    deliveryMode.BLSystemEXDC = (reader["BL_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["BL_SystemEXDC"]);
                    deliveryMode.BLLeadTime = (reader["BL_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["BL_LeadTime"]);
                    //

                    // Added By Bharat on 06/12/2019
                    deliveryMode.PLSystemEXDC = (reader["PL_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PL_SystemEXDC"]);
                    deliveryMode.PLLeadTime = (reader["PL_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PL_LeadTime"]);

                    deliveryMode.KRSystemEXDC = (reader["KR_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["KR_SystemEXDC"]);
                    deliveryMode.KRLeadTime = (reader["KR_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["KR_LeadTime"]);

                    deliveryMode.RKSystemEXDC = (reader["RK_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["RK_SystemEXDC"]);
                    deliveryMode.RKLeadTime = (reader["RK_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["RK_LeadTime"]);
                    // Added by Shubhendu 13 dec 21
                    deliveryMode.INSystemEXDC = (reader["IN_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IN_SystemEXDC"]);
                    deliveryMode.INLeadTime = (reader["IN_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IN_LeadTime"]);


                    deliveryMode.NSSystemEXDC = (reader["NS_SystemEXDC"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["NS_SystemEXDC"]);
                    deliveryMode.NSLeadTime = (reader["NS_LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["NS_LeadTime"]);
                    //

                    deliveryMode.ToolTip = (reader["ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ToolTip"]);
                    deliveryMode.IsVisible = (reader["IsVisible"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IsVisible"]);

                    deliveryMode.Color = (reader["Color"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Color"]);
                    deliveryMode.OrderPackingType = (reader["OrderPackingType"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["OrderPackingType"]);
                    deliveryMode.Days = (reader["DeliveryDays"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DeliveryDays"]);
                    deliveryMode.ClientMapping = (reader["Clint_Mapping"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Clint_Mapping"]);
                    if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New"))
                        deliveryMode.IsDeleteing = (reader["IsDeleteing"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["IsDeleteing"]);
                    modes.Add(deliveryMode);
                }

                return modes;
            }
        }

        public void InsertDeliveryModes(DeliveryMode DeliveryMode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_delivery_modes_insert_delivery_modes";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SupplyType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(SupplyType), DeliveryMode.SupplyType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PackingType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(PackingType), DeliveryMode.PackingType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModeType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(ModeType), DeliveryMode.ModeType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Terms", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(Terms), DeliveryMode.Terms.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Code", SqlDbType.VarChar);
                param.Value = DeliveryMode.Code;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GreenRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.GreenRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GreenRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.GreenRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RedRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.RedRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RedRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.RedRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AmberRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.AmberRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AmberRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.AmberRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SystemExDC", SqlDbType.Int);
                param.Value = DeliveryMode.SystemExDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ActualExDC", SqlDbType.Int);
                param.Value = DeliveryMode.ActualExDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ToolTip", SqlDbType.VarChar);
                param.Value = DeliveryMode.ToolTip;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@sVisible", SqlDbType.Bit);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Color", SqlDbType.VarChar);
                param.Value = DeliveryMode.Color;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.LeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                // Added By Yadvendra on 22/10/2019
                param = new SqlParameter("@USSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.USSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@USLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.USLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BLSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.BLSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BLLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.BLLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //
                // Added By Bharat on 06/12/2019
                param = new SqlParameter("@PLSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.PLSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PLLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.PLLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@KRSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.KRSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@KRLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.KRLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RKSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.RKSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@RKLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.RKLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end

                param = new SqlParameter("@OrderPackingType", SqlDbType.Int);
                param.Value = DeliveryMode.OrderPackingType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Days", SqlDbType.VarChar);
                param.Value = DeliveryMode.Days;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Client_Mapping", SqlDbType.VarChar);
                param.Value = DeliveryMode.ClientMapping;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@INSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.INSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@INLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.INLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                // Addesd by shubhendu 13 dec 21
                param = new SqlParameter("@NSSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.NSSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@NSLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.NSLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }

        public void UpdateDeliveryModes(DeliveryMode DeliveryMode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_delivery_modes_update_delivery_modes";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = DeliveryMode.Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplyType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(SupplyType), DeliveryMode.SupplyType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PackingType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(PackingType), DeliveryMode.PackingType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModeType", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(ModeType), DeliveryMode.ModeType.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Terms", SqlDbType.Int);
                param.Value = Convert.ToInt16(Enum.Parse(typeof(Terms), DeliveryMode.Terms.ToString()));
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Code", SqlDbType.VarChar);
                param.Value = DeliveryMode.Code;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RedRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.RedRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RedRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.RedRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GreenRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.GreenRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GreenRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.GreenRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AmberRangeStart", SqlDbType.Int);
                param.Value = DeliveryMode.AmberRangeStart;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AmberRangeEnd", SqlDbType.Int);
                param.Value = DeliveryMode.AmberRangeEnd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SystemExDC", SqlDbType.Int);
                param.Value = DeliveryMode.SystemExDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ActualExDC", SqlDbType.Int);
                param.Value = DeliveryMode.ActualExDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ToolTip", SqlDbType.VarChar);
                param.Value = DeliveryMode.ToolTip;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@sVisible", SqlDbType.Bit);
                param.Value = DeliveryMode.IsVisible;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Color", SqlDbType.VarChar);
                param.Value = DeliveryMode.Color;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.LeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                // Added By Yadvendra on 22/10/2019
                param = new SqlParameter("@USSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.USSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@USLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.USLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BLSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.BLSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@BLLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.BLLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //
                // Added By Bharat on 06/12/2019
                param = new SqlParameter("@PLSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.PLSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PLLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.PLLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@KRSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.KRSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@KRLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.KRLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RKSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.RKSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@RKLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.RKLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end

                param = new SqlParameter("@OrderPackingType", SqlDbType.Int);
                param.Value = DeliveryMode.OrderPackingType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Days", SqlDbType.VarChar);
                param.Value = DeliveryMode.Days;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Client_Mapping", SqlDbType.VarChar);
                param.Value = DeliveryMode.ClientMapping;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@INSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.INSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@INLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.INLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@NSSystemEXDC", SqlDbType.Int);
                param.Value = DeliveryMode.NSSystemEXDC;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@NSLeadTime", SqlDbType.Int);
                param.Value = DeliveryMode.NSLeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }
        public int UpdateDeliveryModesdelete(int id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_delivery_modes_update_delivery_modes_delete";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                int OUT = cmd.ExecuteNonQuery();
                cnx.Close();
                return OUT;

            }
        }
        public int UpdateDeliveryModesAssociation(int id, string ClientAssociation)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                //  SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "USP_UpdateClint_Mapping";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@modeid", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Clint_Mapping", SqlDbType.VarChar);
                param.Value = ClientAssociation;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                int OUT = cmd.ExecuteNonQuery();
                cnx.Close();
                return OUT;

            }
        }
        public void DeleteDeliveryModes(int Id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_delivery_modes_delete_delivery_modes";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }

        // Add By Ravi kumar for Booking modes

        public List<DeliveryMode> GetBookingModes()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_GetModesLeadTime";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<DeliveryMode> modes = new List<DeliveryMode>();

                while (reader.Read())
                {
                    DeliveryMode deliveryMode = new DeliveryMode();
                    deliveryMode.Id = Convert.ToInt32(reader["Id"]);
                    deliveryMode.ModeType = (reader["ModeType"] == DBNull.Value) ? ModeType.AIR : (ModeType)Convert.ToInt32(reader["ModeType"]);
                    deliveryMode.Code = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                    deliveryMode.LeadTime = (reader["LeadTime"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["LeadTime"]);

                    modes.Add(deliveryMode);
                }

                return modes;
            }
        }
        #endregion

        #region Status Modes Related Methods

        public List<StatusModes> GetAllowStatusModesToDesignation()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_all_allow_status_modes_to_designation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<StatusModes> objStatusModes = new List<StatusModes>();

                while (reader.Read())
                {
                    StatusModes statusModes = new StatusModes();

                    statusModes.DesignationID = (reader["DesignationID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DesignationID"]);
                    statusModes.StartSequence = (reader["StartStatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StartStatusModeSequence"]);
                    statusModes.EndSequence = (reader["EndStatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["EndStatusModeSequence"]);
                    objStatusModes.Add(statusModes);
                }
                reader.Close();

                return objStatusModes;
            }

        }

        public List<StatusModes> GetAllStatusModes()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_all_status_modes";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<StatusModes> objStatusModes = new List<StatusModes>();

                while (reader.Read())
                {
                    StatusModes statusModes = new StatusModes();

                    statusModes.StatusModesID = (reader["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Id"]);
                    statusModes.StatusModeSequences = (reader["Sequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Sequence"]);
                    statusModes.StatusModesName = (reader["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Name"]);
                    statusModes.Permission_Sequence = (reader["Permission_Sequence"] == DBNull.Value) ? 0 : Convert.ToDecimal(reader["Permission_Sequence"]);

                    objStatusModes.Add(statusModes);
                }
                reader.Close();

                return objStatusModes;
            }

        }

        public List<StatusModes> Get_StatusModeForIkandiInvoice()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Get_StatusModeForIkandiInvoice";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<StatusModes> objStatusModes = new List<StatusModes>();

                while (reader.Read())
                {
                    StatusModes statusModes = new StatusModes();

                    statusModes.StatusModesID = (reader["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Id"]);
                    statusModes.StatusModeSequences = (reader["Sequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Sequence"]);
                    statusModes.StatusModesName = (reader["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Name"]);
                    statusModes.Permission_Sequence = (reader["Permission_Sequence"] == DBNull.Value) ? 0 : Convert.ToDecimal(reader["Permission_Sequence"]);

                    objStatusModes.Add(statusModes);
                }
                reader.Close();

                return objStatusModes;
            }

        }

        #endregion

        #region Clients AQL Methods

        public System.Data.DataSet GetClientsAQL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_clients_get_all_clients_aql";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsClientsAql = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsClientsAql);

                cnx.Close();

                return dsClientsAql;
            }
        }

        public bool InsertClientsAQL(ClientAQL clientsAQL)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();

                    transaction = cnx.BeginTransaction();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_aql_standard_insert_aql_standard";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@d", SqlDbType.Int);
                    param.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = clientsAQL.UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = clientsAQL.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AQLValue", SqlDbType.Float);
                    param.Value = clientsAQL.AQLValue;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();


                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    transaction.Rollback();
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return false;
        }

        public bool DeleteClientsAQL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();

                    transaction = cnx.BeginTransaction();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_aql_standard_delete_aql_standard";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    cmd.Transaction = transaction;

                    cmd.ExecuteNonQuery();

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    transaction.Rollback();
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return false;
        }

        #endregion

        #region QA Faults Methods

        public System.Data.DataSet GetQAFaults()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_quality_control_get_fault";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        public bool UpdateFaults(String FaultCode, String FaultDescription, int SubcategoryID, int FaultType, int Id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_inspection_guideline_update_inspection_guideline";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultCode", SqlDbType.VarChar);
                param.Value = FaultCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultDescription", SqlDbType.VarChar);
                param.Value = FaultDescription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SubcategoryID", SqlDbType.Int);
                param.Value = SubcategoryID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultType", SqlDbType.Int);
                param.Value = FaultType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return true;
        }


        public int DeleteFault(int Id)
        {
            int isDeleted = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_inspection_guideline_delete_inspection_guideline";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter outparam;

                outparam = new SqlParameter("@sDeleted", SqlDbType.Int);
                outparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outparam);

                cmd.ExecuteNonQuery();

                isDeleted = Convert.ToInt32(outparam.Value);

                cnx.Close();
            }
            return isDeleted;
        }


        public bool InsertFaults(String FaultCode, String FaultDescription, int SubcategoryID, int FaultType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_inspection_guideline_insert_inspection_guideline";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@FaultCode", SqlDbType.VarChar);
                param.Value = FaultCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultDescription", SqlDbType.VarChar);
                param.Value = FaultDescription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SubcategoryID", SqlDbType.Int);
                param.Value = SubcategoryID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultType", SqlDbType.Int);
                param.Value = FaultType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return true;
        }

        #endregion

        #region Client Costing Default


        public void GetAllOrderTypeOfPacking323()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Default_Currency";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<TypeOfPacking> typeOfPacking = new List<TypeOfPacking>();

                while (reader.Read())
                {
                    TypeOfPacking top = new TypeOfPacking();
                    top.Id = Convert.ToInt32(reader["Id"]);
                    // top.Currency.CurrencySymbol = Convert.ToString(reader["CurrencySymbol"]);          //  (reader["CurrencySymbol"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Name"]);
                    top.Name = Convert.ToString(reader["CurrencySymbol"]);

                    typeOfPacking.Add(top);
                }

                List<TypeOfPacking> typeOfPacking22 = new List<TypeOfPacking>();
                typeOfPacking22 = typeOfPacking;

            }
        }
        public DataSet GetClientCostingDefaults(int clintid = 0)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_costing_get_client_costing_defaults";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = clintid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }
        public DataSet GetClientCostingDefaults_New(int clintid = 0)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Get_All_Details_Client_Costing_Default";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = clintid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }
        public bool GetClientCostingDefaults_BreakDown_New(string ClientID, string Code, string DeptId)
        {

            bool Check = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                cnx.Open();

                string cmdText = "Usp_Get_All_Details_Client_Costing_Default_Mode_BreakDown";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.VarChar);
                param.Value = ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Code", SqlDbType.VarChar);
                param.Value = Code;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.VarChar);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);


                Check = Convert.ToBoolean(dt.Rows[0]["Res"]);
                return (Check);
            }
        }

        public DataTable GetClientCosting_By_Client_Dept(int ClientId, int DeptId,int Styleid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_costing_get_client_costing_By_Client_Dept";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Styleid", SqlDbType.Int);
                param.Value = Styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }
        public DataTable GetLandedCosting_By_Client_Dept(int ClientId, int DeptId, int CostingId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Get_Landed_Costing_By_Client_Dept_New";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CostingId", SqlDbType.Int);
                param.Value = CostingId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }
        public DataTable GetDirectCosting_By_Client_Dept(int ClientId, int DeptId, int CostingId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Get_Direct_Costing_By_Client_Dept_New";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CostingId", SqlDbType.Int);
                param.Value = CostingId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }
        public DataTable GetBindModeCost()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetModeCost";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }
        public DataTable GetBindProcessCost()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetProcessCost";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }

        /*--------------Add By Prabhaker-06-dec-17-----------------*/
        public DataSet GetOhPercentValue(int clintid)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Check_OHPercent_Value";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = clintid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        public DataSet GetOhValueNull(int clintid)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_OHPercent_Value";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = clintid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        /*-----------------End-of Code-------------------*/
        public DataTable GetClientCosting_By_Client_Dept_ForExpectedQty(int ClientId, int DeptId, int FromCosting)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_costing_Bind_ExpectedQuantity";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FromCosting", SqlDbType.Int);
                param.Value = FromCosting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();

                return dt;
            }
        }


        public void SaveClientCostingDefault(ClientCostingDefault ccd)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_costing_client_default_save";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = ccd.ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ccd.ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = ccd.DepartmentID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@temId", SqlDbType.Int);
                param.Value = ccd.ItemID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Value", SqlDbType.Float);
                param.Value = ccd.Value;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }

        }

        public void SaveClientCostingDefault_Achievement(string ClientName, string DeptName, int ItemId, double Value)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_costing_client_default_save_Achievement";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientName", SqlDbType.VarChar);
                param.Value = ClientName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptName", SqlDbType.VarChar);
                param.Value = DeptName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@temId", SqlDbType.Int);
                param.Value = ItemId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Value", SqlDbType.Float);
                param.Value = Value;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }

        }

        #endregion

        #region Conversion Rate

        public void SaveConversionRate(int ID, double Rate, double ExportConversionRate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_conversion_rate_update";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ConversionRate", SqlDbType.Float);
                param.Value = Rate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExportConversionRate", SqlDbType.Float);
                param.Value = ExportConversionRate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }

        }

        public List<CurrencyConversion> GetAllConversionRate()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_conversion_rate_get_all";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                List<CurrencyConversion> list = new List<CurrencyConversion>();

                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    CurrencyConversion currencyConversion = new CurrencyConversion();

                    currencyConversion.ID = Convert.ToInt32(reader["ID"]);
                    currencyConversion.From = (reader["FromCurrency"] == DBNull.Value) ? 0 : (Currency)Convert.ToInt16(reader["FromCurrency"]);
                    currencyConversion.To = (reader["ToCurrency"] == DBNull.Value) ? 0 : (Currency)Convert.ToInt16(reader["ToCurrency"]);
                    currencyConversion.ConversionRate = (reader["ConversionRate"] == DBNull.Value) ? 0.0 : Convert.ToDouble(reader["ConversionRate"]);
                    currencyConversion.ExportConversionRate = (reader["ExportConversionRate"] == DBNull.Value) ? 0.0 : Convert.ToDouble(reader["ExportConversionRate"]);

                    list.Add(currencyConversion);
                }

                cnx.Close();

                return list;
            }
        }

        #endregion

        #region User Holiday Entitlement

        public List<UserHolidayEntitlement> GetUserEntitledHolidays()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "user_holiday_entitilement_get_all";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                List<UserHolidayEntitlement> list = new List<UserHolidayEntitlement>();

                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    UserHolidayEntitlement uhe = new UserHolidayEntitlement();

                    uhe.ID = (reader["ID"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ID"]);
                    uhe.Holidays = (reader["Holidays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Holidays"]);
                    uhe.HolidayUsed = (reader["HolidayUsed"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["HolidayUsed"]);
                    uhe.User = new User();
                    uhe.User.UserID = (reader["UserProfileID"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["UserProfileID"]);
                    uhe.User.Company = (reader["CompanyID"] == DBNull.Value) ? (iKandi.Common.Company)(-1) : (iKandi.Common.Company)Convert.ToInt32(reader["CompanyID"]);
                    uhe.User.FirstName = (reader["FirstName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["FirstName"]);
                    uhe.User.LastName = (reader["LastName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LastName"]);

                    list.Add(uhe);
                }

                cnx.Close();

                return list;
            }
        }

        #endregion


        public void SaveUserEntitledHolidays(UserHolidayEntitlement UHE)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_user_holiday_entitilement_save";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = UHE.ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UHE.User.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Holidays", SqlDbType.Int);
                param.Value = UHE.Holidays;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }

        }

        public List<TypeOfPacking> GetAllOrderTypeOfPacking()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_all_order_packing_type";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                reader = cmd.ExecuteReader();
                List<TypeOfPacking> typeOfPacking = new List<TypeOfPacking>();

                while (reader.Read())
                {
                    TypeOfPacking top = new TypeOfPacking();
                    top.Id = Convert.ToInt32(reader["Id"]);
                    top.Name = (reader["Name"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Name"]);

                    typeOfPacking.Add(top);
                }

                return typeOfPacking;
            }
        }

        public DataSet Gettargetdatesforadmin()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_get_admintargetdates";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }
        public DataSet GetCMTBAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_CMT";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsorderDetail);
                cnx.Close();
                return dsorderDetail;

            }

        }
        public bool UpdateCMTDAL(int intSam, int id, int int499, int int999, int int1999, int int2999, int int4999, int int9999, int int14999, int int20000, int intAbove20000)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_Update_CMT";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@Putsam", SqlDbType.Int);
                param.Value = intSam;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@499", SqlDbType.Int);
                param.Value = int499;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@999", SqlDbType.Int);
                param.Value = int999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@1999", SqlDbType.Int);
                param.Value = int1999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@2999", SqlDbType.Int);
                param.Value = int2999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@4999", SqlDbType.Int);
                param.Value = int4999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@9999", SqlDbType.Int);
                param.Value = int9999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@14999", SqlDbType.Int);
                param.Value = int14999;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@20000", SqlDbType.Int);
                param.Value = int20000;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Above20000", SqlDbType.Int);
                param.Value = intAbove20000;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                try
                {
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    cnx.Close();
                }
            }
            return true;
        }




        public void DeleteCMTDAL(int Id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Delete_GarmentType_SAM";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();



                cnx.Close();


            }

        }
        public void InsertUpdateCMTDefaultDAL(int DefaultValue)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_InsertUpdate_SAM";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@DefaultVal", SqlDbType.Int);
                param.Value = DefaultValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();



                cnx.Close();


            }

        }


        public DataSet GetTargetDateQA()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_get_admintargetdatesQA";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        public void Updatetargetdatesforadmin(AdminTargetdate admintrgdate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_update_admintargetdates";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@fromdate", SqlDbType.Int);
                param.Value = admintrgdate.fromdate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@calendermode", SqlDbType.Int);
                param.Value = admintrgdate.calendermode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Days", SqlDbType.Int);
                param.Value = admintrgdate.Days;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = admintrgdate.id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }




        public void SaveTaskDesignationMapping(int iTaskId, int iDesignationId, String iDesignationName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_save_task_designation_mapping";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@TaskId", SqlDbType.Int);
                param.Value = iTaskId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = iDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = iDesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }


        public void DeleteTaskDesignationMapping(int iTaskId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_delete_task_designation_mapping";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@TaskId", SqlDbType.Int);
                param.Value = iTaskId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }


        public void UpdatetargetdatesforAll(int isValidForAll)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_update_admintargetAll";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@sValidForAll", SqlDbType.Int);
                param.Value = isValidForAll;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }


        /// <summary>
        /// Yaten : Get GarmentType and CMT charges  12 Apr
        /// </summary>
        /// <param name="StyleID"></param>
        /// <returns></returns>
        public DataSet GetGarmentTypeDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_GarmentType";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsorderDetail);
                cnx.Close();
                return dsorderDetail;

            }

        }





        /// <summary>
        /// Yaten : Insert/Update CMT Charges 12 Apr 2010
        /// </summary>
        /// <param name="id"></param>
        /// <param name="GrmType"></param>
        /// <param name="Option"></param>
        /// <param name="intUp5"></param>
        /// <param name="intUp15"></param>
        /// <param name="intUp30"></param>
        /// <param name="intup50"></param>
        /// <param name="intUp100"></param>
        /// <param name="intAbv100"></param>
        /// <param name="intDefaultValue"></param>
        /// <returns></returns>

        public bool UpdateGarmentTypeDAL(int sam, int id, string GrmType, string Option, int intUp5, int intUp15, int intUp30, int intup50, int intUp100, int intAbv100, int intDefaultValue)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_Update_GarmentType";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@Putsam", SqlDbType.Int);
                param.Value = sam;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GrmType", SqlDbType.VarChar);
                param.Value = GrmType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Option", SqlDbType.VarChar);
                param.Value = Option;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Up5", SqlDbType.Int);
                param.Value = intUp5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Up15", SqlDbType.Int);
                param.Value = intUp15;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Up30", SqlDbType.Int);
                param.Value = intUp30;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Up50", SqlDbType.Int);
                param.Value = intup50;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Up100", SqlDbType.Int);
                param.Value = intUp100;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpAb100", SqlDbType.Int);
                param.Value = intAbv100;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ntDefaultValue", SqlDbType.Int);
                param.Value = intDefaultValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return true;
        }
        /// <summary>
        /// Yaten : Delete CMT Charges 12 Apr
        /// </summary>
        /// <param name="Id"></param>
        public int DeleteGarmentTypeDAL(int Id)
        {
            int istatus = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Delete_GarmentType";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter param1;
                param1 = new SqlParameter("@status", SqlDbType.Int);
                param1.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param1);
                cmd.ExecuteNonQuery();


                if (param1.Value != DBNull.Value)
                {
                    istatus = Convert.ToInt32(param1.Value);
                }
                else
                {
                    istatus = 1;
                }
                cnx.Close();
                return istatus;

            }

        }





        public DataSet GetAllGroupDAL()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_All_Group";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }

        public DataSet Getprocess()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Select * from Process_admin";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.Text;






                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }




        public DataSet GetAllProcessDAL(string grdType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_All_Process";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = grdType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }

        public DataSet CheckProcessWithGroupDAL(int intGroupId, string grdType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_CheckProcessWithGroup";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@GroupID", SqlDbType.Int);
                param.Value = intGroupId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@process", SqlDbType.VarChar);
                param.Value = grdType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }





        public void InsertProcessDAL(string stringProcessName, int intGroupId, string Status, int? intShrinkage, int? intWashing, int iID, int rowcount)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_insert_Process";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param;

                param = new SqlParameter("@Process", SqlDbType.VarChar);
                param.Value = stringProcessName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GroupId", SqlDbType.Int);
                param.Value = intGroupId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Status", SqlDbType.VarChar);
                param.Value = Status;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Shrinkage", SqlDbType.Int);
                if (intShrinkage.HasValue)
                    param.Value = intShrinkage;
                else
                    param.Value = null;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Washing", SqlDbType.Int);
                if (intWashing.HasValue)
                    param.Value = intWashing;
                else
                    param.Value = null;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@D", SqlDbType.Int);
                param.Value = iID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RowCount", SqlDbType.Int);
                param.Value = rowcount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                cnx.Close();
            }

        }


        public void DeleteCuttingAndProcessDAL(int intRecordId, string type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_DeleteProcessORCutting";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = intRecordId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);




                cmd.ExecuteNonQuery();



                cnx.Close();




            }

        }







        public void RefreshDashBoard()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                //int intReturn=0;
                cnx.Open();
                string cmdText = "sp_ManualRefreshDashBoard";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter Param;

                Param = new SqlParameter("@d", SqlDbType.Int);
                Param.Value = this.LoggedInUser.UserData.UserID;
                Param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(Param);


                cmd.ExecuteNonQuery();

            }
        }


        public int InsertCuttingDAL(int rangeFrom, int rangeTo, int QtyUnit, int cuttingwastage, int IsEdit)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "sp_insert_Cutting";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@RangeFrom", SqlDbType.Int);
                param.Value = rangeFrom;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RangeTo", SqlDbType.Int);
                param.Value = rangeTo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@QtyUnit", SqlDbType.Int);
                param.Value = QtyUnit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CuttingPercent", SqlDbType.Int);
                param.Value = cuttingwastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@sEdit", SqlDbType.Int);
                param.Value = IsEdit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter param1;
                param1 = new SqlParameter("@sAdd", SqlDbType.Int);
                param1.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param1);


                cmd.ExecuteNonQuery();


                if (param1.Value != DBNull.Value)
                {
                    intReturn = Convert.ToInt32(param1.Value);
                }
                else
                {
                    intReturn = -1;
                }


                cnx.Close();

                return intReturn;


            }

        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="intGroupId"></param>
        /// <param name="grdType"></param>
        /// <returns></returns>

        public DataSet GetProcessNumberDAL(string intGroupId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_PONumber";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@PoNumber", SqlDbType.VarChar);
                param.Value = intGroupId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);





                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }



        public int InsertSecurityReceiptDAL(int userId, DateTime ChallanDate, DateTime CurrentDate, params string[] SecurityDetails)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_Insert_Update_SecurityReceipt";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@EntryType", SqlDbType.VarChar);
                param.Value = SecurityDetails[4];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PoId", SqlDbType.VarChar);
                param.Value = SecurityDetails[0];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierId", SqlDbType.VarChar);
                param.Value = SecurityDetails[1];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ChallanNo", SqlDbType.VarChar);
                param.Value = SecurityDetails[2];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ChallanDate", SqlDbType.DateTime);
                param.Value = ChallanDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@temName", SqlDbType.VarChar);
                param.Value = SecurityDetails[3];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Quantity", SqlDbType.VarChar);
                param.Value = SecurityDetails[5];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SecurityOfficerName", SqlDbType.VarChar);
                param.Value = SecurityDetails[6];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@userId", SqlDbType.VarChar);
                param.Value = userId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Description", SqlDbType.VarChar);
                param.Value = SecurityDetails[7];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GNo", SqlDbType.VarChar);
                param.Value = SecurityDetails[8];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam = new SqlParameter("@oStatus", SqlDbType.Int);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                cnx.Close();

                return Convert.ToInt32(oparam.Value);
            }
        }


        public DataSet GetSecurityReceiptDAL(DateTime? min, DateTime? max, string Type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_Security_Detail";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@min", SqlDbType.DateTime);
                if (min.HasValue)
                    param.Value = min;
                else
                    param.Value = null;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@max", SqlDbType.DateTime);
                if (max.HasValue)
                    param.Value = max;
                else
                    param.Value = null;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@EntryType", SqlDbType.VarChar);

                param.Value = Type;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }




        public DataSet GetSupplierDAL(int intSupplierId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_Supplier";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SupplierId", SqlDbType.Int);
                param.Value = intSupplierId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }
        }

        public void InsertSupplierDAL(int intSupplierId, string Person, string mailid, string phone, string Remarks)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_Insert_Supplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SupplierId", SqlDbType.Int);
                param.Value = intSupplierId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("Person", SqlDbType.VarChar);
                param.Value = Person;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("mailid", SqlDbType.VarChar);
                param.Value = mailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("phone", SqlDbType.VarChar);
                param.Value = phone;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("Remarks", SqlDbType.VarChar);
                param.Value = Remarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
        }

        //Currency Admin

        public DataSet GetCurrencyDAL()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_Currency";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }









        public int InsertUpdateCurrencyDAL(int ID, double Conversion, double ExportConversionRate, string type, string symbol, bool IsPriceQuoted)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "sp_insert_Update_Currency";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                //iID INT,iConversion FLOAT,iType VARCHAR(20),iSymbol VARCHAR(10)
                param = new SqlParameter("@Id", SqlDbType.Int);
                param.Value = ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Conversion", SqlDbType.Float);
                param.Value = Conversion;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExportConversionRate", SqlDbType.Float);
                param.Value = ExportConversionRate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Symbol", SqlDbType.VarChar);

                param.Value = symbol;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsPriceQuoted", SqlDbType.Bit);

                param.Value = IsPriceQuoted;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                NumberFormatInfo nf = new NumberFormatInfo();
                //string ss = nf.CurrencySymbol.Contains("€");



                SqlParameter param1;
                param1 = new SqlParameter("@ostatus", SqlDbType.Int);
                param1.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param1);


                cmd.ExecuteNonQuery();


                if (param1.Value != DBNull.Value)
                {
                    intReturn = Convert.ToInt32(param1.Value);
                }
                else
                {
                    intReturn = -1;
                }


                cnx.Close();

                return intReturn;



            }

        }

        /// <summary>
        /// PO Instruction
        /// </summary>
        /// <returns></returns>

        public DataSet GetInstructionGroupMasterDAL()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_Instruction_Group_Master";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }

        public int InsertUpdateInstructionGroupMasterDAL(int? id, int type, int ordertype, int potype, int group, string desc, int userid, int GroupAccId, int row)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                //(OUT oStatus INT,iId INT,iType INT,iOrderType INT ,iPoType INT,iGroup INT,iDesc VARCHAR(2000),iUserId INT)
                string cmdText = "sp_Insert_Update_Instruction_Group_Master";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@d", SqlDbType.Int);
                if (id.HasValue)
                    param.Value = id;
                else
                    param.Value = 0;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderType", SqlDbType.Int);
                param.Value = ordertype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PoType", SqlDbType.Int);
                param.Value = potype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Group", SqlDbType.Int);
                param.Value = group;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Desc", SqlDbType.VarChar);
                param.Value = desc;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = userid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GroupAccId", SqlDbType.Int);
                param.Value = GroupAccId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@row", SqlDbType.Int);
                param.Value = row;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter param1;
                param1 = new SqlParameter("@ostatus", SqlDbType.Int);
                param1.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param1);


                cmd.ExecuteNonQuery();


                if (param1.Value != DBNull.Value)
                {
                    intReturn = Convert.ToInt32(param1.Value);
                }
                else
                {
                    intReturn = -1;
                }


                cnx.Close();

                return intReturn;



            }

        }










        public int CheckDuplicateInstructionGroupMasterDAL(int type, int ordertype, int potype, int group, int? id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                //(OUT oStatus INT,iId INT,iType INT,iOrderType INT ,iPoType INT,iGroup INT,iDesc VARCHAR(2000),iUserId INT)
                string cmdText = "sp_Check_Duplicate_Instruction_Group_Master";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;



                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderType", SqlDbType.Int);
                param.Value = ordertype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PoType", SqlDbType.Int);
                param.Value = potype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Group", SqlDbType.Int);
                param.Value = group;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@d", SqlDbType.Int);
                if (id.HasValue)
                    param.Value = id;
                else
                    param.Value = 0;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);




                SqlParameter param1;
                param1 = new SqlParameter("@ostatus", SqlDbType.Int);
                param1.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param1);


                cmd.ExecuteNonQuery();


                if (param1.Value != DBNull.Value)
                {
                    intReturn = Convert.ToInt32(param1.Value);
                }
                else
                {
                    intReturn = -1;
                }


                cnx.Close();

                return intReturn;
            }
        }

        public DataSet GetClientDAL(string ClientID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "sp_GetClientDAL";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@ClientID", SqlDbType.VarChar);
                param.Value = ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsclient);
                return (dsclient);
            }
        }

        public string GetGateEntryNo(string entryType, string gateNo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "sp_GetGateNo";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@EntryType", SqlDbType.VarChar);
                param.Value = entryType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GNo", SqlDbType.VarChar);
                param.Value = gateNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam;
                oparam = new SqlParameter("@GateNo", SqlDbType.VarChar);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                return Convert.ToString(oparam.Value);
            }
        }

        public int CreateDepartment(string deptName, int compId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "sp_CreateDepartment";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DepartmentName", SqlDbType.VarChar);
                param.Value = deptName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CompanyId", SqlDbType.Int);
                param.Value = compId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam;
                oparam = new SqlParameter("@oStatus", SqlDbType.Int);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                return Convert.ToInt32(oparam.Value);
            }
        }

        public int CreateDesignation(string desigName, int deptId, int linemanager, bool isHod)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "sp_CreateDesignation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = desigName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = deptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineManager", SqlDbType.Int);
                param.Value = linemanager;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@sHod", SqlDbType.Bit);
                param.Value = isHod;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam;
                oparam = new SqlParameter("@oStatus", SqlDbType.Int);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                return Convert.ToInt32(oparam.Value);
            }
        }

        public DataSet GetFebricGroupMasterDAL()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                //cmdText = "sp_Get_Instruction_Group_Master";
                cmdText = "sp_Get_Instruction_Group_Master_With_Process";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }
        public DataSet GetprocessGroup()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "SELECT * FROM process_admin ORDER BY Creation_Date DESC ";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.Text;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsclient);
                return (dsclient);

            }

        }
        //Ashish 
        //Insert Fabric group
        public int InsertProcessNameDAL(string ProcessName, string Descr)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                //int intReturn=0;
                cnx.Open();
                string cmdText = "sp_Insert_ProcessName";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter Param;

                Param = new SqlParameter("@ProcessName", SqlDbType.VarChar);
                Param.Value = ProcessName;
                Param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(Param);

                Param = new SqlParameter("@Description", SqlDbType.VarChar);
                Param.Value = Descr;
                Param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(Param);


                SqlParameter oParam;
                oParam = new SqlParameter("@oStatus", SqlDbType.Int);
                oParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oParam);
                cmd.ExecuteNonQuery();

                return Convert.ToInt32(oParam.Value);

            }
        }


        //public int InsertWastageBAL(WastageAdmin Prm_Wastage)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "sp_insert_Wastage";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@RangeFrom", SqlDbType.Int);
        //        param.Value = Prm_Wastage.IntialQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@RangeTo", SqlDbType.Int);
        //        param.Value = Prm_Wastage.FinalQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@CostingWstgMtr", SqlDbType.Int);
        //        param.Value = Prm_Wastage.CostingWstgMtr;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@OrderWstgMtr", SqlDbType.Int);
        //        param.Value = Prm_Wastage.OrderWstgMtr;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);
        //        //Added By Ashish on 25/12/2014

        //        param = new SqlParameter("@IntialQtyKg", SqlDbType.Int);
        //        param.Value = Prm_Wastage.IntialQtyKg;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FinalQtyKg", SqlDbType.Int);
        //        param.Value = Prm_Wastage.FinalQtyKg;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        //END
        //        param = new SqlParameter("@CostingWstgKg", SqlDbType.Int);
        //        param.Value = Prm_Wastage.CostingWstgKg;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@OrderWstgKg", SqlDbType.Int);
        //        param.Value = Prm_Wastage.OrderWstgKg;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@sEdit", SqlDbType.Int);
        //        param.Value = Prm_Wastage.IsEdit;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        SqlParameter param1;
        //        param1 = new SqlParameter("@sAdd", SqlDbType.Int);
        //        param1.Direction = ParameterDirection.Output;
        //        cmd.Parameters.Add(param1);


        //        cmd.ExecuteNonQuery();


        //        if (param1.Value != DBNull.Value)
        //        {
        //            intReturn = Convert.ToInt32(param1.Value);
        //        }
        //        else
        //        {
        //            intReturn = -1;
        //        }


        //        cnx.Close();

        //        return intReturn;


        //    }

        //}

        public DataTable GetAllWastageBAL()
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAllWastage";
                List<iKandi.Common.Supplier> list = new List<iKandi.Common.Supplier>();
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                return dt;

            }
        }
        // For Cutting
        public DataSet GetFactoryWork(string StaffDept)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_GetFactoryWorkerSpace";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@StaffDept", SqlDbType.VarChar);
                param.Value = StaffDept;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                return ds;

            }
        }
        public DataTable GetCuttingOB(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "USP_GetCuttingOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertUpdateCuttingOB(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateCuttingOB";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateCuttingOBSam(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateCuttingOBSam";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertOperation(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataTable GetCuttingOBSam(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetCuttingOBSam";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataSet GetMachineOB(int OperationId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachine";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }
        // For Finishing
        //added by abhishek on 24/10/2015
        public DataTable GetFinishingOB(int OperationId, int GarmentTypeId, string serachtxt)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "USP_GetFinishingOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Searchtxt", SqlDbType.VarChar);
                    param.Value = serachtxt;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //end by abhishek on 24/10/2015

        public int InsertUpdateFinishingOB(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateFinishingOB";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateFinishingOBSam(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateFinishingOBSam";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertFinishing(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationFinishing";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataTable GetFinishingOBSam(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetFinishingOBSam";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineFinishingOB(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineFinishing";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //For Stiching Font
        //added by abhishek on 24/10/2015
        public DataTable GetStichingOB(int OperationId, int GarmentTypeId, string Table1, string Table2, string Col1, string Col2, string Col3, string Col4, string sreachtxt)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "USP_GetStichingOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TableName1", SqlDbType.VarChar);
                    param.Value = Table1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TableName2", SqlDbType.VarChar);
                    param.Value = Table2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col1", SqlDbType.VarChar);
                    param.Value = Col1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col2", SqlDbType.VarChar);
                    param.Value = Col2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col3", SqlDbType.VarChar);
                    param.Value = Col3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col4", SqlDbType.VarChar);
                    param.Value = Col4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@serachtxt", SqlDbType.VarChar);
                    param.Value = sreachtxt;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //end by abhishek 24/10/2015
        public DataTable GetStichingOBSam(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSam";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOB(int OperationId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStiching";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }
        //END
        public int InsertUpdateStichingOB(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOB";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //abhishek 13/11/2015
        public int InsertUpdateStichingOBSam(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSam";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        //end abhishek 13/10/2015
        public int InsertStiching(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStiching";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //For Stiching Back
        public DataTable GetStichingOBSamBack(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamBack";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingBackOB(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingBack";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertUpdateStichingOBBack(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBBack";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertStichingBack(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingBack";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSamBack(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamBack";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        //For Stiching neck
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOBNeck(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingneck";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamNeck(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamNeck";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingneck(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingneck";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBNeck(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBneck";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSamNeck(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamNeck";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;



            }
        }
        //For Stiching Lining
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOBLining(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingLining";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamLining(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamLining";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingLining(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingLining";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSamLining(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamLining";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBLining(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBLining";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //For Stiching lower
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOBLower(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingLower";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamLower(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamLower";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingLower(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingLower";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertUpdateStichingOBSamLower(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamLower";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBLower(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBLower";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //For Stiching bottom
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOBbottom(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingbottom";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSambottom(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSambottom";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingbottm(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingbottm";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSambottom(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSambottom";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBbottom(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBbottom";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //For Stiching assembly
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingOBassembly(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingassembly";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamassembly(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamassembly";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingassembly(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingassembly";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSamassembly(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamassembly";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);
                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBassembly(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBassembly";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //Added By Ashish on 10/8/2015
        public DataTable GetStichingAddMachine(int OperationId, int GarmentTypeId, string Table1, string Table2, string Col1, string Col2, string Col3, string Col4, string Flag)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "USP_GetStichingAddMachine";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TableName1", SqlDbType.VarChar);
                    param.Value = Table1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TableName2", SqlDbType.VarChar);
                    param.Value = Table2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col1", SqlDbType.VarChar);
                    param.Value = Col1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col2", SqlDbType.VarChar);
                    param.Value = Col2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col3", SqlDbType.VarChar);
                    param.Value = Col3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col4", SqlDbType.VarChar);
                    param.Value = Col4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //For Stiching Collor 
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingcollerOB(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingcoller";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamcoller(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamcoller";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingcoller(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingcoller";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBcoller(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBcoller";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //abhishek 13/11/2015
        public int InsertUpdateStichingOBSamcoller(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamcoller";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }

        // For Stiching Sleep
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingsleepOB(int OperationId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingsleep";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetStichingOBSamsleep(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamsleep";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertStichingsleep(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingsleep";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBsleep(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBsleep";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int InsertUpdateStichingOBSamsleep(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamsleep";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        //For Section 
        public DataTable GetStichedSection()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichedSection";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        //For Stich Rest Grd

        public int InsertUpdateStichingOBSamAll(int OperationId, string GarmentTypeId, string SamVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamALL";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsVa", SqlDbType.Int);
                //param.Value = IsVA;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;



            }
        }
        public int InsertUpdateStichingOBSamAll_VA(int OperationId, string GarmentTypeId, string SamVal, string Flag, int IsVA)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamALL";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsVa", SqlDbType.Int);
                param.Value = IsVA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;



            }
        }
        public int InsertUpdateStichingOBALL(int OperationId, string OperationVal, string Flag, string GridFlag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBALL";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GridFlag", SqlDbType.VarChar);
                param.Value = GridFlag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertOpationStichingAll(string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStichingAll";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //Edited By Ashish on 26/6/2015
        public DataSet GetMachineStichingAll(int OperationId, string Flag)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStichingAll";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetStichingOBSamAll(int OperationId, int GarmentTypeId, string Flag)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBSamAll";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int InsertUpdateManpowerWorker(int WorkerCount, int ProductionId, int WorkforceId, int id, int catergoryattdence, string ot_date, int Workinghours)
        {
            int result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                try
                {
                    string cmdText = "Sp_InsetUpdate_ManpowerAttandence";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@WorkerCount", SqlDbType.Int);
                    param.Value = WorkerCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@WorkforceId", SqlDbType.Int);
                    param.Value = WorkforceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ot_date", SqlDbType.VarChar);
                    param.Value = ot_date;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@id", SqlDbType.Int);
                    param.Value = id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // param = new SqlParameter("@RetVal", SqlDbType.Int);
                    //param.Direction = ParameterDirection.Output;
                    //cmd.Parameters.Add(param);

                    result = cmd.ExecuteNonQuery();
                    //result = (int)cmd.Parameters["@RetVal"].Value;
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }

                cnx.Close();
                return result;
            }
        }

        public DataTable DailyManpowerAttandence(int UnitId, int FactoryWorkSpaceId, int attendnectype, string Date)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_DailyManpowerAttandence";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryWorkSpaceId", SqlDbType.Int);
                    param.Value = FactoryWorkSpaceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@attendnectype", SqlDbType.Int);
                    param.Value = attendnectype;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Date", SqlDbType.DateTime);
                    param.Value = Date;

                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }


        public DataSet GetFactoryUnitType(int FactoryWorkSpace, int AttandenceCategory, string todayDate, int Flag, string Staff)
        {

            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {


                    cnx.Open();

                    string cmdText = "Usp_GetFactoryUnitType";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@FactoryWorkSpace", SqlDbType.Int);
                    param.Value = FactoryWorkSpace;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AttandenceCategory", SqlDbType.Int);
                    param.Value = AttandenceCategory;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                    //param.Value = todayDate;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@AttandenceDate", SqlDbType.DateTime);
                    param.Value = todayDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Staff", SqlDbType.VarChar);
                    param.Value = Staff;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }


        public DataTable Getfactoryworkforce()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "USP_GetWorkerType";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                DataTable dts = new DataTable();
                dts = dt.Tables[0];

                cnx.Close();
                return dts;
            }
        }

        public DataTable GetProductionHouse()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Usp_GetProductionHouse";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                DataTable dts = new DataTable();

                dts = dt.Tables[0];
                cnx.Close();
                return dts;
            }
        }

        public DataTable GetmanpowerValueWithoutid()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetManpowerAttandence";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                DataTable dts = new DataTable();

                dts = dt.Tables[0];
                cnx.Close();
                return dts;
            }
        }

        public int InsertUpdateOTManpower(int WorkerCount, int ProductionId, int WorkforceId, int UserId, int catergoryattdence, string ot_date, int Workinghours)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int result = 0;
                cnx.Open();
                try
                {
                    string cmdText = "Usp_InsertDailyOTAttendance";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@WorkerCount", SqlDbType.Int);
                    param.Value = WorkerCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@WorkforceId", SqlDbType.Int);
                    param.Value = WorkforceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OT_date", SqlDbType.VarChar);
                    param.Value = ot_date;//String.Format("{0:yyyy-MM-dd}", AttandenceDate);
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OTsId", SqlDbType.Int);
                    param.Value = catergoryattdence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Workinghours", SqlDbType.Int);
                    param.Value = Workinghours;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    result = cmd.ExecuteNonQuery();

                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }

                cnx.Close();
                return result;
            }
        }
        public DataSet GetFactorySubHeader(int FactoryWorkId, int Edit, string Staff)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetFactorySubHeader";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@FactoryWorkSpace", SqlDbType.Int);
                    param.Value = FactoryWorkId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = Edit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Staff", SqlDbType.VarChar);
                    param.Value = Staff;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetAttendanceGlobalBudget(int OTs, string OTDate)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetAttendanceGlobalBudget";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@OTs", SqlDbType.Int);
                    param.Value = OTs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@OTDate", SqlDbType.DateTime);
                    //param.Value = OTDate;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param); 

                    param = new SqlParameter("@OTDate", SqlDbType.VarChar);
                    param.Value = OTDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetManPowerCountByUnitId(int WorkforceId, int ProductionUnit, string OTDate, int OTs)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetManPowerCountByUnitId";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@WorkforceId", SqlDbType.Int);
                    param.Value = WorkforceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                    param.Value = ProductionUnit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OTDate", SqlDbType.VarChar);
                    param.Value = OTDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OTs", SqlDbType.Int);
                    param.Value = OTs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetOtGridData(string Fromdate, string todate, int OperatorUnit, int AttandenceType, int Form)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                string cmdText = "";
                if (Form == 1)
                    cmdText = "GetOT_ManPowerNormal";
                else
                    cmdText = "GetOT_Details";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@FromDate", SqlDbType.DateTime);
                param.Value = Fromdate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperatorUnit", SqlDbType.Int);
                param.Value = OperatorUnit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttandenceType", SqlDbType.Int);
                param.Value = AttandenceType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ToDate", SqlDbType.DateTime);
                param.Value = todate;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                DataTable dts = new DataTable();

                dts = dt.Tables[0];



                cnx.Close();
                return dts;
            }
        }

        //Added By abhishek on 29/7/2015
        //---------------------------------------------------------Updated Remarks--------------------------------------------------------------------//


        public DataTable getcountRiskremarks(int orderID)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetfillterrecordOrderLimitation";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }

        public DataTable getreptedremakrsWithStyleid(int orderID)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_ReptedStyleid";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@orderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //updated by abhishek on 18/8/2015
        public int insertOrderLimitationremarks(string FabricComments, string Accessoriescomment, int StyleID, string CreatedOn_1, int CreatedBy_1, string stylecode_1, int UpdatedBy_1, string @UpdatedOn_1, int sequenceNo_1, string FabricApprovedOn, string AccessoriesApprovedOn, int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {




                int intReturn;
                cnx.Open();
                string cmdText = "Usp_insertriskRemakrs";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@FabricComments", SqlDbType.VarChar);
                param.Value = FabricComments;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Accessoriescomment", SqlDbType.VarChar);
                param.Value = Accessoriescomment;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@StyleID", SqlDbType.Int);
                param.Value = StyleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedOn_1", SqlDbType.VarChar);
                param.Value = CreatedOn_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpdatedOn_1", SqlDbType.VarChar);
                param.Value = @UpdatedOn_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy_1", SqlDbType.Int);
                param.Value = CreatedBy_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@stylecode_1", SqlDbType.VarChar);
                param.Value = stylecode_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpdatedBy_1", SqlDbType.Int);
                param.Value = UpdatedBy_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@sequenceNo_1", SqlDbType.Int);
                param.Value = sequenceNo_1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FabricApprovedOn", SqlDbType.VarChar);
                param.Value = FabricApprovedOn;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccessoriesApprovedOn", SqlDbType.VarChar);
                param.Value = AccessoriesApprovedOn;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //updated on 18/7/2015
                param = new SqlParameter("@DrderID", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end on 18/7/2015

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }
        //end on 17/8/2015

        //---------------------------------------------------------END--------------------------------------------------------------------------------//

        //added by abhishe on 10/8/2015 for slot admin



        public DataSet getslotdetails() //for get intial value slot
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_getSlotdetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }


        public DataSet GetLinedesignationDetails() //for get intial value slot
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetLinedesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertUpdateLineDesignation(int DesignationID, int factoryId, int IsAct, int UserId, string Name, int stiching, int finishing, int cutting)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {




                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertLineDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DesinationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@factoryid", SqlDbType.Int);
                param.Value = factoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Isactive", SqlDbType.Int);
                param.Value = IsAct;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.VarChar);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@name", SqlDbType.VarChar);
                param.Value = Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                //updated by abhishek on 20/8/2015
                param = new SqlParameter("@stiching", SqlDbType.Int);
                param.Value = stiching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@finishing", SqlDbType.Int);
                param.Value = finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@cutting", SqlDbType.Int);
                param.Value = cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //END 20/8/2015

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }

        public int updateSlot(int DesignationID, int factoryId, int IsAct, int UserId, string Name, int id, int stiching, int finishing, int cutting)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DesinationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@factoryid", SqlDbType.Int);
                param.Value = factoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Isactive", SqlDbType.Int);
                param.Value = IsAct;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@name", SqlDbType.VarChar);
                param.Value = Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //updated by abhishek on 20/8/2015
                param = new SqlParameter("@stiching", SqlDbType.Int);
                param.Value = stiching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@finishing", SqlDbType.Int);
                param.Value = finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@cutting", SqlDbType.Int);
                param.Value = cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //END 20/8/2015
                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }
        //for get Loss Distribution Details
        public DataTable GetLossDistributionDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetLossDirtributionDettails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int InsertLossLineDesignation(int Deptid, int Isactive, int UserId, int stiching, int finishing, int cutting)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {




                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertLossDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = Deptid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Isactive", SqlDbType.Int);
                param.Value = @Isactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserID", SqlDbType.VarChar);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //added on 20/8/2015
                param = new SqlParameter("@stitching", SqlDbType.Int);
                param.Value = stiching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@finishing", SqlDbType.Int);
                param.Value = finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("cutting", SqlDbType.Int);
                param.Value = @Isactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end 20/8/2015




                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }
        public int UpdateLossDesignation(int Dept_name, int Isactive, int UserId, int id, int stiching, int finishing, int cutting)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {




                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateLossDirtributionDettails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@DepID", SqlDbType.Int);
                param.Value = Dept_name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Isactive", SqlDbType.Int);
                param.Value = @Isactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserID", SqlDbType.VarChar);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.VarChar);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //added on 20/8/2015
                param = new SqlParameter("@stiching", SqlDbType.Int);
                param.Value = stiching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@finishing", SqlDbType.Int);
                param.Value = finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@cutting", SqlDbType.Int);
                param.Value = cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end 20/8/2015




                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }
        public DataTable GetslotadminDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetSlotAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public string insertslotdetails(string SlotName, int TypeOfSlot, string StartHH, string startMM, string EndtimeHH, string EndtimeMM)
        {
            string result = string.Empty;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {





                    cnx.Open();
                    string cmdText = "Usp_InsertSlotAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@SlotName", SqlDbType.VarChar);
                    param.Value = SlotName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfSlot", SqlDbType.Int);
                    param.Value = TypeOfSlot;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Start_HH", SqlDbType.VarChar);
                    param.Value = StartHH;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Start_MM", SqlDbType.VarChar);
                    param.Value = startMM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@End_HH", SqlDbType.VarChar);
                    param.Value = EndtimeHH;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@End_MM", SqlDbType.VarChar);
                    param.Value = EndtimeMM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@RetVal", SqlDbType.VarChar);

                    param.Direction = ParameterDirection.Output;
                    param.Size = 100;
                    cmd.Parameters.Add(param);



                    cmd.ExecuteNonQuery();

                    result = cmd.Parameters["@RetVal"].Value.ToString();




                    cnx.Close();

                }

            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            return result;

        }

        public string Updateslotadmin(string SlotName, int TypeOfSlot, string start_HH, string start_MM, string End_HH, string End_MM, int id)
        {
            string result = string.Empty;
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {


                    cnx.Open();
                    string cmdText = "Usp_Updateslotadmin";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@SlotName", SqlDbType.VarChar);
                    param.Value = SlotName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfSlot", SqlDbType.Int);
                    param.Value = TypeOfSlot;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Start_HH", SqlDbType.VarChar);
                    param.Value = start_HH;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Start_MM", SqlDbType.VarChar);
                    param.Value = start_MM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@End_HH", SqlDbType.VarChar);
                    param.Value = End_HH;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@End_MM", SqlDbType.VarChar);
                    param.Value = End_MM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    param = new SqlParameter("@RetVal", SqlDbType.VarChar);

                    param.Direction = ParameterDirection.Output;
                    param.Size = 100;
                    cmd.Parameters.Add(param);



                    cmd.ExecuteNonQuery();

                    result = cmd.Parameters["@RetVal"].Value.ToString();




                    cnx.Close();


                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            return result;
        }
        public string SlotExistCheck(string SlotName, int id)
        {
            string result = string.Empty;
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {


                    cnx.Open();
                    string cmdText = "Usp_CheckSlotNameExist";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@SlotName", SqlDbType.VarChar);
                    param.Value = SlotName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SlotID", SqlDbType.Int);
                    param.Value = id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@RetVal", SqlDbType.VarChar);

                    param.Direction = ParameterDirection.Output;
                    param.Size = 100;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    result = cmd.Parameters["@RetVal"].Value.ToString();

                    cnx.Close();


                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            return result;
        }
        //for fillter record..
        public DataTable getfillterrecord(string Searchtxt, int IsAct)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_filterLineDesignationAdmin";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@Serachtext", SqlDbType.NVarChar);
                    param.Value = Searchtxt;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsALL", SqlDbType.Int);
                    param.Value = IsAct;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //-------------------------------------------------//END--------------------------------------------------------------------------------------------

        //Added By Ashish on 14/8/2015

        public DataSet GetDesignationName()
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactoryDesignationName";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    //SqlParameter param;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataSet GetFactorynames(int FactoryID, string strId)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorynames";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@FactoryID", SqlDbType.NVarChar);
                    param.Value = FactoryID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@LineId", SqlDbType.NVarChar);
                    //param.Value = LineId;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@strId", SqlDbType.NVarChar);
                    param.Value = strId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataSet GetFactorySpecificDetails(int Id, int LineDesignationID)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineDesignationID", SqlDbType.Int);
                    param.Value = LineDesignationID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataSet GetFactorySpecificDetailsforcluster(int Id, int LineDesignationID = 0)
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_Usp_GetFactorySpecificDetailsCluster";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClusterID", SqlDbType.Int);
                    param.Value = LineDesignationID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetFactoryLineFloor_IsClosedDetails(int UnitId, int LineNo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactoryLineStatusDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetFactoryLineDesignationDetails(int UnitId, int LineNo, int LineDesignationId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactoryLineStatusDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineDesignationID", SqlDbType.Int);
                    param.Value = LineDesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetFactorySpecificLinePlanningDetails(int FactoryId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }


        public DataSet GetStitchingManpowerDetail(int StyleId, int LinePlanFrameId, int CombinedFrameId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 8;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CombinedFrameId", SqlDbType.Int);
                    param.Value = CombinedFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }

        public DataTable GetStartDate(int UnitId, int LineNo, int LinePlanFrameId, int SeqFrameId, bool IsParallel)
        {
            DataTable dt = new DataTable();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetFactorySpecificLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNo", SqlDbType.Int);
                param.Value = LineNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SeqFrameId", SqlDbType.Int);
                param.Value = SeqFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsParallel", SqlDbType.Bit);
                param.Value = IsParallel;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
            }
            return dt;
        }

        public bool CheckIsLineVacent(int UnitId, int LineNo)
        {
            bool IsLineVacent = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_CheckIsLineVacent";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNo", SqlDbType.Int);
                param.Value = LineNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                IsLineVacent = Convert.ToBoolean(cmd.ExecuteScalar());

                cnx.Close();
            }
            return IsLineVacent;
        }

        public DataTable GetDesignationNameDetails(int FactoryId, int DesignationId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetDesignationNameDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                    param.Value = DesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }


        public DataTable GetStyleSam_OB(int StyleId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetSerialNumber(int UnitId, int StyleId, string Status)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Status", SqlDbType.VarChar);
                    param.Value = Status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetContract(int UnitId, int OrderId, string Status, int LineNo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = OrderId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Status", SqlDbType.VarChar);
                    param.Value = Status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDateAndQty(int UnitId, int OrderId, int ContractId, string Status, int LineNo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 5;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = OrderId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ContractId", SqlDbType.Int);
                    param.Value = ContractId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Status", SqlDbType.VarChar);
                    param.Value = Status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetSlot()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 6;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetHalfStitchDetails(int UnitId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 9;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillManageDesignation()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDepartmentDetails(int DepartmentId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public bool CheckDepartmentIsAciveEnable(int DepartmentId)
        {
            bool Result = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 20;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = Convert.ToBoolean(cmd.ExecuteScalar());
                cnx.Close();
            }
            return Result;
        }

        public DataTable FillDivisionDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDesignationDetails(int DepartmentId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDesignationDetails(int DesignationId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 10;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = DesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDesignationTypeDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 5;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public bool CheckIsDesignationAvailable(int DepartmentId, string DesignationName)
        {
            bool IsIsDesignationAvailable = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = DesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                IsIsDesignationAvailable = Convert.ToBoolean(cmd.ExecuteScalar());

                cnx.Close();
            }
            return IsIsDesignationAvailable;
        }

        public bool CheckIsLineDesignationAvailable(int DesignationId, int LineDesignationId)
        {
            bool IsLineDesignationAvailable = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 18;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                IsLineDesignationAvailable = Convert.ToBoolean(cmd.ExecuteScalar());

                cnx.Close();
            }
            return IsLineDesignationAvailable;
        }

        public bool CheckIsRestrictDepartmentAvailable(int DepartmentId, int ApplicationModuleId)
        {
            bool IsLineDesignationAvailable = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 19;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                IsLineDesignationAvailable = Convert.ToBoolean(cmd.ExecuteScalar());

                cnx.Close();
            }
            return IsLineDesignationAvailable;
        }

        public int GetPermissionType(int DepartmentId, int DesignationId, int ApplicationModuleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 8;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable FillDesignationTypeDetails(int DepartmentId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 7;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetApplicationModuleDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 14;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int GetApplicationDEfaultLandingPageId(int DepartmentId, int DesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 16;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable GetMenuShowDepartmentDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 15;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetPermissionType(int DepartmentId, int ApplicationModuleId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 9;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                    param.Value = ApplicationModuleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetPermissionType(int ApplicationModuleId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 11;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                    param.Value = ApplicationModuleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDepartmentActive(int DepartmentId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetManageDesignationDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 17;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int GetMenuShowDepartment(int ApplicationModuleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 12;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public bool GetRestrictDepartment(int ApplicationModuleId, int DepartmentId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                bool bReturn;
                cnx.Open();
                string cmdText = "Usp_GetManageDesignationDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 13;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                bReturn = Convert.ToBoolean(cmd.ExecuteScalar());
                cnx.Close();
                return bReturn;
            }
        }

        public int AddDepartment(string DepartmentName, int DivisionId, bool IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentName", SqlDbType.VarChar);
                param.Value = DepartmentName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ManageDivisionId", SqlDbType.Int);
                param.Value = DivisionId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int AddDesignation(string DesignationName, int DepartmentId, int GlobalType, int LineDesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = DesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GlobalType", SqlDbType.Int);
                param.Value = GlobalType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDesignation(int DesignationId, string DesignationName, int GlobalType, int LineDesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 10;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = DesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GlobalType", SqlDbType.Int);
                param.Value = GlobalType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public string UpdatePermission(int PermissionType, int DepartmentId, int DesignationId, int ApplicationModuleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PermissionType", SqlDbType.Int);
                param.Value = PermissionType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToString(cmd.ExecuteNonQuery());
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDefaultLandingPage(int DepartmentId, int DesignationId, int ApplicationModuleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 9;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDeparmentActive(int DepartmentId, bool IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public string UpdateRestrictDepartment(int ApplicationModuleId, int DepartmentId, bool IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 8;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToString(cmd.ExecuteNonQuery());
                cnx.Close();
                return intReturn;
            }
        }

        public string UpdateApplicationModuleIsActive(int ApplicationModuleId, bool IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToString(cmd.ExecuteNonQuery());
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateMenuShowDepartment(int ApplicationModuleId, int DepartmentId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 7;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleId", SqlDbType.Int);
                param.Value = ApplicationModuleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDesignationOrder(int OrderId, int DepartmentId, int DesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateManageDesignation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                param.Value = DepartmentId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationId", SqlDbType.Int);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        //Gajendra ProductionUnit
        public int UpdateFactoryLineStatus(int UnitId, int FloorNoId, int LineNoId, bool IsClosed, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsClosed", SqlDbType.Int);
                param.Value = IsClosed;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //Gajendra ProductionUnit
        public int UpdateLineFloor(int UnitId, int FloorNoId, int LineNoId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //Gajendra ProductionUnit
        public int UpdateLineIsClosed(int UnitId, int FloorNoId, int LineNoId, bool IsClosed, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsClosed", SqlDbType.Int);
                param.Value = IsClosed;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //Gajendra ProductionUnit
        public int UpdateLineStatusDesignation(int UnitId, int LineNoId, int LineDesignationId, string DesignationName, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = DesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateLineDesignation(int UnitId, int FloorNoId, int LineNoId, int LineDesignationId, int LineNameId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = LineNameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        //public int InsertLinePlanning(int UnitId, int FloorNoId, int LineNoId, int StyleId, int OrderId, int OrderDetailId, DateTime StartDate, int SlotId, int ContractQty, int StichedQty, int StichedPer, int UnitQty, int LineQty, decimal Sam, int LinePlanFrameId, int CombinedFrameId, int UserId, bool IshalfStitch,
        //   int OB, decimal FinishSam, int FinishOB, bool DoubleOB_Stitch, bool DoubleOB_Finish) //, bool IshalfFinish
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "Usp_UpdateLinePlanning";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@inType", SqlDbType.Int);
        //        param.Value = 1;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@UnitID", SqlDbType.Int);
        //        param.Value = UnitId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FloorNo", SqlDbType.Int);
        //        param.Value = FloorNoId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LineNO", SqlDbType.Int);
        //        param.Value = LineNoId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StyleId", SqlDbType.Int);
        //        param.Value = StyleId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@OrderID", SqlDbType.Int);
        //        param.Value = OrderId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
        //        param.Value = OrderDetailId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StartDate", SqlDbType.DateTime);
        //        param.Value = StartDate;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@SlotID", SqlDbType.Int);
        //        param.Value = SlotId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@ContractQty", SqlDbType.Int);
        //        param.Value = ContractQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StichedQty", SqlDbType.Int);
        //        param.Value = StichedQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StichedPer", SqlDbType.Int);
        //        param.Value = StichedPer;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@UnitQty", SqlDbType.Int);
        //        param.Value = UnitQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LineQty", SqlDbType.Int);
        //        param.Value = LineQty;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@Sam", SqlDbType.Decimal);
        //        param.Value = Sam;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
        //        param.Value = LinePlanFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@CombinedFrameId", SqlDbType.Int);
        //        param.Value = CombinedFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@CreatedBy", SqlDbType.Int);
        //        param.Value = UserId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@ModifyBy", SqlDbType.Int);
        //        param.Value = UserId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@IshalfStitch", SqlDbType.Bit);
        //        param.Value = IshalfStitch;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@TotalOB", SqlDbType.Int);
        //        param.Value = OB;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FinishSam", SqlDbType.Decimal);
        //        param.Value = FinishSam;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FinishOB", SqlDbType.Int);
        //        param.Value = FinishOB;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@DoubleOB_Stitch", SqlDbType.Bit);
        //        param.Value = DoubleOB_Stitch;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@DoubleOB_Finish", SqlDbType.Bit);
        //        param.Value = DoubleOB_Finish;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        intReturn = cmd.ExecuteNonQuery();
        //        cnx.Close();
        //        return intReturn;
        //    }
        //}

        public int UpdateHalfStitching(int StyleId, int LinePlanFrameId, string FactoryWorkSpace, string WorkerType, bool IsCheckedStitched, int OperationID, double StitchSAM, double MachineCalc, int FinalOB, int CombinedFrameId, string OperationType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryWorkSpace", SqlDbType.VarChar);
                param.Value = FactoryWorkSpace;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
                param.Value = WorkerType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsCheckedStitched", SqlDbType.Bit);
                param.Value = IsCheckedStitched;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationID", SqlDbType.Int);
                param.Value = OperationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StitchSAM", SqlDbType.Float);
                param.Value = StitchSAM;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@MachineCalc", SqlDbType.Float);
                param.Value = MachineCalc;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FinalOB", SqlDbType.Int);
                param.Value = FinalOB;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CombinedFrameId", SqlDbType.Int);
                param.Value = CombinedFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationType", SqlDbType.VarChar);
                if (OperationType == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = OperationType;
                }

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateHalfStitchingOperation(int LinePlanFrameId, string OperationName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateOperationForHalfStich";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationName", SqlDbType.VarChar);
                param.Value = OperationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }


        //public int UpdateStitchingSam(int StyleId, int LinePlanFrameId)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "Usp_UpdateLinePlanning";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@inType", SqlDbType.Int);
        //        param.Value = 6;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StyleId", SqlDbType.Int);
        //        param.Value = StyleId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
        //        param.Value = LinePlanFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        intReturn = cmd.ExecuteNonQuery();
        //        cnx.Close();
        //        return intReturn;
        //    }
        //}

        public int AddDuplicateHalfStitch(int UnitId, int FloorNoId, int LineNoId, DateTime StartDate, int SlotId, int LinePlanFrameId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SlotID", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        //public int DeleteHalfStitch(int LinePlanFrameId)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "Usp_UpdateLinePlanning";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@inType", SqlDbType.Int);
        //        param.Value = 8;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
        //        param.Value = LinePlanFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        intReturn = cmd.ExecuteNonQuery();
        //        cnx.Close();
        //        return intReturn;
        //    }
        //}

        public int CloseTask(int UnitId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateReplicaEndDate(int FirstLinePlanFrameId, int ReplicaLinePlanFrameId, int FirstUnitID, int ReplicaUnitId, int StyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FirstLinePlanFrameId", SqlDbType.Int);
                param.Value = FirstLinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReplicaLinePlanFrameId", SqlDbType.Int);
                param.Value = ReplicaLinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FirstUnitID", SqlDbType.Int);
                param.Value = FirstUnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReplicaUnitId", SqlDbType.Int);
                param.Value = ReplicaUnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        //public int DeleteLinePlanning_Update(int UnitId, int FloorNoId, int LineNoId, int StyleId, int LinePlanFrameId)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "Usp_UpdateLinePlanning";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@inType", SqlDbType.Int);
        //        param.Value = 2;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@UnitID", SqlDbType.Int);
        //        param.Value = UnitId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FloorNo", SqlDbType.Int);
        //        param.Value = FloorNoId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LineNO", SqlDbType.Int);
        //        param.Value = LineNoId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StyleId", SqlDbType.Int);
        //        param.Value = StyleId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
        //        param.Value = LinePlanFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        intReturn = cmd.ExecuteNonQuery();
        //        cnx.Close();
        //        return intReturn;
        //    }
        //}

        public int CheckLinePlanning(int UnitId, int FloorNoId, int LineNoId, int StyleId, int OrderDetailId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public int CheckLineStatus(int UnitId, int FloorNoId, int LineNoId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public int TotalLineQty(int UnitId, int LineNo, int OrderDetailId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_FillFactorySpecificLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 7;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNo", SqlDbType.Int);
                param.Value = LineNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ContractId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public DateTime CheckStartDate(DateTime StartDate, int SlotId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DateTime dtReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SlotID", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                dtReturn = Convert.ToDateTime(cmd.ExecuteScalar());
                cnx.Close();
                return dtReturn;
            }
        }

        public bool CheckIsAvailableSlot(int UnitId, int FloorNoId, int LineNoId, DateTime StartDate, int SlotId, int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                bool bReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SlotID", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                bReturn = Convert.ToBoolean(cmd.ExecuteScalar());
                cnx.Close();
                return bReturn;
            }
        }

        public bool CheckIsAvailableFrame(int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                bool bReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                bReturn = Convert.ToBoolean(cmd.ExecuteScalar());
                cnx.Close();
                return bReturn;
            }
        }

        public bool CheckIsHalfStitched(int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                bool bReturn;
                cnx.Open();
                string cmdText = "Usp_CheckLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                bReturn = Convert.ToBoolean(cmd.ExecuteScalar());
                cnx.Close();
                return bReturn;
            }
        }

        //Added By Ashish on 19/8/2015
        public int InsertFactoryLine(int Id, int FactoryUnitId, int FloorId, int LineId, string DesignationName, int designationId)
        {
            int intReturn = 0;
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_InsertupdateFactoryLine";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = FactoryUnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FloorNo", SqlDbType.Int);
                    param.Value = FloorId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NoOfLine", SqlDbType.Int);
                    param.Value = LineId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                    param.Value = designationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                    param.Value = DesignationName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return intReturn;

        }

        public int InsertLine(int Id, int FactoryUnitId, int FloorId, int LineNo)
        {
            int intReturn = 0;
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateLineAndFloor";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = FactoryUnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FloorNo", SqlDbType.Int);
                    param.Value = FloorId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return intReturn;

        }



        public DataTable CheckFacrotyUnit(int FactoryUnitId)
        {

            DataTable dt = new DataTable();
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_CheckFactoryUnitbyId";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = FactoryUnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }

        public int FactoryisClosed(int Id, string isClose)
        {
            int intReturn = 0;
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FactoryisClosed";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsClosed", SqlDbType.VarChar);
                    param.Value = isClose;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return intReturn;

        }

        //END

        // Attandance Update By Ravi kumar on 28-8-15

        public int InsertAttandanceOT_Split(int AttandanceOTid, int ProductionUnit, int FactoryWorkSpace, int WorkerCount, string AttandenceDate, int OTType, int OT_Count, double OT_Hours, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "usp_InsertAttandanceOT_Split";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AttandanceOTid", SqlDbType.Int);
                param.Value = AttandanceOTid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                param.Value = ProductionUnit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FactoryWorkSpace", SqlDbType.Int);
                param.Value = FactoryWorkSpace;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WorkerCount", SqlDbType.Int);
                param.Value = WorkerCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                param.Value = AttandenceDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OTType", SqlDbType.Int);
                param.Value = OTType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT_Count", SqlDbType.Int);
                param.Value = OT_Count;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OT_Hours", SqlDbType.Float);
                param.Value = OT_Hours;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }

        public DataTable GetAttandanceOT_Split(int ProductionUnit, int FactoryWorkSpace, string AttandenceDate, int OTType)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "usp_GetAttandanceOT_Split";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                    param.Value = ProductionUnit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryWorkSpace", SqlDbType.Int);
                    param.Value = FactoryWorkSpace;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                    param.Value = AttandenceDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OTType", SqlDbType.Int);
                    param.Value = OTType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public string GetFactoryWorkerSpace(int FactoryWorkSpaceId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "USP_GetFactoryWorkerSpace_ById";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@FactoryWorkSpaceId", SqlDbType.Int);
                param.Value = FactoryWorkSpaceId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam;
                oparam = new SqlParameter("@WorkerType", SqlDbType.VarChar, 100);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                return Convert.ToString(oparam.Value);
            }
        }

        public int DeleteAttandanceOT_Split(int AttandanceOTid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "usp_DeleteAttandanceOT_Split";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AttandanceOTid", SqlDbType.Int);
                param.Value = AttandanceOTid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }
        // Add by Ravi kumar on 9/9/15 For attandance change
        public int DeleteAll_AttandanceOT_Split(int ProductionUnit, int FactoryWorkSpace, string AttandenceDate, int OTType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "usp_DeleteAll_AttandanceOT_Split";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                param.Value = ProductionUnit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryWorkSpace", SqlDbType.Int);
                param.Value = FactoryWorkSpace;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                param.Value = AttandenceDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OTType", SqlDbType.Int);
                param.Value = OTType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }

        }

        public DataTable Get_DailyManpowerAttandence(int ProductionUnit, int WorkforceId, string OTDate, int OTs)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_Get_DailyManpowerAttandence";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = ProductionUnit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryWorkSpaceId", SqlDbType.Int);
                    param.Value = WorkforceId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                    param.Value = OTDate;
                    param.Direction = ParameterDirection.Input;

                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OTType", SqlDbType.Int);
                    param.Value = OTs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int Check_WorkCount_Attandance(int ProductionUnit, int WorkforceId, string OTDate, int OTs, int WorkerCount)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "usp_Check_WorkCount_Attandance";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = ProductionUnit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FactoryWorkSpaceId", SqlDbType.Int);
                param.Value = WorkforceId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttandenceDate", SqlDbType.VarChar);
                param.Value = OTDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OTType", SqlDbType.Int);
                param.Value = OTs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WorkerCount", SqlDbType.Int);
                param.Value = WorkerCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter oparam;
                oparam = new SqlParameter("@WorkCountExist", SqlDbType.Int);
                oparam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(oparam);

                cmd.ExecuteNonQuery();

                return Convert.ToInt32(oparam.Value);
            }
        }
        //END

        // added by abhishek on 3/9/2015-----------------------------------------------------------------//
        //for new neck section


        public int InsertStichingNeck(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStiching_neck";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertUpdateNecksectionOB(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBNeckSection";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetMachineStichingOB_necksection(int OperationId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStiching_necksection";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }
        public DataTable GetStichingOBSamNeck_Nec_Section(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBNeck_new_section";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;


        }
        public int InsertUpdateStichingOBSamNeck_section(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamNeck_section";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetVal", SqlDbType.Int);

                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();
                intReturn = Convert.ToInt32(cmd.Parameters["@RetVal"].Value);
                cnx.Close();
                return intReturn;
            }
        }
        //end neck section
        //neck faching-------------------------------------------------------------------//
        public int InsertStichingNeckfaching(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStiching_neck_Faching";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertUpdateNeckfachingOB(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBNeckSection_faching";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsValueAddition", SqlDbType.Int);
                //param.Value = ValueAddition;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetFactoryWorkSpaceNeck_faching(int OperationId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStiching_necksection_faching";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }
        public DataTable GetStichingOBSamNeck_Nec_faching(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBNeck_new_section_faching";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;


        }
        public int InsertUpdateStichingOBSamNeck_neckfaching(int OperationId, string GarmentTypeId, string SamVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStichingOBSamNeck_section_faching";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                param.Value = GarmentTypeId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SamVal", SqlDbType.Float);
                param.Value = SamVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //end neck faching section---------------------------------------------------------------------------------------

        //for front back  section
        public int InsertStichingNeckfaching_frontback(string OperationVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertOpationStiching_neck_frontback";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertUpdateNeckfachingOB_frontback(int OperationId, string OperationVal, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateStitchingOBNeckSection_FrontBack";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OperationId", SqlDbType.Int);
                param.Value = OperationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationVal", SqlDbType.VarChar);
                param.Value = OperationVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetFactoryWorkSpaceNeck_faching_frontback(int OperationId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetMachineStiching_necksection_frontback";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }
        public DataTable GetStichingOBSamNeck_Nec_faching_frontback(int OperationId, int GarmentTypeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetStichingOBNeck_new_section_frontback";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;


        }
        public int InsertUpdateStichingOBSamNeck_neckfaching_frontback(int OperationId, string GarmentTypeId, string SamVal)
        {
            int intReturn = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateStichingOBSamNeck_section_frontback";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SamVal", SqlDbType.Float);
                    param.Value = SamVal;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string strmsg = ex.Message;
            }
            return intReturn;
        }
        //for back & front section

        //end




        //end by abhishek 3/9/2015------------------------------------------------------------------------//
        //added by abhishek on 1/10/2015-----------------------------------------------------1/10/2015-------------//
        public DataTable GetFactorynames(int UnitID, int id)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetProductionUnitCheck";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@unitID", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@id", SqlDbType.Int);
                    param.Value = id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    //Retrieve the value of the output parameter
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }

        public DataTable GetFactorynamesforfoter(int UnitID)
        {


            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetProductionUnitCheckByUnitID";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@unitID", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);







                    cmd.ExecuteNonQuery();

                    //Retrieve the value of the output parameter
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }

        //added by abhishek on 29/10/2015 this method add for get only produciton Id while User click on Edit

        public int getProdctionID(int ProdouctionUnitId)
        {
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    //string cmdText = "Usp_SetProdcutionID";
                    string cmdText = "update tblProductionIDSet set Prod_id=" + ProdouctionUnitId;
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    cmd.ExecuteNonQuery();

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return 0;

        }
        public DataTable getProdctionID_get()
        {

            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "select * from tblProductionIDSet";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                    cmd.ExecuteNonQuery();

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }
        //End by abhishek 29/10/2015
        //Added by abhishek on 12/2/2015

        public DataTable BindDepartmentDdl()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetAllDepartment";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //end by abhishek on 12/2/2015

        public DataTable FillTargetAdmin(bool IsPredecessorApplied)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsPredecessorApplied", SqlDbType.Bit);
                    param.Value = IsPredecessorApplied;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillEmailDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 15;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillFromStatus(int SrNo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = SrNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetClientDetails(int Filter)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Filter", SqlDbType.Int);
                    param.Value = Filter;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetClientDetails(string ClientIds, int HeaderType, int UserId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientIds", SqlDbType.VarChar);
                    param.Value = ClientIds;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@HeaderType", SqlDbType.VarChar);
                    param.Value = HeaderType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDays_PredecessorDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillPredecessorDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 5;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDesignationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 6;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDirectTaskDesignationDetails(int StatusModeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 21;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillEmailDesignationDetails(int EmailId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 13;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@EmailId", SqlDbType.Int);
                    param.Value = EmailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDesignationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 7;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDirectTasksDesignationDetails(int StatusModeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 20;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetEmailDesignationDetails(int EmailId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 14;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@EmailId", SqlDbType.Int);
                    param.Value = EmailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int GetEmailPermissionDetails(int EmailId, int ClientId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 16;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = Convert.ToInt32(cmd.ExecuteScalar());
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable FillNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 8;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillMOFilterNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 23;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillDelayNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 25;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 9;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetMOFilterNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 22;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDelayNotificationDetails(int StatusModeId, int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 24;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetDescriptionDetails(int StatusModeId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 10;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                    param.Value = StatusModeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetCopyFromDataDetails(int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 11;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetCopyFromEmailDataDetails(int ClientId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 17;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetFilteredClientDetails(int Filter, int UserId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 12;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Filter", SqlDbType.Int);
                    param.Value = Filter;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable FillEmailPlanDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 18;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetEmailPlanDetails()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 19;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int UpdateFromStatus(int StatusId, int FromStatusId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FromStatus", SqlDbType.Int);
                param.Value = FromStatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateIsRelevantToNewsLetter(int StatusId, bool IsRelevantToNewsLetter)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsRelevanttoNewsLetter", SqlDbType.Bit);
                param.Value = IsRelevantToNewsLetter;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateIsRelevantToDelays(int StatusId, bool IsRelevantToDelays)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsRelevanttoDelays", SqlDbType.Bit);
                param.Value = IsRelevantToDelays;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateStatusOrder(int StatusId, int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDays(int StatusId, int ClientId, int Days, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Days", SqlDbType.Int);
                param.Value = Days;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsDaysUpdate", SqlDbType.Bit);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdatePredecessor(int StatusId, int ClientId, string Predecessor, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Predecessor", SqlDbType.VarChar);
                param.Value = Predecessor;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDesignation(int StatusId, int ClientId, string DesignationId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDirectTaskDesignation(int StatusId, string DesignationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 16;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateEmailDesignation(int EmailId, int ClientId, string DesignationId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 10;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateNotification(int StatusId, int ClientId, string DesignationId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 7;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateMOFilterNotification(int StatusId, int ClientId, string DesignationId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 17;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateDelayNotification(int StatusId, int ClientId, string DesignationId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 20;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationIds", SqlDbType.VarChar);
                param.Value = DesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int AddApplicationModule()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_AddApplicationModule";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateCopyFrom(int ClientId, int SelectedClientId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 8;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SelectedClientId", SqlDbType.Int);
                param.Value = SelectedClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateCopyFromEmail(int ClientId, int SelectedClientId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 12;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SelectedClientId", SqlDbType.Int);
                param.Value = SelectedClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateTargetAdminDescription(int StatusId, string Description)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 9;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StatusModeId", SqlDbType.Int);
                param.Value = StatusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Description", SqlDbType.VarChar);
                param.Value = Description;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateEmailPermission(int EmailId, int ClientId, int PermissionType, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 11;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientId", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PermissionType", SqlDbType.Int);
                param.Value = PermissionType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateEmailPlan(int EmailId, int EmailPlanId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 13;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlanId", SqlDbType.Int);
                param.Value = EmailPlanId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //added by abhishek 18/4/2016
        public string UpdateEmailPerority(int EmailId, int EmailPlanId)
        {
            string RetVal = string.Empty;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    int intReturn;
                    cnx.Open();
                    string cmdText = "Usp_UpdateTargetAdminDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 18;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@EmailId", SqlDbType.Int);
                    param.Value = EmailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PlanId", SqlDbType.Int);
                    param.Value = EmailPlanId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Output", SqlDbType.VarChar, 100);
                    param.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    RetVal = cmd.Parameters["@Output"].Value.ToString();
                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return RetVal;

        }
        public DataTable GetEmailGroupPerioty(int emailid)
        {

            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "SELECT Priority,IsGrouped FROM dbo.tblEmail WHERE EmailId=" + emailid;
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                    cmd.ExecuteNonQuery();

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }
        public int UpdateEmailIsGroup(int EmailId, int EmailPlanId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 19;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlanId", SqlDbType.Int);
                param.Value = EmailPlanId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //end by abhishek 

        public int UpdateEmailTime(int EmailId, string Hours, string Min, string Meridian)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 14;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Hours", SqlDbType.VarChar);
                param.Value = Hours;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Min", SqlDbType.VarChar);
                param.Value = Min;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Meridian", SqlDbType.VarChar);
                param.Value = Meridian;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateEmailDays(int EmailId, string Days)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateTargetAdminDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 15;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EmailId", SqlDbType.Int);
                param.Value = EmailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DaysName", SqlDbType.VarChar);
                param.Value = Days;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        // Add By Ravi kumar on 18/1/2016 for new status modes

        public List<StatusModes> GetAllStatusModesByUserId(int UserId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "GetAllStatus_ByUserId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@DataType", SqlDbType.Int);
                //param.Value = DataType;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@Year", SqlDbType.VarChar);
                //param.Value = Year;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@BuyingHouseID", SqlDbType.Int);
                //param.Value = BuyingHouseID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@ClientID", SqlDbType.Int);
                //param.Value = ClientID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                //param.Value = DepartmentID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<StatusModes> objStatusModes = new List<StatusModes>();

                while (reader.Read())
                {
                    StatusModes statusModes = new StatusModes();

                    statusModes.StatusModesID = (reader["status_modeid"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["status_modeid"]);
                    statusModes.StatusModesName = (reader["status_modename"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["status_modename"]);
                    statusModes.StatusMode_ForIntial = (reader["StatusModeSequences"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["StatusModeSequences"]);


                    objStatusModes.Add(statusModes);
                }
                reader.Close();

                return objStatusModes;
            }

        }
        public List<StatusModes> GetAllStatusModesByUserId_ForSequence(int UserId)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "GetAllStatus_ByUserId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@DataType", SqlDbType.Int);
                //param.Value = DataType;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@Year", SqlDbType.VarChar);
                //param.Value = Year;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@BuyingHouseID", SqlDbType.Int);
                //param.Value = BuyingHouseID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@ClientID", SqlDbType.Int);
                //param.Value = ClientID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                //param.Value = DepartmentID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<StatusModes> objStatusModes = new List<StatusModes>();

                while (reader.Read())
                {
                    StatusModes statusModes = new StatusModes();

                    statusModes.StatusModesID = (reader["status_modeid"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["status_modeid"]);
                    statusModes.StatusModesName = (reader["status_modename"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["status_modename"]);
                    statusModes.StatusMode_Double_Sequences = (reader["StatusModeSequences"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["StatusModeSequences"]);


                    objStatusModes.Add(statusModes);
                }
                reader.Close();

                return objStatusModes;
            }

        }

        //Added by abhishek on 20/1/2016
        //public List<StatusModes> GetAllStatusModesByUserId_New(int UserId, int DataType, string Year, int BuyingHouseID, int ClientID, int DepartmentID)
        //{

        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        SqlDataReader reader;
        //        SqlCommand cmd;
        //        string cmdText;

        //        cmdText = "GetAllStatus_ManageOrder";
        //        cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

        //        SqlParameter param;

        //        param = new SqlParameter("@UserId", SqlDbType.Int);
        //        param.Value = UserId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@DataType", SqlDbType.Int);
        //        param.Value = DataType;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@Year", SqlDbType.VarChar);
        //        param.Value = Year;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@BuyingHouseID", SqlDbType.Int);
        //        param.Value = BuyingHouseID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@ClientID", SqlDbType.Int);
        //        param.Value = ClientID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@DepartmentID", SqlDbType.Int);
        //        param.Value = DepartmentID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);



        //        reader = cmd.ExecuteReader();
        //        List<StatusModes> objStatusModes = new List<StatusModes>();

        //        while (reader.Read())
        //        {
        //            StatusModes statusModes = new StatusModes();

        //            statusModes.StatusModesNewID = (reader["status_modeid"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["status_modeid"]);
        //            statusModes.StatusModesNewName = (reader["status_modename"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["status_modename"]);
        //            statusModes.StatusModeSequencesNew = (reader["StatusModeSequences"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequences"]);

        //            objStatusModes.Add(statusModes);
        //        }
        //        reader.Close();

        //        return objStatusModes;
        //    }

        //}
        //end by abhishek on 20/1/2016   
        public DataTable getdepartment()
        {

            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "select DepartmentID from tblDepartmentLoss_Distri";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                    cmd.ExecuteNonQuery();

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;

        }
        //Added By abhishek on 16/6/2016
        public List<productionCalender> GetProductionCalenderDetails(int month, int year)
        {
            List<productionCalender> ProductionPlaningCalenderCollection = new List<productionCalender>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                try
                {
                    string cmdText = "Usp_GetProductioCalender_Details";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Month", SqlDbType.Int);
                    param.Value = month;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Year", SqlDbType.Int);
                    param.Value = year;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsorderDetail);
                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                productionCalender ObjCalender = new productionCalender();
                                ObjCalender.CalenderID = (dr["ID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ID"]);
                                ObjCalender.Sunday = (dr["Sunday"] == DBNull.Value) ? "" : (dr["Sunday"]).ToString();
                                ObjCalender.Monday = (dr["Monday"] == DBNull.Value) ? "" : (dr["Monday"]).ToString();
                                ObjCalender.Tuesday = (dr["Tuesday"] == DBNull.Value) ? "" : (dr["Tuesday"]).ToString();
                                ObjCalender.Wednesday = (dr["Wednesday"] == DBNull.Value) ? "" : (dr["Wednesday"]).ToString();
                                ObjCalender.Thursday = (dr["Thursday"] == DBNull.Value) ? "" : (dr["Thursday"]).ToString();
                                ObjCalender.Friday = (dr["Friday"] == DBNull.Value) ? "" : (dr["Friday"]).ToString();
                                ObjCalender.Seterday = (dr["Saturday"] == DBNull.Value) ? "" : (dr["Saturday"]).ToString();
                                ObjCalender.MonthNo = (dr["Month_No"] == DBNull.Value) ? "" : (dr["Month_No"]).ToString();
                                ObjCalender.Year = (dr["Years"] == DBNull.Value) ? "" : (dr["Years"]).ToString();
                                ObjCalender.EventDiscription = (dr["EventsDescription"] == DBNull.Value) ? "" : (dr["EventsDescription"]).ToString();
                                ObjCalender.IsEvent = (dr["IsEvents"] == DBNull.Value) ? false : Convert.ToBoolean(dr["IsEvents"]);
                                ObjCalender.WorkingHousr = (dr["EventsDescription"] == DBNull.Value) ? "" : (dr["woringHours"]).ToString();
                                ProductionPlaningCalenderCollection.Add(ObjCalender);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return ProductionPlaningCalenderCollection;
            }
        }
        public int UpdateInsertProdPlan_Calender(int CalenderID, int MonthNo, int year, int DayNo, bool Isvent, string workinghours, string eventdiscriptiontext)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateProductionPlan_Calender";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@calenID", SqlDbType.Int);
                param.Value = CalenderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@dayNo", SqlDbType.Int);
                param.Value = DayNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Month_no", SqlDbType.Int);
                param.Value = MonthNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@years", SqlDbType.Int);
                param.Value = year;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsEvent", SqlDbType.Bit);
                param.Value = Isvent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EventDicription", SqlDbType.VarChar);
                param.Value = eventdiscriptiontext;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WorkingHour", SqlDbType.VarChar);
                param.Value = workinghours;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateWorkingHrs(int Month, int Year, double workingHrs)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateCalanderWorkingHrs";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Month", SqlDbType.Int);
                param.Value = Month;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Year", SqlDbType.Int);
                param.Value = Year;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@workingHrs", SqlDbType.Float);
                param.Value = workingHrs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataTable GetHolidayDetails(int calenderID, double DyaNo, int MonthNo, int Year)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//TODO Convert to proc
            {
                cnx.Open();

                string cmdText = "select IsEvents,EventsDescription,woringHours from TblProduction_Calender_event where CalenID=" + calenderID + "and DAYNo=" + DyaNo + " and Month_No=" + MonthNo + " and Years=" + Year;

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataTable GetworkingHrs(int Month, int Year)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//TODO Convert to proc
            {
                cnx.Open();

                string cmdText = "select WorkingHrs from tblProductionPlanningWorkingHrs where [Month]=" + Month + "and [Year]=" + Year;

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        //abhishek 29/9/2016
        public DataSet GetShipmetReport(string flag)
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";
                if (flag == "DAILYSHIPMENT")
                {
                    cmdText = "Sp_GetShipedOrderDetailsBy_Date";
                }
                else if (flag == "ICREPORT")
                {
                    cmdText = "Sp_GetShipedOrderDetailsBy_ICBIPL";
                }
                else if (flag == "SHIPMENTPLANING")
                {
                    cmdText = "Sp_GetShipmentPlaning_Report";
                }
                else if (flag == "SHIPMENTREPORTCUMLATIV")
                {
                    cmdText = "Usp_ShipmetReportCumlative";
                }
                else if (flag == "HOPPM")
                {
                    cmdText = "Sp_GetShipedOrderDetailsBy_Hoppm";
                }
                else if (flag == "QAPENDING")
                {
                    cmdText = "Sp_GetShipedOrderDetailsBy_DoneByQa";
                }

                //edit by prabhaker 15 feb 2017 //
                else if (flag == "QA_Faults_Inception_Ctsl_Dhu")
                {
                    cmdText = "Usp_QA_Faults_Inception_Ctsl_Dhu";
                }
                else if (flag == "Get_StyleCount_Break_Down_In_ShipmentReport")
                {
                    cmdText = "USP_Get_StyleCount_Break_Down_In_ShipmentReport";
                }
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        //abhishek 3/3/2017
        public DataSet GetTopQaFualtReport(int UnitID, int Duration, string type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";
                cmdText = "Usp_GetQAReortfualtDetails";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Duration", SqlDbType.Int);
                param.Value = Duration;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataSet GetTopQaFualtReport__top3FualtSummary(int UnitID, int Duration, string type, int OrderID, int LineNo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";
                cmdText = "Usp_GetQAReortfualtDetails_top3FualtSummary";


                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Duration", SqlDbType.Int);
                param.Value = Duration;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@LineNo", SqlDbType.Int);
                param.Value = LineNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataSet GetInceptionDetailsSorting(int OrderDetailsID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_shipmentByDate_sorting";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                param.Value = OrderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataSet GetShipmentReportByValue(int maxDay, int minDay, int UnitID)
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    //string cmdText = "Usp_getShipmentValueByRange";
                    string cmdText = "Usp_getShipmentValueByRange_Test3";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@maxd", SqlDbType.Int);
                    param.Value = maxDay;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@mind", SqlDbType.Int);
                    param.Value = minDay;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);



                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            return ds;
        }
        public DataSet GetShipmentReport_MonthTotal()
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    //string cmdText = "Usp_getShipmentValueByRange";
                    string cmdText = "USP_Month_Total_ShipmentReports";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);



                    cnx.Close();

                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            return ds;
        }
        public DataSet GetPreiousMonthRevenue(int UnitID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_GetPrevious_Month_RevenueValue";
                //string cmdText ="Usp_getShipmentValueByRange_test_abhishek";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }

        }
        public DataSet GetWipDetails(int UnitID, String flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                // string cmdText = "Usp_GetWipAvg";
                string cmdText = "Usp_GetWipAvg";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds;
            }

        }
        public DataSet GetFualtName(int OrderDetailsID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_getFualtNameBy_orderDetailID";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataTable GetOperationName(int LinePlanFrameId, int CombinedFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//TODO Convert to proc
            {
                cnx.Open();

                string cmdText = "select OperationName, IsFinishing from tblLinePlanningStyle where LinePlanFrameId=" + LinePlanFrameId + "and CombinedFrameId=" + CombinedFrameId;

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        public DataSet GetWastageVAdetails()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Sp_getVAWastageDetails";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }

        //Add By Prabhaker On 28-sep-18
        public DataSet GetStyleCodeInterval()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Usp_Style_Code_Interval";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        //added by bharat on 25-july
        public DataSet GetOrderQuantity()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Get_CMT_Order_Qty";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }
        //end

        public int Insert_Delete_StyleCodeInterval(int id, string fromQty, string toQty, int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                int intReturn;
                cnx.Open();

                string cmdText = "Usp_Insert_Delete_Style_Code_Interval";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ID", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fromQty", SqlDbType.VarChar);
                param.Value = fromQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@toQty", SqlDbType.VarChar);
                param.Value = toQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@flag", SqlDbType.Int);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();


                cnx.Close();
                return intReturn;
            }

        }
        //End Of COde
        //added by abhishek on 25/7/2016
        public int InsertVaWatageDetails(int FromRange, int ToRange, decimal CuttingWastage, decimal OrderingWastage, decimal CutCMT, decimal StitchCMT, decimal FinishCMT, decimal CMTOH, decimal Overhead, int leadday,string Flag, out int area)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Sp_InsertUpdateVaWastage";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@FromRange", SqlDbType.Int);
                param.Value = FromRange;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ToRange", SqlDbType.Int);
                param.Value = ToRange;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CuttingWastage", SqlDbType.Float);
                param.Value = @CuttingWastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //add code by bharat on 13-june
                param = new SqlParameter("@OrderingWastage", SqlDbType.Float);
                param.Value = OrderingWastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //end
                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CutCMT", SqlDbType.Float);
                param.Value = CutCMT;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StitchCMT", SqlDbType.Float);
                param.Value = StitchCMT;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FinishCMT", SqlDbType.Float);
                param.Value = FinishCMT;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CMTOH", SqlDbType.Float);
                param.Value = CMTOH;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Overhead", SqlDbType.Float);
                param.Value = Overhead;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@leadday", SqlDbType.Int);
                param.Value = leadday;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@wastageId", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@Acc_Wastage", SqlDbType.Float);
                //param.Value = AccWastage;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@Fabric_Wastage", SqlDbType.Float);
                //param.Value = FabricWastage;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                if (intReturn == -1)
                {
                    area = 0;
                }
                else
                {
                    area = (int)cmd.Parameters["@wastageId"].Value;
                }

                cnx.Close();
                return intReturn;
            }
        }
        public int InsertVaWatageDetails_VA(int wastageID, int ValueAdditionID, float ValueAdditionWastage, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Sp_InsertUpdateVaWastage_Va";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@wastageID", SqlDbType.Int);
                param.Value = wastageID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VAid", SqlDbType.Int);
                param.Value = ValueAdditionID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ValueAdditionWastage", SqlDbType.Float);
                param.Value = ValueAdditionWastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();


                cnx.Close();
                return intReturn;
            }
        }
        public DataSet getVAWastageDetails_byID(int VAID, int WastageID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                string cmdText = "Sp_getVAWastageDetails_byID";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@VaID", SqlDbType.Int);
                param.Value = VAID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WastageID", SqlDbType.Int);
                param.Value = WastageID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public int DeleteVAWastage(int wastageID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_DeleteVaWastage";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@wastageID", SqlDbType.Int);
                param.Value = wastageID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                intReturn = cmd.ExecuteNonQuery();


                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateWastageValue(int VaID, int WastageID, float Values, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateVaWastage";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@VaID", SqlDbType.Int);
                param.Value = VaID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WastageID", SqlDbType.Int);
                param.Value = WastageID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Values", SqlDbType.Float);
                param.Value = Values;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();


                cnx.Close();
                return intReturn;
            }
        }


        //end by abhishek 25/7/2016

        //added by abhishek 1/8/2016

        public DataSet GetSuppliarDetails(int MasterSupliarID = 0)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSuppliarDeatis";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SuppliarMasterId", SqlDbType.Int);
                param.Value = MasterSupliarID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        public DataSet GetSuppliarDetails_NEW_ForDebitNote(int MasterSupliarID = 0)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSuppliarDeatis_NEW_ForDebitNote";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SuppliarMasterId", SqlDbType.Int);
                param.Value = MasterSupliarID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }
        //--------------Updated by Prabhaker on 24/8/2018 for Is Active Parameter Add--------------//
        public int InsertSupplierDetails(string BasicType, string SupplierName, string SupplierIntial, string Address, string GstNo, string SupplyType, int PaymentTerms, string Process, int USerID, string Fabric_Grade, string UploadSignature, int SupplieMasterID, out int MasterID,int DeliveryType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InserUpdateSupplierDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@BasicType", SqlDbType.VarChar);
                param.Value = BasicType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                param.Value = SupplierName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SupplierIntial", SqlDbType.VarChar);
                param.Value = SupplierIntial;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Address", SqlDbType.VarChar);
                param.Value = Address;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //added by raghvinder start 
                param = new SqlParameter("@GstNo", SqlDbType.VarChar);
                param.Value = GstNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                //added by raghvinder end

                param = new SqlParameter("@SupplyType", SqlDbType.VarChar);
                param.Value = SupplyType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PaymentTerms", SqlDbType.Int);
                param.Value = PaymentTerms;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Process", SqlDbType.VarChar);
                param.Value = Process;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Fabric_Grade", SqlDbType.VarChar);
                param.Value = Fabric_Grade;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UploadSignature", SqlDbType.VarChar);
                param.Value = UploadSignature;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SuppliarMasterId", SqlDbType.Int);
                param.Value = SupplieMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@USerID", SqlDbType.Int);
                param.Value = this.LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RetValMasterID", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "UPDATE";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeliveryType", SqlDbType.Int);
                param.Value = DeliveryType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();

                MasterID = (int)cmd.Parameters["@RetValMasterID"].Value;


                cnx.Close();
                return MasterID;
            }
        }


        public int InsertSupplierConactDetailsDetails(int SupplieMasterID, string ContactPerson, string email, string ContactNo, string Contact_Remarks, int flag, string Types, int IsLogginUser)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();

                DataSet dsorderDetail = new DataSet();

                string cmdText = "Usp_InsertSupllierContactDeatis";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SupplieMasterID", SqlDbType.Int);
                param.Value = SupplieMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ContactPerson", SqlDbType.VarChar);
                param.Value = ContactPerson;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Email", SqlDbType.VarChar);
                param.Value = email;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Contact_no", SqlDbType.VarChar);
                param.Value = ContactNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Contact_Remarks", SqlDbType.VarChar);
                param.Value = Contact_Remarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Types", SqlDbType.VarChar);
                param.Value = Types;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter outParam;
                outParam = new SqlParameter("@output", SqlDbType.Int);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);


                param = new SqlParameter("@IsLogginUser", SqlDbType.Int);
                param.Value = IsLogginUser;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                // intReturn = cmd.ExecuteNonQuery();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsorderDetail);


                // Result = cmd.ExecuteNonQuery();
                cnx.Close();
                intReturn = Convert.ToInt32(outParam.Value);


                //cnx.Close();
                return intReturn;
            }
        }
        public int InsertSupplierConactDetailsDetailsVA(int SupplieMasterID, int VA_id, int IsCheck)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InserUpdateSupplierDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "VAUPDATE";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SuppliarMasterId", SqlDbType.Int);
                param.Value = SupplieMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VAadditonID", SqlDbType.Int);
                param.Value = VA_id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsCheck", SqlDbType.Int);
                param.Value = IsCheck;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();

                cnx.Close();
                return intReturn;
            }
        }
        public int deleteSupplierDetails(int SupplieMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "DeleteSuppliarDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SupplieMasterID", SqlDbType.Int);
                param.Value = SupplieMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();


                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetProccesNameWithSuppleType(string proceesID, string supplieType)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetProcessNAme";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@proID", SqlDbType.VarChar);
                param.Value = proceesID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@suppleiTypeID", SqlDbType.VarChar);
                param.Value = supplieType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }
        //end by abhishek on 1/8/2016

        // Added By Ravi kumar on 16/8/16 for Attandance Date
        public string GetAttandanceDate()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string Return;
                cnx.Open();
                string cmdText = "usp_GetAttandanceDate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                Return = Convert.ToString(cmd.ExecuteScalar());
                cnx.Close();
                return Return;
            }
        }

        //public int UpdateHalfFinishing(int StyleId, int LinePlanFrameId, string FactoryWorkSpace, string WorkerType, bool IsCheckedFinished, int OperationID)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        int intReturn;
        //        cnx.Open();
        //        string cmdText = "Usp_UpdateLinePlanning";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@inType", SqlDbType.Int);
        //        param.Value = 9;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@StyleId", SqlDbType.Int);
        //        param.Value = StyleId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
        //        param.Value = LinePlanFrameId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@FactoryWorkSpace", SqlDbType.VarChar);
        //        param.Value = FactoryWorkSpace;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@WorkerType", SqlDbType.VarChar);
        //        param.Value = WorkerType;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@IsCheckedFinished", SqlDbType.Bit);
        //        param.Value = IsCheckedFinished;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@OperationID", SqlDbType.Int);
        //        param.Value = OperationID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        intReturn = cmd.ExecuteNonQuery();
        //        cnx.Close();
        //        return intReturn;
        //    }
        //}

        //added abhishek on 8/9/2016
        public int InsertUpdateShop(string ShopName, string filename, int id, string flag, int userID, int Type)
        {
            int output = 0;

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                string cmdText = "Usp_InsertUpdateShopDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ShopName", SqlDbType.VarChar);
                param.Value = ShopName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@filename", SqlDbType.VarChar);
                param.Value = filename;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ID", SqlDbType.Int);
                if (id == 0)
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = id;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@userID", SqlDbType.Int);
                param.Value = userID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TypeID", SqlDbType.Int);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter paramout;

                paramout = new SqlParameter("@outPut", SqlDbType.Int);
                paramout.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramout);

                cmd.ExecuteNonQuery();
                output = Convert.ToInt32(paramout.Value);


                cnx.Close();
                return output;
            }
        }
        public DataSet GetShopDetails()
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetShopDetails";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);

                cnx.Close();

                return dsFaults;
            }
        }

        public int UpdateLineManPower(int UnitId, int manPower, int LineNoId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 8;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Manpower", SqlDbType.Int);
                param.Value = manPower;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetQaPedingDoneByDate(int orderdetailsID, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//For get
            {
                cnx.Open();

                string cmdText = "Sp_GetShipedOrderDetailsBy_lastdayQA";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                param.Value = orderdetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }

        }

        public DataSet GetShipmentReportByICBIPL_ordring(int orderDetailsID, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                string cmdText = "";
                if (Flag == "ICBIPL")
                {
                    cmdText = "Usp_GetshipmentBy_ICBIPL_OrderBy";
                }
                else if (Flag == "HOPPM")
                {
                    cmdText = "UspGetHoppmPendingQaStatus";
                }
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                param.Value = orderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                cnx.Close();
                return ds;
            }

        }
        public DataSet GetInceptionCountDone(int maxDay, int minDay, int UnitID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetInceptioDoneCount";
                //string cmdText ="Usp_getShipmentValueByRange_test_abhishek";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@maxd", SqlDbType.Int);
                param.Value = maxDay;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@mind", SqlDbType.Int);
                param.Value = minDay;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }

        }
        public DataSet GetDesignationNamecluster()
        {
            DataSet dt = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactoryDesignationName_cluster";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    //SqlParameter param;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetFactoryLineDesignationDetailscluster(int UnitId, int LineNo, int LineDesignationId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactoryLineStatusDetails_cluster";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    //param = new SqlParameter("@inType", SqlDbType.Int);
                    //param.Value = 2;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClusterID", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineDesignationID", SqlDbType.Int);
                    param.Value = LineDesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //added by abhishek on 3/2/2017
        public int UpdateLineFloorCluster(int UnitId, int FloorNoId, int LineNoId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin_Cluster";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateLineStatusDesignationCluster(int UnitId, int LineNoId, int LineDesignationId, string DesignationName, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin_Cluster";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineDesignationId", SqlDbType.Int);
                param.Value = LineDesignationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationName", SqlDbType.VarChar);
                param.Value = DesignationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }


        public int UpdateLineIsClosedCluster(int UnitId, int FloorNoId, int LineNoId, bool IsClosed, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin_Cluster";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsClosed", SqlDbType.Int);
                param.Value = IsClosed;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }



        public int UpdateLineManPowerCluster(int UnitId, int manPower, int LineNoId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin_Cluster";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 8;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Manpower", SqlDbType.Int);
                param.Value = manPower;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //end 
        //Add by prabhaker 14/11/17
        public int UpdateClusterName(int UnitId, string ClusterName, int LineNoId, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFactoryLineAdmin_Cluster";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 9;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClusterName", SqlDbType.VarChar);
                param.Value = ClusterName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ModifyBy", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //end
        public DataSet GetProductionWorkingHours()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_getCurrentMonthWorkingHour";
                //string cmdText ="Usp_getShipmentValueByRange_test_abhishek";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                //SqlParameter param;

                //param = new SqlParameter("@maxd", SqlDbType.Int);
                //param.Value = maxDay;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@mind", SqlDbType.Int);
                //param.Value = minDay;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                //param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                //param.Value = UnitID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }

        }
        public DataSet get_ctsl(int UnitId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "GetCTSL_UnitWise";
                //string cmdText ="Usp_getShipmentValueByRange_test_abhishek";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                //param = new SqlParameter("@maxd", SqlDbType.Int);
                //param.Value = maxDay;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@mind", SqlDbType.Int);
                //param.Value = minDay;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                param = new SqlParameter("@ProductionUnit", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);



                cnx.Close();
                return ds;
            }

        }
        public DataSet GetInactiveuser(int UserID, int types, string StrUserID = "")
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_Update_InActive_User";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = types;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@strUserID", SqlDbType.VarChar);
                param.Value = StrUserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@ClientID", SqlDbType.Int);
                //param.Value = ClientID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsCount);
                return (dsCount);

            }

        }
        public int UpsateClientDeptAssociation(int ClientDeptID, int DesignationID, int UserID, string Flag, int Isactive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateClientDeptAssociation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientDeptID", SqlDbType.Int);
                param.Value = ClientDeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Int);
                param.Value = Isactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetQtyByStyleCode(string stylecode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetPendingQty";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = stylecode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsCount);
                return (dsCount);

            }
        }
        // Added By Ravi kumar on 24-5-17
        public DataSet GetPendingQty_ByStyleCode(string stylecode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetPendingQty_ByStyleCode";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = stylecode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsCount);
                return (dsCount);

            }
        }


        public int ActiveInactiveUser(int UserID, int Isactive, string Flag = "")
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateUser";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Int);
                param.Value = Isactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable GetCADMAster()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetCASMasterDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                return (dt);

            }
        }
        public DataTable GetMasterName()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetCASMasterDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                return (dt);

            }
        }
        public string UpdateMasterDetails(string MasterName, int MasterType)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_SaveCADMasterDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Name", SqlDbType.VarChar);
                param.Value = MasterName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CADID", SqlDbType.VarChar);
                param.Value = MasterType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Createdby", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Res"].ToString();
                return (str);

            }
        }
        public string UpdateMasterDetailsRole(int MasterID, int MasterRoleID)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_SaveCADMasterDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@CADID", SqlDbType.Int);
                param.Value = MasterRoleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@MasterID", SqlDbType.VarChar);
                param.Value = MasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Createdby", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Res"].ToString();
                return (str);

            }
        }
        public string Get_POBreakDown(string AM, string Exfactory)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetPOBreakDown";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AM", SqlDbType.VarChar);
                param.Value = AM;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory_PO", SqlDbType.VarChar);
                param.Value = Exfactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    str = dt.Rows[0]["Res"].ToString();
                }
                else
                    str = "";  
                return (str);

            }
        }

        //add code by bharat 25-jan-19

        public string Usp_GetOnhold_Contract_Status_BreakDown(string AM, string Exfactory)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetOnhold_Contract_Status_BreakDown";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@AM", SqlDbType.VarChar);
                param.Value = AM;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory_PO", SqlDbType.VarChar);
                param.Value = Exfactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    str = dt.Rows[0]["Res"].ToString();
                }
                else
                    str = "";
                return (str);

            }
        }


        //Add by Surendra2 on 29-05-2018
        public string Get_BrealDownForCompliance_QA(int ProcessType, string ProcessName, int QAComplaine_TypeAdmin, int ValuesID, int UnitId, int TotalAverage, int TotalProcess)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetBrealDownForCompliance_QA";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ProcessType", SqlDbType.Int);
                param.Value = ProcessType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ProcessName", SqlDbType.VarChar);
                param.Value = ProcessName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@QA_Compliance_TypeAdmin", SqlDbType.Int);
                param.Value = QAComplaine_TypeAdmin;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ValueId", SqlDbType.Int);
                param.Value = ValuesID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TotalAverage", SqlDbType.Int);
                param.Value = TotalAverage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TotalProcess", SqlDbType.Int);
                param.Value = TotalProcess;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Percentage"].ToString();
                return (str);

            }
        }

        //Add by Surendra2 on 02/08/2018.
        public string Get_BrealDownForOuthouse(string ProcessName, int ValuesID, int TotalAverage, int TotalProcess)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetBrealDownFor_Outhouse_Report";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ProcessName", SqlDbType.VarChar);
                param.Value = ProcessName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ValueId", SqlDbType.Int);
                param.Value = ValuesID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TotalAverage", SqlDbType.Int);
                param.Value = TotalAverage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TotalProcess", SqlDbType.Int);
                param.Value = TotalProcess;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Percentage"].ToString();
                return (str);

            }
        }

        //Add By Prabhaker 09-jan-18

        public string Get_ProductionmatrixPopUp(string StyleCode, DateTime Exfactory, int IsCombined, DateTime DcDate)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_Dynamacially_Exfactory_For_ProductionMatrix";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory", SqlDbType.DateTime);
                if ((Exfactory == DateTime.MinValue) || (Exfactory == Convert.ToDateTime("1753-01-01")) || (Exfactory == Convert.ToDateTime("1900-01-01")))
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = Exfactory;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DcDate", SqlDbType.DateTime);
                if ((DcDate == DateTime.MinValue) || (DcDate == Convert.ToDateTime("1753-01-01")) || (DcDate == Convert.ToDateTime("1900-01-01")))
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = DcDate;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@IsCombined", SqlDbType.Int);
                param.Value = IsCombined;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["PercentInHouse"].ToString() + "~" + dt.Rows[0]["POUpload"].ToString() + "~" + dt.Rows[0]["MaxfabEndETA"].ToString();
                return (str);

            }
        }

        public string Get_ProductionmatrixPopUp_Another(string StyleCode, string Exfactory)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_Dynamacially_Exfactory_For_ProductionMatrix_Another";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory", SqlDbType.VarChar);
                param.Value = Exfactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@IsCombined", SqlDbType.Int);
                //param.Value = IsCombined;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["PercentInHouse"].ToString() + "~" + dt.Rows[0]["POUpload"].ToString();
                return (str);

            }
        }
        public string Get_ProductionmatrixPopUp_BelowGrid(string Optional_StyleCode, DateTime Exfactory, string StyleCode, int IsCombined, DateTime DcDate)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_Optimize_Production_Matrix_BelowGrid";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OptionalStylecode", SqlDbType.VarChar);
                param.Value = Optional_StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stylecode", SqlDbType.VarChar);
                param.Value = StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Exfactory", SqlDbType.DateTime);
                if ((Exfactory == DateTime.MinValue) || (Exfactory == Convert.ToDateTime("1753-01-01")) || (Exfactory == Convert.ToDateTime("1900-01-01")))
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = Exfactory;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DC", SqlDbType.DateTime);
                if ((DcDate == DateTime.MinValue) || (DcDate == Convert.ToDateTime("1753-01-01")) || (DcDate == Convert.ToDateTime("1900-01-01")))
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = DcDate;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsCombined", SqlDbType.Int);
                param.Value = IsCombined;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                if (Optional_StyleCode == "To Be Shipped (Fabric Inhouse)")
                    str = dt.Rows[0]["PendingToBeShipped"].ToString();
                else if (Optional_StyleCode == "Pending Cut")
                    str = dt.Rows[0]["PendingCutQty"].ToString();
                else if (Optional_StyleCode == "Pending Stitch")
                    str = dt.Rows[0]["PendingStitchedQty"].ToString();
                else if (Optional_StyleCode == "Pending Finish")
                    str = dt.Rows[0]["PendingFinishedQty"].ToString();
                else
                    str = dt.Rows[0]["PercentInHouse"].ToString();
                return (str);

            }
        }

        //----End  Of Code
        public string UpdateMasterDetailsClientAssosi(int iaactive, string PrimaryClientID, string SecoundryCliemtID, int masterid, int IsReplace, int NewMAsterID)
        {
            string str = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_SaveCADMasterDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Int);
                param.Value = iaactive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Createdby", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@PrimeryClientID", SqlDbType.VarChar);
                param.Value = PrimaryClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SecoundryClientID", SqlDbType.VarChar);
                param.Value = SecoundryCliemtID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@MasterID", SqlDbType.Int);
                param.Value = masterid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@IsReplace", SqlDbType.Int);
                param.Value = IsReplace;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@NewMAsterID", SqlDbType.Int);
                param.Value = NewMAsterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);
                str = dt.Rows[0]["Res"].ToString();
                return (str);

            }
        }

        public DataSet GetClientMatserAssociationDetails(int MasterID, int Types)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetClientAssociatName";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = Types;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@MasterID", SqlDbType.Int);
                param.Value = MasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);


                cnx.Close();
                return ds;
            }

        }



        // Added By Prabhaker on 26-6-17
        public int InsertUpdateCadManagerTailor(int TailorOnLoad, int TailorPresent, int SampleMadeCount, DateTime requestdate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int result = 0;
                cnx.Open();
                string cmdText = "sp_CadManagerTailor_Load";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@TailorOnLoad", SqlDbType.Int);
                param.Value = TailorOnLoad;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TailorPresent", SqlDbType.Int);
                param.Value = TailorPresent;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SampleMadeCount", SqlDbType.Int);
                param.Value = SampleMadeCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@requestdate", SqlDbType.DateTime);
                param.Value = requestdate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //DataSet ds = new DataSet();
                //SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                //adapter.Fill(ds);
                result = cmd.ExecuteNonQuery();

                cnx.Close();
                return result;
            }




        }
        public int GetWeek_Count(out int days)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetWeekCount";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsWeekCount = new DataSet();
                SqlParameter param;



                param = new SqlParameter("@Out", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@SampleSent", SqlDbType.Int);
                //param.Value = SampleSent;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //DataSet ds = new DataSet();
                //SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                //adapter.Fill(ds);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsWeekCount);
                days = Convert.ToInt32(param.Value);
                //result = cmd.ExecuteNonQuery();

                cnx.Close();
                return days;
            }




        }

        public DataTable getCadManagerTailor()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetCadManagerTailor";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;



                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);


                cnx.Close();
                return ds.Tables[0];
            }

        }

        public DataSet getFactorySpecificlineTargetActual()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_Linewise_Actual_Target_Report_Optimize";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsCount);
                return (dsCount);

            }
        }



        public DataSet getFactorySlotSpecificlineTargetActual()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_Linewise_Slot_Actual_Target_Report";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsCount);
                return (dsCount);

            }
        }
        public DataSet getDepartmentWiseReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "USP_get_Department_Specific_Delay_Reports";
                //cmdText = "USP_get_Department_Specific_Delay_Reports__WithoutAssosiation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsCount);
                return (dsCount);

            }
        }
        public DataSet getDepartmentWiseReport_withoutassosiation()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsCount = new DataSet();

                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "USP_get_Department_Specific_Delay_Reports__WithoutAssosiation";
                //cmdText = "USP_get_Department_Specific_Delay_Reports__WithoutAssosiation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsCount);
                return (dsCount);

            }
        }
        // Added By Prabhaker
        public DataTable getCadManagerStatus(string flag, int styleID, string status)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";
                if (status.Contains("Sampling"))
                    cmdText = "Usp_GetCadMasterStatus_PreOrder";
                else
                    cmdText = "Usp_GetCadMasterStatus";


                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = styleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = status;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);


                cnx.Close();
                return ds.Tables[0];
            }

        }
        public int UpdateCadManagerStatus(string flag, int RemakeCount, int styleID, string status)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int result = 0;
                cnx.Open();
                string cmdText = "Usp_GetCadMasterStatus";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@RemakeCount", SqlDbType.Int);
                param.Value = RemakeCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = styleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = status;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();
                cnx.Close();
                return result;
            }


        }

        //
        //added by abhishek on 28/6/2017
        public DataSet GetFitsReport(string flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";
                if (flag == "SAMPLING" || flag == "FITS")
                {
                    cmdText = "Usp_GetFitsReport";
                }
                else if (flag == "TOPSUMMARY")
                {
                    cmdText = "Usp_GetFitsReport_TopSummary";
                }
                else if (flag == "DAYS")
                {
                    cmdText = "Usp_GetMasterPerformanceReport";
                }
                else if ((flag == "HandOver-PreOrder") || (flag == "PatternReady-PreOrder") || (flag == "SampleSent-PreOrder") || (flag == "PriceQuoted-BIPL") || (flag == "HandOver-PostOrder") || (flag == "PatternReady-PostOrder") || (flag == "SampleSent-PostOrder") || (flag == "FitCommentesUpload-PostOrder") || (flag == "COSTING BIPL") || (flag == "Pending weight style") || (flag == "CUT_WIP") || (flag == "Finished_WIP") || (flag == "InHouseFabricWIP") || (flag == "CUT_StitchWIP") || (flag == "Stitch_PackWIP") || (flag == "Pack_ShipWIP") || (flag == "FitCommentes_Pending") || (flag == "Fabric_Average_Saving") || (flag == "Pending_Cost_Confirmation"))
                {
                    cmdText = "Usp_GetFitsExcelReport";
                }
                //else if (flag == "PATTERNREADY")
                //{
                //    cmdText = "Usp_GetFitsExcelReport";
                //}
                //else if (flag == "SAMPLESENT")
                //{
                //    cmdText = "Usp_GetFitsExcelReport";
                //}
                //else if (flag == "FitCommentesUpload")
                //{
                //    cmdText = "Usp_GetFitsExcelReport";
                //}
                else if (flag == "TOPPEDNING" || flag == "TOPAPPROVELPENDING" || flag == "TOP_Approved_MDA_Pending_Reports" || flag == "TOP_Approved_Fabric_BIH_Reports" || flag == "Pattern_Sample_Pending" || flag == "Production_Planning" || flag == "Buyer_POPending" || flag == "Upcoming_exfactory" || flag == "Sampling-status" || flag == "FabriInhouseShortforUpcomingDC" || flag == "Rescan" || flag == "PatternStatus" || flag == "Production_Planning_AgainstStyleCode" || flag == "Buyer_OnHold_Pending" || flag == "AMPerformance_STC" || flag == "AMPerformance_BIH")
                {
                    cmdText = "Usp_GetFitsExcelReport";
                    //cmdText = "Usp_GetFitsExcelReport_test";
                }
                else if (flag == "OutHouse" || flag == "All_orders_with_ValueAddition" || flag == "Ern_orders_with_ValueAddition" || flag == "Ern_Outhouse" || flag == "Reallocation_OutHouse" || flag == "Cutting_OutHouse" || flag == "Finished_OutHouse" || flag == "Ern_Outhouse_Cutting" || flag == "Ern_Outhouse_Finished")
                {
                    cmdText = "Usp_GetOutHouseExcelReport";
                }

                else if (flag == "Fabric_PO_Detail")
                {
                    cmdText = "Usp_GetMaterialExcelReport";
                }
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }

        }
        public DataTable GetFitsMasterReport(string flag, string StartDate, string EndDate, int MasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "Usp_GetMasterCountReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.VarChar);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EndDate", SqlDbType.VarChar);
                param.Value = EndDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@MasterID", SqlDbType.Int);
                param.Value = MasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }

        }

        public DataTable GetFitstailorMonthlyReport(string flag, string StartDate, string EndDate, int WeekNumber)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "Usp_GettailorMonthlyDetails";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.VarChar);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EndDate", SqlDbType.VarChar);
                param.Value = EndDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@WeekNumber", SqlDbType.Int);
                param.Value = WeekNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }

        }
        public List<Client> BindClientListAgainstMerchant(int UserId, int flag)
        {
            List<Client> clients = new List<Client>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetClientAgainst_FitMerchent";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UserID", SqlDbType.VarChar);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    Client client = new Client();
                    client.ClientID = Convert.ToInt32(reader["ClientId"]);
                    client.CompanyName = Convert.ToString(reader["CompanyName"]);
                    clients.Add(client);


                }
            }
            return clients;

        }


        public List<Client> BindDeptListAgainstCliets(int UserId, int ClientId, int FitMerchantID)
        {
            List<Client> clients = new List<Client>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetDepartmentAgainst_FitMerchent";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FitMerchantID", SqlDbType.Int);
                param.Value = FitMerchantID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    Client client = new Client();
                    client.ClientID = Convert.ToInt32(reader["DeptID"]);
                    client.CompanyName = Convert.ToString(reader["DeptName"]);
                    clients.Add(client);


                }
            }
            return clients;

        }
        public List<Client> BindDeptListAgainstParentDept(int UserId, int ClientId, int FitMerchantID, int ParentDeptID)
        {
            List<Client> clients = new List<Client>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetDepartmentAgainst_FitMerchent";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FitMerchantID", SqlDbType.Int);
                param.Value = FitMerchantID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ParentDeptID", SqlDbType.Int);
                param.Value = ParentDeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "CHILDDEPT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    Client client = new Client();
                    client.ClientID = Convert.ToInt32(reader["DeptID"]);
                    client.CompanyName = Convert.ToString(reader["DeptName"]);
                    clients.Add(client);


                }
            }
            return clients;

        }
        public DataSet GetShipmetReportPnd(string flag, int ClientID = 0, string ExfactDate = "")
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "Usp_GetPendingShipmentDue";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientIDe", SqlDbType.Int);
                param.Value = ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                if (ExfactDate != "")
                {
                    //string ExfactDates = ExfactDate.Substring(0, 9);
                    //DateTime Date = Convert.ToDateTime(ExfactDates, Provider);
                    param = new SqlParameter("@ExfactDateClient", SqlDbType.DateTime);
                    param.Value = Convert.ToDateTime(ExfactDate);
                    cmd.Parameters.Add(param);
                }
                else
                {
                    param = new SqlParameter("@ExfactDateClient", SqlDbType.DateTime);
                    param.Value = DBNull.Value;
                    cmd.Parameters.Add(param);
                }

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //abhishek 6/4/2018
        public DataSet GetShipmetReportUpcming()
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "Usp_GetUpComingPlandDate";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        public DataSet GetShipmentPenaltyReports()
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "Usp_GetShipment_PlanningReports";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        // Added By Surendra Sharma on 06-03-18 for Out House Summary Report..
        public DataSet GetOuthouseSummaryReport()
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "sp_GetFabricator_Avreage";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        public DataSet GetOuthouseSummaryReportwithout()
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "sp_GetFabricator_Avreage_withoutstitch";


                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }

        // Added By Ravi on 18-10-17 for New Planning work

        //public DataTable GetStyleCodeDetails(int UnitId, int LineNo, string Status)
        //{
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //        {
        //            cnx.Open();
        //            string cmdText = "Usp_FillFactorySpecificLinePlanning";
        //            SqlCommand cmd = new SqlCommand(cmdText, cnx);
        //            cmd.CommandType = CommandType.StoredProcedure;
        //            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //            SqlParameter param;

        //            param = new SqlParameter("@inType", SqlDbType.Int);
        //            param.Value = 0;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            param = new SqlParameter("@UnitId", SqlDbType.Int);
        //            param.Value = UnitId;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            param = new SqlParameter("@LineNo", SqlDbType.Int);
        //            param.Value = LineNo;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            param = new SqlParameter("@Status", SqlDbType.VarChar);
        //            param.Value = Status;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
        //            adapter.Fill(dt);
        //            cnx.Close();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        string str = ex.Message;
        //    }
        //    return dt;
        //}

        public List<LinePlanningStyle> GetStyleCodeDetails(int UnitId, int LineNo, string Status, string StylePrefix)
        {
            List<LinePlanningStyle> objStyle = new List<LinePlanningStyle>();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 0;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Status", SqlDbType.VarChar);
                    param.Value = Status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StylePrefix", SqlDbType.VarChar);
                    param.Value = StylePrefix;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataReader reader;
                    reader = cmd.ExecuteReader();


                    while (reader.Read())
                    {

                        LinePlanningStyle objstylenew = new LinePlanningStyle();
                        objstylenew.StyleCode = reader["StyleCode"].ToString();
                        objStyle.Add(objstylenew);
                    }

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            return objStyle;

        }

        public DataTable GetStyleDetails(int UnitId, int LineNo, string StyleCode, string Status)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Status", SqlDbType.VarChar);
                    param.Value = Status;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataSet Get_SAM_OB_ByStyleCode(string StyleCode, int StyleId, int UnitId)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "sp_Get_SAM_OB_ByStyleCode";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }

        public DataTable GetStyleDetail_LinePlan(int FactoryId, int LineNo, string StyleCode, int LinePlanFrameId, int StyleId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 7;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetContractStyleDetail_Grid(int FactoryId, int LineNo, string StyleCode, int StyleId, int LinePlanFrameId, int IsHalfStitch)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsHalfStitch", SqlDbType.Int);
                    param.Value = IsHalfStitch;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int DeleteLinePlanning(int UnitId, int LineNoId, string StyleCode, int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                param.Value = StyleCode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int InsertUpdateLinePlanning(LinePlan objLinePlan, int UserId, ref int LinePlanFrameIdOutput)
        {
            int intReturn = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = objLinePlan.UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FloorNo", SqlDbType.Int);
                    param.Value = objLinePlan.FloorNoId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNO", SqlDbType.Int);
                    param.Value = objLinePlan.LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Sam", SqlDbType.Decimal);
                    param.Value = objLinePlan.Sam;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OB", SqlDbType.Int);
                    param.Value = objLinePlan.OB;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewOB", SqlDbType.Int);
                    param.Value = objLinePlan.NewOB;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = objLinePlan.LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CombinedFrameId", SqlDbType.Int);
                    param.Value = objLinePlan.CombinedFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = objLinePlan.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SamStyleId", SqlDbType.Int);
                    param.Value = objLinePlan.SamStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = objLinePlan.StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = objLinePlan.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = objLinePlan.OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                    param.Value = objLinePlan.StartDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StartSlotID", SqlDbType.Int);
                    param.Value = objLinePlan.StartSlot;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ContractQty", SqlDbType.Int);
                    param.Value = objLinePlan.ContractQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitQty", SqlDbType.Int);
                    param.Value = objLinePlan.UnitQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineQty", SqlDbType.Int);
                    param.Value = objLinePlan.LineQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StichedQty", SqlDbType.Int);
                    param.Value = objLinePlan.StichedQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IshalfStitch", SqlDbType.Bit);
                    param.Value = objLinePlan.IsHalfStitched;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SeqFrameId", SqlDbType.Int);
                    param.Value = objLinePlan.SeqFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsParallel", SqlDbType.Int);
                    param.Value = objLinePlan.IsParallel;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                    param.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    LinePlanFrameIdOutput = (int)cmd.Parameters["@LinePlanFrameIdOutput"].Value;
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            return intReturn;
        }


        public int Update_Start_EndDate_ByLinePlanFrameId(int LinePlanFrameId, string StyleCode, int UnitId, int LineNoId, int TotalQty)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    string cmdText = "Update_Start_EndDate_ByLinePlanFrameId";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNO", SqlDbType.Int);
                    param.Value = LineNoId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Quantity", SqlDbType.Int);
                    param.Value = TotalQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    intReturn = 0;
                }
                return intReturn;
            }
        }

        public int UpdateLinePlanStitchingSam(int StyleId, int LinePlanFrameId, bool IsFinishing, string OperationName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsFinishing", SqlDbType.Bit);
                param.Value = IsFinishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OperationName", SqlDbType.VarChar);
                param.Value = OperationName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int AddDuplicateHalfStitch_LinePlan(int UnitId, int FloorNoId, int LineNoId, DateTime StartDate, int SlotId, int LinePlanFrameId, int FullStitchFrame, int SeqFrameId, bool IsParallel, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartSlotID", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FullStitchFrame", SqlDbType.Int);
                param.Value = FullStitchFrame;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SeqFrameId", SqlDbType.Int);
                param.Value = SeqFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsParallel", SqlDbType.Bit);
                param.Value = IsParallel;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int AddDuplicateHalfStitch_LinePlan_New(int UnitId, int FloorNoId, int LineNoId, DateTime StartDate, int SlotId, int LinePlanFrameId, int FullStitchFrame, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FloorNo", SqlDbType.Int);
                param.Value = FloorNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineNO", SqlDbType.Int);
                param.Value = LineNoId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                param.Value = StartDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StartSlotID", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FullStitchFrame", SqlDbType.Int);
                param.Value = FullStitchFrame;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable GetDesignationDetails(int FactoryId, int LineNo, int FactoryLineAdminID)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@tblFactoryLineAdminID", SqlDbType.Int);
                    param.Value = FactoryLineAdminID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetContractStyleDetail(int FactoryId, int LineNo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //abhishek 15/1/2018
        public DataTable GetContractStyleDetail_outshoue(int FactoryId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 14;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@LineNo", SqlDbType.Int);
                    //param.Value = LineNo;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public string GetSlotTime(int SlotId)
        {
            string SlotTime = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsclient = new DataSet();
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                cmdText = "usp_GetSlotTime";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@SlotId", SqlDbType.Int);
                param.Value = SlotId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SlotTime = cmd.ExecuteScalar().ToString();

                return SlotTime;
            }
        }

        public DataTable GetContractStyleDetail_LinePlan(int FactoryId, int LineNo, string StyleCode, int LinePlanFrameId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 6;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int DeleteLinePlanFrame(int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InsertUpdateLinePlanning";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 7;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LinePlanFrameIdOutput", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public DataTable GetSamOBDiff(string StyleCode, int StyleId, int CombinedFrameId, int IsHalfStitched)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 8;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CombinedFrameId", SqlDbType.Int);
                    param.Value = CombinedFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsHalfStitch", SqlDbType.Int);
                    param.Value = IsHalfStitched;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public DataTable GetLinePlanFrame(int UnitId, int LineNo, int LinePlanFrameId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //abhishek 15/1/2018
        public DataTable GetLinePlanFrame_outhouse(int UnitId, int LineNo, int LinePlanFrameId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_FillFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 12;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetContractStyleDetail_LinePlan_out(int FactoryId, int LineNo, string StyleCode, int LinePlanFrameId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 16;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        //Added by abhishek on 22/1/2018

        public DataTable GetFabricInHouseQtyDetails(int OrderDetailID, int FabricType)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFabricInHouse";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricType", SqlDbType.Int);
                    param.Value = FabricType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int UpdateFabricInHouseQty(int OrderDetailID, int FabricType, int InhouseQty, int issue_issueQty, string issue_Challan, int OnholdQty, int RejectQty, int CreatedBy)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFabricInHouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricType", SqlDbType.Int);
                param.Value = FabricType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InHouseQty", SqlDbType.Int);
                param.Value = InhouseQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IssueQty", SqlDbType.Int);
                param.Value = issue_issueQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ChallanQty", SqlDbType.VarChar);
                param.Value = issue_Challan;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OnHoldQty", SqlDbType.Int);
                param.Value = OnholdQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RejectQty", SqlDbType.Int);
                param.Value = RejectQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = CreatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataTable GetFabricInHouseQty(int OrderDetailID, int FabricType)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFabricInHouse";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = 3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricType", SqlDbType.Int);
                    param.Value = FabricType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public DataTable GetFabricInHousePlannedQty(int OrderDetailID, int FabricType, string IsBlankRow)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFabricInHouse";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = 4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricType", SqlDbType.Int);
                    param.Value = FabricType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsBlankRow", SqlDbType.VarChar);
                    param.Value = IsBlankRow;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int UpdateFabricPlannedQty(int OrderDetailID, int FabricType, int P_Id, DateTime PlannedETA, int DelaysDays, int Quantity, int IsComplete)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFabricInHouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 5;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricType", SqlDbType.Int);
                param.Value = FabricType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@P_Id", SqlDbType.Int);
                param.Value = P_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlannedETA", SqlDbType.DateTime);
                param.Value = PlannedETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DelaysDays", SqlDbType.Int);
                param.Value = DelaysDays;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Quantity", SqlDbType.Int);
                param.Value = Quantity;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsComplete", SqlDbType.Int);
                param.Value = IsComplete;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateRevisedQty(int OrderDetailID, int FabricType, DateTime PlannedETA, int DelaysDays, int Quantity)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateUpdateRevisedQty";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;



                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricType", SqlDbType.Int);
                param.Value = FabricType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlannedETA", SqlDbType.DateTime);
                param.Value = PlannedETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DelaysDays", SqlDbType.Int);
                param.Value = DelaysDays;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Quantity", SqlDbType.Int);
                param.Value = Quantity;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int DeleteFabricInHouseETA(int P_Id, DateTime PlannedETA)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFabricInHouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 6;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@P_Id", SqlDbType.Int);
                param.Value = P_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlannedETA", SqlDbType.DateTime);
                param.Value = PlannedETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public string GetExistLinePlanFrame(int FactoryId, int LineNo, string StyleCode)
        {
            string FrameIdLength = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 9;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LineNo", SqlDbType.Int);
                    param.Value = LineNo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    FrameIdLength = cmd.ExecuteScalar().ToString();
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return FrameIdLength;
        }

        public string ValidateExsitingPlannedDate(DateTime dates, int OrderDetailID, int FabricType)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFabricInHouse";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = 7;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricType", SqlDbType.Int);
                    param.Value = FabricType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PlannedETA", SqlDbType.DateTime);
                    param.Value = dates;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt.Rows[0]["res"].ToString();
        }
        //Added by abhishek convert any format to sql specific
        private static DateTime ConvertToDateTime(string strDateTime, string[] Chars)
        {
            try
            {
                //string[] con = confirmValue.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                DateTime dtFinaldate; string sDateTime;
                string[] sDate = strDateTime.Split(Chars, StringSplitOptions.RemoveEmptyEntries);
                sDateTime = sDate[1] + '/' + sDate[0] + '/' + sDate[2];
                dtFinaldate = Convert.ToDateTime(sDateTime);
                return dtFinaldate;
            }
            catch (Exception ex)
            {
                try
                {
                    return DateTime.ParseExact(strDateTime.Trim(), "MM/dd/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                }
                catch (Exception ex1)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex1.Message, ex1.StackTrace));
                    return DateTime.MinValue;

                }
            }
        }
        public DataTable GetBindFabrRshuffle(int OrderDetailID, int FabricType, DateTime EntryDate)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFabricInHouse";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = 8;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricType", SqlDbType.Int);
                    param.Value = FabricType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PlannedETA", SqlDbType.DateTime);
                    param.Value = EntryDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int UpdateFabPlannedHoldQty(int p_id, int OnholdQty, int InHouseQty, int RejectQty, int IssueQty, int CreatedBy)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFabricInHouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 9;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@P_Id", SqlDbType.Int);
                param.Value = p_id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OnHoldQty", SqlDbType.Int);
                param.Value = OnholdQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InHouseQty", SqlDbType.Int);
                param.Value = InHouseQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RejectQty", SqlDbType.Int);
                param.Value = RejectQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IssueQty", SqlDbType.Int);
                param.Value = IssueQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = CreatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UptfabEND_Eta(int OrderDetailID, int FabricType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateFabricInHouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.Int);
                param.Value = 10;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricType", SqlDbType.Int);
                param.Value = FabricType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public int UpdateCutissue(int OrderDetailsID, int CutIssue, string ChalanNo, int UnitID, DateTime CutIssueDate, int CreatedBy)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetCutIssueOutHouseDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@IntType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Qty", SqlDbType.Int);
                param.Value = CutIssue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ChallNo", SqlDbType.NVarChar);
                param.Value = ChalanNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CutIssueDate", SqlDbType.DateTime);
                param.Value = CutIssueDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreateBy", SqlDbType.Int);
                param.Value = CreatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataTable GetCutIssueDetail(int OrderDetailID, int UnitId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetCutIssueOutHouseDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@IntType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        //Added for complete line plan frame
        public int CompleteLinePlanFrame(int UnitiD, int LineNo, int LinePlanFrameId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "usp_CompleteLinePlanFrame";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;


                paramIn = new SqlParameter("@UnitId", SqlDbType.Int);
                paramIn.Value = UnitiD;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@LineNo", SqlDbType.Int);
                paramIn.Value = LineNo;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                paramIn.Value = LinePlanFrameId;
                cmd.Parameters.Add(paramIn);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }
        //End Added for complete line plan frame
        //Add By Prabhaker 23-mar-18
        //Updated by Ravi kumar on 31-May-19
        public int UpdateQCManPowerChecker(int OrderDetailsID, int ManPower, int QCId, int Checker, int UnitID, int stitchQty, int IsCompleted, string type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateQCManPowerChecker";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ManPower", SqlDbType.Int);
                param.Value = ManPower;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@QC", SqlDbType.Int);
                param.Value = QCId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Checker", SqlDbType.Int);
                param.Value = Checker;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitID", SqlDbType.Int);
                param.Value = UnitID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InputQty", SqlDbType.Int);
                param.Value = stitchQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsCompleted", SqlDbType.Int);
                param.Value = IsCompleted;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = LoggedInUser.UserData.UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@type", SqlDbType.VarChar, 10);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public DataSet GetQCManPowerChecker(int OrderDetailID, int UnitId, string type)
        {
            DataSet ds = new DataSet();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetQCManPowerChecker";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = UnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@type", SqlDbType.VarChar, 10);
                    param.Value = type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return ds;
        }

        //End Of Code
        public DataTable GetStaffAttendence(string Flag, int DeparmentID, int designationid, int userid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "Usp_StaffAddendenceDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = Flag;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DeparmentID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = designationid;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = userid;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds.Tables[0];

            }
        }
        public DataTable CheckPlanleaveStaffAttendence(string Flag, int DeparmentID, int designationid, int userid, DateTime Leavedate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "Usp_StaffAddendenceDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = Flag;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DeparmentID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = designationid;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = userid;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Leavedate", SqlDbType.DateTime);
                param.Direction = ParameterDirection.Input;
                param.Value = Leavedate;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds.Tables[0];

            }
        }
        //Added by abhishek on 24/4/2018
        public int UpdateStaffAttendence(int DeptID,
           int DesignationID,
           int LoggedInUser,
             string Intime,
           string Outtime,
           int StatusiD,
           DateTime Leavefrom,
           DateTime Leaveto,
           decimal NoOfLeaveDay,
           string Remarks, DateTime StaffAttandanceDate, int UpdatedBy, string ExtraOutTime)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_StaffAddendenceDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "UPDATE";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Value = DeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = LoggedInUser;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InTime", SqlDbType.VarChar);
                param.Value = Intime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OutTime", SqlDbType.VarChar);
                param.Value = Outtime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@StausID", SqlDbType.Int);
                param.Value = StatusiD;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LeaveFrom", SqlDbType.DateTime);
                if (Leavefrom == DateTime.MinValue)
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = Leavefrom;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LeaveTo", SqlDbType.DateTime);
                if (Leaveto == DateTime.MinValue)
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = Leaveto;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@LeaveDays", SqlDbType.Float);
                param.Value = NoOfLeaveDay;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@HRRemarks", SqlDbType.VarChar);
                param.Value = Remarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StaffAttandanceDate", SqlDbType.DateTime);
                param.Value = StaffAttandanceDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpdatedBy", SqlDbType.Int);
                param.Value = UpdatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExtraOutTime", SqlDbType.VarChar);
                if (ExtraOutTime == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = ExtraOutTime;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetStaffAttendenceDetailByDate(int DeptID, int designationID, int UserID, DateTime AttendencDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "Usp_StaffAddendenceDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "GET";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StaffAttandanceDate", SqlDbType.DateTime);
                param.Value = AttendencDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Value = DeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = designationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                //DataTable dt = new DataTable();
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;

            }
        }
        public DataTable CheckHoliday(DateTime AttendencDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "Usp_GetStaffAttedenceReport";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "5";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StaffAttandanceDate", SqlDbType.DateTime);
                param.Value = AttendencDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;

            }
        }

        //// Is Sunday working added on 23-4-18
        //public int IsSundayWorking()
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        string cmdText = "usp_IsSundayWorking";

        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);

        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;               
        //        int IsSunWorking = Convert.ToInt32(cmd.ExecuteScalar());
        //        return IsSunWorking;
        //    }

        //}
        public DataSet GetHeaderstaffAtten(int monthno)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetStaffAttedenceReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "1";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@MonthNo", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = monthno;
                cmd.Parameters.Add(param);

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public DataTable GetStaffAttendenceDetailByDateleave(int DeptID, int designationID, int UserID, DateTime AttendencDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText = "Usp_StaffAddendenceDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "GETLEAVEDAYS";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StaffAttandanceDate", SqlDbType.DateTime);
                param.Value = AttendencDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Value = DeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = designationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;

            }
        }
        public DataSet GetHeaderstaffAtten_Report(int DeparmentID, int DesignationID, int UserID, DateTime StaffAttandanceDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetStaffAttedenceReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "2";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@flagDate", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "TIME";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DeparmentID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DesignationID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StaffAttandanceDate", SqlDbType.DateTime);
                param.Direction = ParameterDirection.Input;
                param.Value = StaffAttandanceDate;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public DataSet GetHeaderstaffAtten_ReportMothIse(int DeparmentID, int DesignationID, int UserID, int month)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetStaffAttedenceReport";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "3";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@flagDate", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = "MONTHTOVERALL";
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeparmentID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DeparmentID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = DesignationID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserID;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@MonthNo", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = month;
                cmd.Parameters.Add(param);


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }
        public int UpdateQcFile(string filename, int orderdetailID, string filetype)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GET_QcProd";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@flag", SqlDbType.VarChar);
                param.Value = "DELETE";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@filedelete", SqlDbType.VarChar);
                param.Value = filename;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = orderdetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flagfirst", SqlDbType.VarChar);
                param.Value = filetype;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        public DataSet GetSuppliarDetails_new(int Flag, int SupplierType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierType", SqlDbType.Int);
                param.Value = SupplierType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }
        public DataSet GetSuppliarProcess(int Flag, int SupplierType, int SupplierMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierType", SqlDbType.Int);
                param.Value = SupplierType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierMasterID", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }
        public DataSet GetSuppliarContactDetails_new(int Flag, int SupplierMasterID, string Search = "", int searchIsActive = -1, string txtSearch = "")
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierMasterID", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Search", SqlDbType.VarChar);
                param.Value = Search;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Int);
                param.Value = searchIsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TextSearch", SqlDbType.VarChar);
                param.Value = txtSearch;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }
        public DataTable CheckSupplierNameExists(int SupplierMasterID, string SupplierName, int types)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 7;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierMasterID", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                param.Value = SupplierName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@types", SqlDbType.Int);
                param.Value = types;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dtCheck = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtCheck);
                cnx.Close();
                return dtCheck;
            }
        }
        public DataTable SetActiveSupplierMaster(int Flag, int SupplierMasterID, int IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetSupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierMasterID", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Int);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dsFaults = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }

        public DataSet GetCatagory(int Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }
        public DataTable GetCatagorySelectedVal(int Flag, int SelectedVal)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SelectedCatID", SqlDbType.Int);
                param.Value = SelectedVal;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }

        public int DeleteAccMasterByID(int AccMasterID)
        {
            int intReturn;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_GetAccQualityDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@flag", SqlDbType.Int);
                    param.Value = 6;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                    param.Value = AccMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                intReturn = -1;
            }
            return intReturn;
        }

        public DataTable GetCatagoryFilter(int Flag, int CatGroupID, string TradeName, int Unit, int SearchDefault)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CatGroupID", SqlDbType.Int);
                param.Value = CatGroupID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccQuality", SqlDbType.VarChar);
                param.Value = TradeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Unit", SqlDbType.Int);
                param.Value = Unit;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchDefault", SqlDbType.Int);
                param.Value = SearchDefault;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }

        public DataTable GetAccSizedetails(int Flag, int AccMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }

        public int UpdateAccSize(int flag, int AccMasterID, string SizeName, string accessory_quality_SizeID, decimal greige, decimal Process, decimal Finish, int OptionNo, int UserId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = SizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_quality_SizeID", SqlDbType.VarChar);
                param.Value = accessory_quality_SizeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@greige", SqlDbType.Decimal);
                param.Value = greige;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@procees", SqlDbType.Decimal);
                param.Value = Process;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Finish", SqlDbType.Decimal);
                param.Value = Finish;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OptionNo", SqlDbType.Int);
                param.Value = OptionNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public string UpdateAccSizeValidate(string AccSizeName, int AccMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                string intReturn;
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@flag", SqlDbType.Int);
                param.Value = 10;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = AccSizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlParameter outParam = new SqlParameter();
                outParam = new SqlParameter("@OutReslt", SqlDbType.VarChar, 50);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                cmd.ExecuteNonQuery();
                intReturn = outParam.Value.ToString();
                cnx.Close();
                return intReturn;
            }
        }

        public int DeleteAccSize(int AccMasterID, int accessory_quality_SizeID, string SizeName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 11;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_quality_SizeID", SqlDbType.Int);
                param.Value = accessory_quality_SizeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = SizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public DataSet GetAccSizegrd(int AccsessMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 13;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccsessMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsFaults = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }

        public DataTable GetAccessFileUpload(int AccMasterID, int Acc_qualityID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = 4;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Acc_qualityID", SqlDbType.Int);
                param.Value = Acc_qualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }

        public int UpdateAccSizeFile(int accessory_qualityID, string UploadBaseTestFile, string UploadFile)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_UpdateAccSizeDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "UPDATE_FILE";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_qualityID", SqlDbType.Int);
                param.Value = accessory_qualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UploadBaseTestFile", SqlDbType.VarChar);
                param.Value = UploadBaseTestFile;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UploadFile", SqlDbType.VarChar);
                param.Value = UploadFile;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }

        public int UpdateAccSupplier(string flag, int accessory_qualityID, double AccesoriesWastage, double Accesories_ShrinkageWastage, string AccesoriesType,
        int AccessoryMaster_ID, int SupplierID, int LeadTime, string UploadBaseTestFile, DateTime TestConductedOn, double MinimumOrderQuality, string UploadFile, int UserID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                int AccMasterID = 0;
                cnx.Open();
                string cmdText = "Usp_UpdateAccSizeDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_qualityID", SqlDbType.Int);
                param.Value = accessory_qualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccesoriesWastage", SqlDbType.Float);
                param.Value = AccesoriesWastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Accesories_ShrinkageWastage", SqlDbType.Float);
                param.Value = Accesories_ShrinkageWastage;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccesoriesType", SqlDbType.VarChar);
                param.Value = AccesoriesType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccessoryMaster_ID", SqlDbType.Int);
                param.Value = AccessoryMaster_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SupplierID", SqlDbType.Int);
                param.Value = SupplierID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LeadTime", SqlDbType.Int);
                param.Value = LeadTime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UploadBaseTestFile", SqlDbType.VarChar);
                if (UploadBaseTestFile != "")
                {
                    param.Value = UploadBaseTestFile;
                }
                else
                {
                    param.Value = DBNull.Value;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TestConductedOn", SqlDbType.DateTime);
                if (TestConductedOn != DateTime.MinValue)
                {
                    param.Value = TestConductedOn;
                }
                else
                {
                    param.Value = DBNull.Value;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@MinimumOrderQuality", SqlDbType.Float);
                param.Value = MinimumOrderQuality;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UploadFile", SqlDbType.VarChar);
                if (UploadFile != "")
                {
                    param.Value = UploadFile;
                }
                else
                {
                    param.Value = DBNull.Value;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlParameter outParam = new SqlParameter();
                outParam = new SqlParameter("@OutReslt", SqlDbType.Int, 10);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                cmd.ExecuteNonQuery();
                AccMasterID = Convert.ToInt32(outParam.Value.ToString());
                cnx.Close();
                return AccMasterID;
            }
        }

        public int UpdateAccSupplierSizetable(string flag, int accessory_qualityID, double Price, double FinalPrice, int UserID, int AccessoryMaster_ID, int accessory_quality_SizeID, string SizeName, int IsGreigeSupply, int IsProcessSupply, int IsFinishSupply, double GriegePrice, double ProcessPrice, double FinshingPrice)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                int AccMasterID = 0;
                cnx.Open();
                string cmdText = "Usp_UpdateAccSizeDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_qualityID", SqlDbType.Int);
                param.Value = accessory_qualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Price", SqlDbType.Float);
                param.Value = Price;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FinalPrice", SqlDbType.Float);
                param.Value = FinalPrice;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@AccessoryMaster_ID", SqlDbType.Int);
                param.Value = AccessoryMaster_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@accessory_quality_SizeID", SqlDbType.Int);
                param.Value = accessory_quality_SizeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = SizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsGreigeSupply", SqlDbType.Int);
                param.Value = IsGreigeSupply;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsProcessSupply", SqlDbType.Int);
                param.Value = IsProcessSupply;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsFinishSupply", SqlDbType.Int);
                param.Value = IsFinishSupply;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //========
                param = new SqlParameter("@GreigePrice", SqlDbType.Float);
                param.Value = GriegePrice;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@ProcessPrice", SqlDbType.Float);
                param.Value = ProcessPrice;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FinishPrice", SqlDbType.Float);
                param.Value = FinshingPrice;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                AccMasterID = cmd.ExecuteNonQuery();
                cnx.Close();
                return AccMasterID;
            }
        }

        public DataTable GetAccSizeHistory(string flag, int accessory_quality_SizeID, int AccessoryMaster_ID, int AccMasterID, string SizeName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_UpdateAccSizeDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccessoryMaster_ID", SqlDbType.Int);
                param.Value = AccessoryMaster_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_quality_SizeID", SqlDbType.Int);
                param.Value = accessory_quality_SizeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = SizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }

        public DataTable GetAccSizedetailsNew(int AccMasterID, int Acc_qualityID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = 17;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Acc_qualityID", SqlDbType.Int);
                param.Value = Acc_qualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }
        }
        //END Abhishek
        // Added By Ravi kumar for LinePlanning SAM Entry
        public int Insert_SAMLinePlan(int LinePlanFrameId, int StyleId, double SAM, bool IsActive)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "sp_Insert_SAMLinePlan";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SAM", SqlDbType.Float);
                param.Value = SAM;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Value = IsActive;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        // End By Ravi kumar for LinePlanning SAM Entry

        // Create Plan for or Stitch Pending Date
        public int Create_PlanDate_ByLinePlanFrameID(int LinePlanFrameId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "usp_Create_PlanDate_ByLinePlanFrameID";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                param.Value = LinePlanFrameId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        //public bool CheckDAssociateClintCostingMapping(int ModeID, string ClientMapping, ref string sMessage)
        //{
        //    string result = string.Empty;
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        List<string> IdsCollection = new List<string>();
        //        SqlTransaction transaction = null;


        //        cnx.Open();
        //        transaction = cnx.BeginTransaction();
        //       // SqlDataAdapter adapter = new SqlDataAdapter();

        //        string cmdText = "USP_Check_ModesMapping_InClient_Costing_Default";

        //        SqlCommand cmd = new SqlCommand();
        //        cmd.Transaction = transaction;
        //        cmd.CommandText = cmdText;

        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


        //        SqlParameter param;
        //        param = new SqlParameter("@UpdateClientMapping", SqlDbType.VarChar,500);
        //        param.Value = ClientMapping;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@Modeid", SqlDbType.Int);
        //        param.Value = ModeID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        result = cmd.ExecuteScalar().ToString();

        //        cnx.Close();


        //        return false;
        //    }

        //}

        public bool CheckDAssociateClintCostingMapping(int ModeID, string ClientMapping, ref string sMessage)
        {
            string result = string.Empty;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "USP_Check_ModesMapping_InClient_Costing_Default";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@UpdateClientMapping", SqlDbType.VarChar, 500);
                param.Value = ClientMapping;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Modeid", SqlDbType.Int);
                param.Value = ModeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteScalar().ToString();
                sMessage = result;

                cnx.Close();

                return false;
            }
        }

        // Added By Ravi kumar for get out house factory date(7-aug-18)
        public DataTable GetOutHouseFactory(int FactoryId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 10;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryId", SqlDbType.Int);
                    param.Value = FactoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public string GetSupplierSelectedType(int Supplierid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                string intReturn;
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@supplier_master_Id", SqlDbType.Int);
                param.Value = Supplierid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 20;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter outParam = new SqlParameter();
                outParam = new SqlParameter("@OutReslt", SqlDbType.VarChar, 50);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                cmd.ExecuteNonQuery();
                intReturn = outParam.Value.ToString();
                cnx.Close();
                return intReturn;
            }
        }

        // Added By Ravi kumar on 14-aug-18 for half stitch replica
        public DataTable GetContractDetailsForReplica(int LinePlanFrameId)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    string cmdText = "Usp_GetFactorySpecificLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 11;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlanFrameId", SqlDbType.Int);
                    param.Value = LinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public int InsertReplicaLinePlanning(LinePlan objLinePlan, int BaseLinePlanFrame, int FirstUnitID, int ReplicaUnitId, int FirstLineQty, int ReplicaLineQty, int UserId, ref int FirstLinePlanFrameId, ref int ReplicaLinePlanFrameId)
        {
            int intReturn = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertReplicaLinePlanning";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@BaseLinePlanFrame", SqlDbType.Int);
                    param.Value = BaseLinePlanFrame;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FirstUnitID", SqlDbType.Int);
                    param.Value = FirstUnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReplicaUnitId", SqlDbType.Int);
                    param.Value = ReplicaUnitId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StartDate", SqlDbType.DateTime);
                    param.Value = objLinePlan.StartDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StartSlotID", SqlDbType.Int);
                    param.Value = objLinePlan.StartSlot;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = objLinePlan.StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = objLinePlan.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = objLinePlan.OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ContractQty", SqlDbType.Int);
                    param.Value = objLinePlan.ContractQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitQty", SqlDbType.Int);
                    param.Value = objLinePlan.UnitQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FirstLineQty", SqlDbType.Int);
                    param.Value = FirstLineQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReplicaLineQty", SqlDbType.Int);
                    param.Value = ReplicaLineQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SeqFrameId", SqlDbType.Int);
                    param.Value = objLinePlan.SeqFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsParallel", SqlDbType.Int);
                    param.Value = objLinePlan.IsParallel;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FirstLinePlanFrameId", SqlDbType.Int);
                    param.Value = FirstLinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReplicaLinePlanFrameId", SqlDbType.Int);
                    param.Value = ReplicaLinePlanFrameId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {

                        FirstLinePlanFrameId = Convert.ToInt32(reader["FirstLinePlanFrameId"]);
                        ReplicaLinePlanFrameId = Convert.ToInt32(reader["ReplicaLinePlanFrameId"]);
                    }

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            return intReturn;
        }
        public bool deleteAccQualityMaster(int AccQualityMasterID, int AccMasterID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();

                    transaction = cnx.BeginTransaction();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "Usp_GetAccQualityDetails";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = 21;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                    param.Value = AccMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Acc_qualityID", SqlDbType.Int);
                    param.Value = AccQualityMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    cmd.ExecuteNonQuery();


                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                }
            }

            return false;
        }
        public DataTable GetAccSizeValue(int AccsessMasterID, string sizeName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 22;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccMasterID", SqlDbType.Int);
                param.Value = AccsessMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = sizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dsFaults = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }
        public DataTable GetAccSizeValueSetSizeDelete(int AccsessMasterID, string sizeName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetAccQualityDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.Int);
                param.Value = 25;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accessory_quality_SizeID", SqlDbType.Int);
                param.Value = AccsessMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SizeName", SqlDbType.VarChar);
                param.Value = sizeName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dsFaults = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                return dsFaults;
            }
        }


        public DataSet BindStylecodePlan()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "USP_Get_StyleCount_Break_Down_In_ShipmentReport";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        //abhishek 3/3/2017
        //added by abhishek on 19/18/2018
        public int UpdateIntimeUser(int DeptID, int DesignationID, int UserID, string Intime, int UpdatedBy, DateTime AttendenceDate)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                string cmdText = "UpdateEmployeInTimeOutTime";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "INTIME";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Intime", SqlDbType.VarChar);
                param.Value = Intime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpdatedBy", SqlDbType.Int);
                param.Value = UpdatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttendecnDate", SqlDbType.DateTime);
                param.Value = AttendenceDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();

                cnx.Close();
            }

            return intReturn;

        }
        public int UpdateOuttimetimeUser(int DeptID, int DesignationID, int UserID, string Intime, int UpdatedBy, DateTime AttendenceDate, string ExtraOuttime, string Outtimetime)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                string cmdText = "UpdateEmployeInTimeOutTime";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "OUTIME";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptID", SqlDbType.Int);
                param.Value = DeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Intime", SqlDbType.VarChar);
                param.Value = Intime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UpdatedBy", SqlDbType.Int);
                param.Value = UpdatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AttendecnDate", SqlDbType.DateTime);
                param.Value = AttendenceDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExtraOuttime", SqlDbType.VarChar);
                param.Value = ExtraOuttime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Outtime", SqlDbType.VarChar);
                param.Value = Outtimetime;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
            }

            return intReturn;
        }
        public bool UpdatedealydayCountTask(int StatusMode_id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "USP_Support_Remove_Unwanted_DelayTask";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@StatusMode_id", SqlDbType.Int);
                param.Value = StatusMode_id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return true;
        }
        //abhishek 3/3/2017
        // Added by RSB for checking the unit as inhouse
        public bool getProdctionIDInhouse(string UnitId)
        {
            bool result = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_getProdctionIDInhouse";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UnitId", SqlDbType.VarChar);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dsFaults = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsFaults);
                cnx.Close();
                if (dsFaults.Rows.Count > 0)
                {
                    result = Convert.ToBoolean(dsFaults.Rows[0][0].ToString());
                }
            }
            return result;
        }
        public DataSet attlatecommerc()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Gettoplatecomersoffice";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);



                cnx.Close();
                return dt;
            }
        }

        public DataSet Get_AM_Reports()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "USP_Get_AM_Performance_Report";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }

        public List<string> GetAdminHistory(int typeflag, string FieldName, DateTime FromDate, DateTime ToDate)
        {
            List<string> HistoryList = new List<string>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "usp_GetAdminHistorySection";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                // Set the command type to StoredProcedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@TypeFlag", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = typeflag;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FieldName", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = FieldName;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FromDate", SqlDbType.DateTime);
                param.Direction = ParameterDirection.Input;
                if (FromDate == DateTime.MinValue)
                    param.Value = DBNull.Value;
                else
                    param.Value = FromDate;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ToDate", SqlDbType.DateTime);
                param.Direction = ParameterDirection.Input;
                if (ToDate == DateTime.MinValue)
                    param.Value = DBNull.Value;
                else
                    param.Value = ToDate;
                cmd.Parameters.Add(param);

                SqlDataReader reader = cmd.ExecuteReader();

                string History = "";

                while (reader.Read())
                {
                    History = reader["DetailDescription"].ToString();

                    HistoryList.Add(History);
                }

                cnx.Close();

            }
            return HistoryList;
        }

        public DataSet GetAllQC_And_Checker()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_GetAllQC_And_Checker";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                DataSet dsQC = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsQC);
                cnx.Close();
                return dsQC;
            }
        }
        public DataSet TotalMuliplierFactor_For_Financial_Month()
        {
            IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                cmdText = "sp_GetTotalMuliplierFactor_For_Financial_Month";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                cnx.Close();
                return dt;
            }

        }
        public bool Check_SupplierType(string SupplierName, string SupplyType, int Types, string Intial)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_Check_SuppliType_Validation";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsSupplyType = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                    param.Value = SupplierName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SupplyType", SqlDbType.VarChar);
                    param.Value = SupplyType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Types", SqlDbType.Int);
                    param.Value = Types;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Intial", SqlDbType.VarChar);
                    param.Value = Intial;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsSupplyType);
                    int a = Convert.ToInt32(dsSupplyType.Tables[0].Rows[0]["Permission"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public List<AuditCategory> GetAllAuditCategories(int flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_internal_audit_category";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@flag", SqlDbType.Int);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<AuditCategory> auditcats = new List<AuditCategory>();

                while (reader.Read())
                {
                    AuditCategory category = new AuditCategory();
                    category.Id = Convert.ToInt32(reader["Id"]);
                    category.InternalAuditCatgName = reader["InternalAuditCatgName"].ToString();
                    // category.IsActive = Convert.ToInt16(reader["IsActive"]);
                    //category.LoggedInUser = Convert.ToInt32(reader["CreatedBy"]);

                    auditcats.Add(category);
                }
                reader.Close();
                return auditcats;
            }

        }

        public DataTable GetAuditCategoryDetails(int CategoryId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_internal_audit_category_details";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CategoryId", SqlDbType.Int);
                param.Value = CategoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable auditCategoryDetail = new DataTable();
                auditCategoryDetail.Load(reader);

                reader.Close();
                return auditCategoryDetail;
            }

        }

        public DataTable GetInternalAudit(int CategoryId, int UnitId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_internal_monthly_audit";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CategoryId", SqlDbType.Int);
                param.Value = CategoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable internalAudit = new DataTable();
                internalAudit.Load(reader);

                reader.Close();
                return internalAudit;
            }

        }

        public DataTable GetAllMonthlyAudit(int CategoryId, int UnitId, int Month, int Year)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_internal_audit_report";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@CategoryId", SqlDbType.Int);
                param.Value = CategoryId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Month", SqlDbType.Int);
                param.Value = Month;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Year", SqlDbType.Int);
                param.Value = Year;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable internalAudit = new DataTable();
                internalAudit.Load(reader);

                reader.Close();
                return internalAudit;
            }

        }

        public DataTable GetAuditorsByCatgQusId(int catgQusId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_auditor";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@CategoryQusId", SqlDbType.Int);
                param.Value = catgQusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable auditor = new DataTable();
                auditor.Load(reader);

                reader.Close();
                return auditor;
            }

        }

        public DataTable GetFileDetailsByInternalMonthlyAudId_New(int Id, int UnitId, int Month, int Year)  //modified 31-05-2021
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_InternalAuditImages";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InternalMonthlyAuditId", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Month", SqlDbType.Int);
                param.Value = Month;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Year", SqlDbType.Int);
                param.Value = Year;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable internalAuditImages = new DataTable();
                internalAuditImages.Load(reader);

                reader.Close();
                return internalAuditImages;
            }

        }

        public DataTable GetFileDetailsByInternalMonthlyAudId(int Id, int UnitId)  //modified 31-05-2021
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_InternalAuditImages";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "SELECT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@InternalMonthlyAuditId", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                DataTable internalAuditImages = new DataTable();
                internalAuditImages.Load(reader);

                reader.Close();
                return internalAuditImages;
            }

        }

        public int UploadFileInternalAudit(int Id, string fileName, int UnitId)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_InternalAuditImages";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@InternalMonthlyAuditId", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FileName", SqlDbType.VarChar);
                param.Value = fileName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "INSERT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }

        public int SaveInternalMonthlyAudit(InternalMonthlyAudit monthlyAudit)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_internal_monthly_audit";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CategoryQuesId", SqlDbType.Int);
                param.Value = monthlyAudit.CategoryQuesId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = monthlyAudit.UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                if (monthlyAudit.MonthlyStatus != null)
                {
                    param = new SqlParameter("@MonthlyStatus", SqlDbType.Bit);
                    param.Value = Convert.ToInt32(monthlyAudit.MonthlyStatus);
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                }

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "INSERT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@CAP_Duration", SqlDbType.DateTime);
                if (monthlyAudit.CapDuration == DateTime.MinValue)
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = monthlyAudit.CapDuration;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@cap", SqlDbType.VarChar);
                param.Value = monthlyAudit.Cap;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Observation", SqlDbType.VarChar);
                param.Value = monthlyAudit.Observation;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AuditBy", SqlDbType.VarChar);
                param.Value = monthlyAudit.AuditBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = monthlyAudit.CreatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }

        public int SaveAuditors(iKandi.Common.Auditor auditor)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_auditor";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@CategoryQusId", SqlDbType.Int);
                param.Value = auditor.CategoryQusId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = auditor.UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = "INSERT";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return result;
        }

        public int CreateAuditCategory(AuditCategory category)
        {
            int auditcategoryid = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_internal_audit_category";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;

                    paramOut = new SqlParameter("@AuditCategoryId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "INSERT";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@InternalAuditCatgName", SqlDbType.VarChar);
                    param.Value = category.InternalAuditCatgName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreatedBy", SqlDbType.VarChar);
                    param.Value = category.CreatedBy;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    if (paramOut.Value != DBNull.Value)
                    {
                        auditcategoryid = Convert.ToInt32(paramOut.Value);
                    }
                    else
                    {
                        auditcategoryid = -1;
                    }
                    category.Id = auditcategoryid;

                    cnx.Close();

                    return auditcategoryid;
                }
                catch
                {
                    auditcategoryid = -1;
                    return auditcategoryid;
                }
            }
        }
        public int CreateAuditCategoryDetails(AuditCategoryDetails category)
        {
            int auditcategoryid = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_internal_audit_category_details";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter paramOut;

                    paramOut = new SqlParameter("@AuditCategoryQuesId", SqlDbType.Int);
                    paramOut.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramOut);

                    SqlParameter param;

                    param = new SqlParameter("@status", SqlDbType.VarChar);
                    param.Value = "INSERT";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@QuestionName", SqlDbType.VarChar);
                    param.Value = category.QuestionName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CategoryId", SqlDbType.Int);
                    param.Value = category.CategoryId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = category.DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = category.DesignationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                    param.Value = Convert.ToInt32(category.CreatedBy);
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    if (paramOut.Value != DBNull.Value)
                    {
                        auditcategoryid = Convert.ToInt32(paramOut.Value);
                    }
                    else
                    {
                        auditcategoryid = -1;
                    }
                    category.CategoryQuesId = auditcategoryid;

                    cnx.Close();

                    return auditcategoryid;
                }
                catch
                {
                    auditcategoryid = -1;
                    return auditcategoryid;
                }
            }
        }

        public DataSet GetAllMonthYear()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                // Create a SQL command object
                string cmdText = "sp_get_month_year_internal_audit";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                cnx.Close();
                return ds;
            }
        }
        public int InsertSupplierProcess(int SupplierMasterID, string BasicType, string SupplyType, string Process, string flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_InserUpdateSupplierDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@SuppliarMasterId", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BasicType", SqlDbType.VarChar);
                param.Value = BasicType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@SupplyType", SqlDbType.VarChar);
                if (SupplyType == "")
                    param.Value = DBNull.Value;
                else
                    param.Value = SupplyType;

                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Process", SqlDbType.VarChar);
                if (Process == "")
                    param.Value = DBNull.Value;
                else
                    param.Value = Process;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                intReturn = cmd.ExecuteNonQuery();



                cnx.Close();
                return intReturn;
            }
        }

        public DataTable GetQCAdmin(string SearchText)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_QCAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "GetQCAdmin";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchText", SqlDbType.VarChar);
                param.Value = SearchText;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataTable dtQC = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtQC);
                return dtQC;
            }
        }

        public int SaveQCAdmin(int QCId, string QCName, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_QCAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@QCId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = QCId; ;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@QCName", SqlDbType.VarChar);
                param.Value = QCName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();
            }
            return Isave;
        }


        public DataSet GetCollectionAdmin(string SearchText)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_Collection_Admin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "GetCollectionAdmin";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchText", SqlDbType.VarChar);
                param.Value = SearchText;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }


        public DataSet GetMarketingAdmin(string SearchText)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_MarketingAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "GetMarketingAdmin";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchText", SqlDbType.VarChar);
                param.Value = SearchText;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }

        public DataSet GetLineManAdmin(string SearchText, int LineManType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_LineManAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = "GetLineManAdmin";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchText", SqlDbType.VarChar);
                param.Value = SearchText;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineManType", SqlDbType.Int);
                param.Value = LineManType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }

        public int SaveCollectionMarketingAdmin1(int hdnId, string CollectionName, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_Collection_Admin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.Int);
                param.Value = hdnId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CollectionName", SqlDbType.VarChar);
                param.Value = CollectionName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }

        //public int SaveFabCampMarketingAdmin1(int hdnId, string FabCompName, bool IsActive, string Flag, int UserId)
        //{
        //    int Isave = 0;
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        const string cmdText = "Usp_Fabric_Composition_Admin";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);

        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@Flag", SqlDbType.VarChar);
        //        param.Value = Flag;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@Id", SqlDbType.Int);
        //        param.Value = hdnId;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@CompositionName", SqlDbType.VarChar);
        //        param.Value = FabCompName;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);


        //        param = new SqlParameter("@IsActive", SqlDbType.Bit);
        //        param.Direction = ParameterDirection.Input;
        //        param.Value = IsActive;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@UserId", SqlDbType.Int);
        //        param.Direction = ParameterDirection.Input;
        //        param.Value = UserId;
        //        cmd.Parameters.Add(param);

        //        Isave = cmd.ExecuteNonQuery();

        //    }
        //    return Isave;
        //}

        //public int SaveFabCampMarketingAdmin(string FabCompName, bool IsActive, string Flag, int UserId)
        //{
        //    int Isave = 0;
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        const string cmdText = "Usp_Fabric_Composition_Admin";
        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);

        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@Flag", SqlDbType.VarChar);
        //        param.Value = Flag;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@CompositionName", SqlDbType.VarChar);
        //        param.Value = FabCompName;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);


        //        param = new SqlParameter("@IsActive", SqlDbType.Bit);
        //        param.Direction = ParameterDirection.Input;
        //        param.Value = IsActive;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@UserId", SqlDbType.Int);
        //        param.Direction = ParameterDirection.Input;
        //        param.Value = UserId;
        //        cmd.Parameters.Add(param);

        //        Isave = cmd.ExecuteNonQuery();

        //    }
        //    return Isave;
        //}

        public int SaveMarketingAdmin1(int hdnId, string MarketingName, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_MarketingAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.Int);
                param.Value = hdnId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TagName", SqlDbType.VarChar);
                param.Value = MarketingName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }

        public int SaveCollectionMarketingAdmin(string CollectionName, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_Collection_Admin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CollectionName", SqlDbType.VarChar);
                param.Value = CollectionName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }



        public int SaveMarketingAdmin(string MarketingName, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_MarketingAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TagName", SqlDbType.VarChar);
                param.Value = MarketingName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }

        public int SaveLineManAdmin(string LineManName, string LineManType, bool IsActive, string Flag, int UserId)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_LineManAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LineManName", SqlDbType.VarChar);
                param.Value = LineManName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@LineManType", SqlDbType.VarChar);
                param.Direction = ParameterDirection.Input;
                param.Value = LineManType;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsActive", SqlDbType.Bit);
                param.Direction = ParameterDirection.Input;
                param.Value = IsActive;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = UserId;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }

        public DataTable GetLineDesignation(string DesignationType)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_BindLineDesignation";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@DesignationType", SqlDbType.VarChar);
                param.Value = DesignationType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }


        public DataSet GetProductionDetails(string Type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "USP_Get_MonthWiseValue_BIPLEfficiency";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }

        //added by raghvinder on 26th feb 2020 start
        public DataSet GetIncentiveScore()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_MonthlyFactorywiseIncentiveScore";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }
        //added by raghvinder on 26th feb 2020 end
        //added by Bharat on 18th Mar 2020 startfont-size: 15px;
        public DataSet GetIncentiveScoreSampling()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_MonthlyFactorywiseIncentiveScore";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }
        public DataSet GetIncentiveScoreAmPerformnce()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_MonthlyFactorywiseIncentiveScore";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }
        //added by Bharat on 19th Mar 2020
        public DataTable GetInhouseQCName()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_get_all_InhouseQCName";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }

        public DataTable GetInhouseQCUnit()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_get_all_InhouseUnits";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }
        public DataTable GetInhouseQCLineNo(int UnitValue)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_Get_LineNo_ByUnit";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }
        public DataTable GetInhouseQCCluster(int UnitId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "usp_get_all_InhouseCluster";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }

        public int RoamingQcEntryFunt(int QcNameValue, int UnitValue, int Lineval, int ClusVal)
        {
            int Isave = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                const string cmdText = "Usp_Insert_RoamingQCAdmin";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@QCid", SqlDbType.Int);
                param.Value = QcNameValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Unitid", SqlDbType.Int);
                param.Value = UnitValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@LineNo", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = Lineval;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClusterNo", SqlDbType.Int);
                param.Direction = ParameterDirection.Input;
                param.Value = ClusVal;
                cmd.Parameters.Add(param);

                Isave = cmd.ExecuteNonQuery();

            }
            return Isave;
        }
        public DataTable GetGridViewData()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                const string cmdText = "Usp_SelectGrd_RoamingQCAdmin";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);
                return dt;
            }
        }

        #region Suplyer sign by sanjeev
        public int PartySignBySupplier(int PO_Id, int UserID, string type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                int intReturn;
                cnx.Open();
                string cmdText = "Usp_PartySignBySupplier";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@PO_Id", SqlDbType.Int);
                param.Value = PO_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                intReturn = cmd.ExecuteNonQuery();
                cnx.Close();
                return intReturn;
            }
        }
        #endregion

        //Added by Girish
        public DataSet GetMaterialReport(string flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "";

                if (        flag == "Fabric_PO_Detail"                                      || 
                            flag == "Fabric_PO_Supplier_Summary"                            || 
                            flag == "Fabric_Supplier_summary"                               || 
                            flag == "Accessory_PO_Detail"                                   || 
                            flag == "Accessory_PO_Supplier_Summary"                         || 
                            flag == "Accessory_Supplier_summary"                            || 
                            flag == "Cut Issue Status"                                      || 
                            flag == "Accessory_Issued_Quantity"                             || 
                            flag == "Fabric_Daily_Report"                                   || 
                            flag == "Accessory_Daily_Report"                                || 
                            flag == "Production Stock Detail"                               || 
                            flag == "Daily Fabric Movement"                                 || 
                            flag == "Stock Summary Excel"                                   || 
                            flag == "Stock Summary Mail"                                    ||
                            flag == "Rates"                                                 ||
                            flag == "Daily Accessory Movement"                              ||
                            flag == "Stock Summary Mail_A"                                  ||
                            flag == "Stock Summary Excel_A"



                    )
                {   cmdText = "Usp_GetMaterialExcelReport"; }

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;
                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dt = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                cnx.Close();
                return dt;
            }
        }
 
    }
}
