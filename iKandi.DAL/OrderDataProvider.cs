using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using iKandi.Common;
using System.Data.SqlClient;
using System.Data;
using System.Web;
using iKandi.Common.Entities;
using System.IO;

using System.Net;
using System.Net.Mail;
using System.Reflection;

namespace iKandi.DAL
{
    public class OrderDataProvider : BaseDataProvider
    {
        #region Ctor(s)

        public OrderDataProvider(SessionInfo LoggedInUser)
            : base(LoggedInUser)
        {
        }

        #endregion

        public bool InsertOrder(Order order)
        {
            int orderID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;
                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_orders_insert_order";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@d", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    SqlParameter param;

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = order.Style.StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = order.Style.client.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDate", SqlDbType.DateTime);
                    param.Value = order.OrderDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                    param.Value = order.SerialNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Description", SqlDbType.VarChar);
                    param.Value = order.Description;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentDepartmentId", SqlDbType.Int);
                    param.Value = order.Costing.ParentDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    param.Value = order.Style.cdept.DeptID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Comments", SqlDbType.VarChar);
                    param.Value = order.Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesIkandi", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesIkandi;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManager", SqlDbType.Bit);
                    param.Value = order.ApprovedByMerchandiserManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPL", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesBIPL;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@ApprovedByMerchandiserManagerOn", SqlDbType.DateTime);
                    //if (order.ApprovedByMerchandiserManagerOn != DateTime.MinValue)
                    //{
                    //    param.Value = order.ApprovedByMerchandiserManagerOn;
                    //}
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    //param = new SqlParameter("@ApprovedBySalesBIPLOn", SqlDbType.DateTime);
                    //if (order.ApprovedBySalesBIPLOn != DateTime.MinValue)
                    //{
                    //    param.Value = order.ApprovedBySalesBIPLOn;
                    //}
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@nvoiceLocation", SqlDbType.VarChar);
                    if (order.InvoiceLocation != null)
                    {
                        param.Value = order.InvoiceLocation;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    // param.Value = order.InvoiceLocation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@BiplPrice", SqlDbType.Float);
                    //param.Value = order.BiplPrice;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@CostingID", SqlDbType.Int);
                    param.Value = order.Costing.CostingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfPacking", SqlDbType.Int);
                    param.Value = order.TypeOfPacking;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    orderID = Convert.ToInt32(outParam.Value);

                    if (orderID == -1)
                        return false;

                    order.OrderID = orderID;

                    if (order.OrderID > 0)
                    {
                        if (null != order.OrderBreakdown && order.OrderBreakdown.Count > 0)
                        {
                            foreach (OrderDetail orderDetail in order.OrderBreakdown)
                            {
                                if (orderDetail.OrderDetailID == -1 && orderDetail.isDeleted == 0)
                                {
                                    orderDetail.OrderID = order.OrderID;
                                    orderDetail.MerchantNotes = order.Comments;
                                    int orderDetailId = InsertOrderDetail(orderDetail, cnx, transaction);
                                    orderDetail.OrderDetailID = orderDetailId;
                                    if (orderDetailId > 0)
                                    {
                                        if (null != orderDetail.OrderSizes && orderDetail.OrderSizes.Count > 0)
                                        {
                                            foreach (OrderDetailSizes orderDetailSizes in orderDetail.OrderSizes)
                                            {
                                                if (orderDetailSizes.OrderDetailSizeID == -1 && orderDetailSizes.Size != "")
                                                {
                                                    orderDetailSizes.OrderDetailID = orderDetail.OrderDetailID;
                                                    InsertOrderDetailSize(orderDetailSizes, cnx, transaction);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }

        }


        public bool UpdateSketch(int Orderdetailid, String imagepath, int id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;



                cmdText = "UpdateSketchCutAvg";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@orderDetailid", SqlDbType.Int);
                param.Value = Orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@imagepath", SqlDbType.VarChar);
                param.Value = imagepath;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                int i = cmd.ExecuteNonQuery();
                if (i > 0)
                    return true;
                else
                    return false;

            }

        }
        public bool Update_AccountMangerID(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;



                cmdText = "Update_AccountManger_ID";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                int i = cmd.ExecuteNonQuery();
                if (i > 0)
                    return true;
                else
                    return false;

            }

        }



        public string GetSketch(int Orderdetailid, String imagepath, int id)
        {
            string image = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;


                DataSet ds = new DataSet();
                cmdText = "GETSketchCutAvg";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@orderDetailid", SqlDbType.Int);
                param.Value = Orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@imagepath", SqlDbType.VarChar);
                param.Value = imagepath;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@id", SqlDbType.Int);
                param.Value = id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                image = ds.Tables[0].Rows[0]["cut_AvgFile"].ToString() + "#" + ds.Tables[0].Rows[0]["StcAvergage"].ToString() + "#" + ds.Tables[0].Rows[0]["CutWidth"].ToString();

            }

            return image;

        }



        public DataSet GetSizeCont(int OrderID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_size_Count_ById";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        public List<OrderDetailSizes> GetOrderDetailSizeById(int OrderDetailID, int OdId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;


                cmdText = "sp_order_detail_size_get_order_detail_sizeById";
                //cmdText = "SELECT B.* FROM (SELECT Size, (SELECT COUNT(*) FROM order_detail_size I WHERE I.OrderDetailID=" + OrderDetailID + " AND I. Quantity>0 AND I.Size <= A.Size) AS RowINT FROM order_detail_size A WHERE OrderDetailID=" + OrderDetailID + " AND quantity >0) A LEFT JOIN (SELECT *, (SELECT COUNT(*) FROM order_detail_size I WHERE I.OrderDetailID=" + OdId + " AND I. Quantity>0 AND I.Size <= A.Size) AS RowINT FROM order_detail_size A WHERE OrderDetailID=" + OdId + " AND quantity >0) B ON A.RowInt = B.RowInt ORDER BY A.RowInt ;";

                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OdId", SqlDbType.Int);
                param.Value = OdId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@OrderCount", SqlDbType.Int);
                //param.Value = OrderCount;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<OrderDetailSizes> orderDetailSizeCollection = new List<OrderDetailSizes>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetailSizes orderDetailSize = new OrderDetailSizes();
                        orderDetailSize.OrderDetailID = (reader["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["OrderDetailID"]);
                        orderDetailSize.Size = (reader["Size"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Size"]);
                        //orderDetailSize.Size = (reader["OrderSize"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["OrderSize"]);

                        orderDetailSize.Quantity = (reader["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Quantity"]);
                        if (orderDetailSize.Quantity == 0)
                            orderDetailSize.QuantityString = "";
                        else orderDetailSize.QuantityString = Convert.ToString(reader["Quantity"]);

                        int RatioPack = reader.GetOrdinal("RatioPack");
                        int Ratio = reader.GetOrdinal("Ratio");
                        int Singles = reader.GetOrdinal("Singles");
                        if (reader.IsDBNull(RatioPack) == false)
                        {
                            orderDetailSize.RatioPack = (reader["RatioPack"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["RatioPack"]);
                        }
                        else
                        {
                            orderDetailSize.RatioPack = 0;
                        }
                        if (orderDetailSize.RatioPack == 0)
                            orderDetailSize.RatioPackString = "";
                        else orderDetailSize.RatioPackString = Convert.ToString(reader["RatioPack"]);

                        if (reader.IsDBNull(Ratio) == false)
                        {
                            orderDetailSize.Ratio = (reader["Ratio"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Ratio"]);
                        }
                        else
                        {
                            orderDetailSize.Ratio = 0;
                        }
                        if (orderDetailSize.Ratio == 0)
                            orderDetailSize.RatioString = "";
                        else orderDetailSize.RatioString = Convert.ToString(reader["Ratio"]);


                        if (reader.IsDBNull(Singles) == false)
                        {
                            orderDetailSize.Singles = (reader["Singles"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Singles"]);
                        }
                        else
                        {
                            orderDetailSize.Singles = 0;
                        }
                        if (orderDetailSize.Singles == 0)
                            orderDetailSize.SinglesString = "";
                        else orderDetailSize.SinglesString = Convert.ToString(reader["Singles"]);

                        //orderDetailSize.Singles = (orderDetailSize.Singles != DBNull.Value) ? Convert.ToInt32(reader["Singles"]) : 0; 
                        orderDetailSize.OrderDetailSizeID = (reader["OrderDetailSizeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["OrderDetailSizeID"]);

                        orderDetailSizeCollection.Add(orderDetailSize);
                    }
                }

                return orderDetailSizeCollection;
            }
        }


        //Add by Surendra2 on 10-05-2018..
        public bool Update_Old_Style(int StyleId, int OrderId, int NewStyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_Update_Old_Style";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewStyleId", SqlDbType.Int);
                    param.Value = NewStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    int i = cmd.ExecuteNonQuery();
                    cnx.Close();

                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    return false;
                }
            }
        }

        // Update By Ravi kumar on 11/8/15 For add style from order

        // Update By Ravi kumar on 3/4/18 for order form

        public bool InsertOrder(Order order, int User, ref int NewOrderId, int IsRepeatWithChanges)
        {
            int orderID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;
                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_orders_insert_order";
                    SqlCommand cmd = base.SqlCommand(cmdText, cnx, QueryType.Insert);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@d", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);
                    SqlParameter param;

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = order.Style.StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = order.Style.client.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDate", SqlDbType.DateTime);
                    param.Value = order.OrderDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                    param.Value = order.SerialNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Description", SqlDbType.VarChar);
                    param.Value = order.Description;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentDepartmentId", SqlDbType.Int);
                    param.Value = order.Costing.ParentDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    param.Value = order.Style.cdept.DeptID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Comments", SqlDbType.VarChar);
                    param.Value = order.Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesIkandi", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesIkandi;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManager", SqlDbType.Bit);
                    param.Value = order.ApprovedByMerchandiserManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPL", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesBIPL;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@nvoiceLocation", SqlDbType.VarChar);
                    if (order.InvoiceLocation != null)
                    {
                        param.Value = order.InvoiceLocation;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    //param.Value = order.InvoiceLocation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@BiplPrice", SqlDbType.Float);
                    //param.Value = order.BiplPrice;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@CostingID", SqlDbType.Int);
                    param.Value = order.Costing.CostingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfPacking", SqlDbType.Int);
                    param.Value = order.TypeOfPacking;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsRepeatWithChanges", SqlDbType.Bit);
                    param.Value = IsRepeatWithChanges;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BaseStyle", SqlDbType.VarChar);
                    if (order.BaseStyle == null)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = order.BaseStyle;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    //abhishek 1/10/2016

                    param = new SqlParameter("@OrderType", SqlDbType.Int);
                    param.Value = order.OrderTypes;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OutHousePrice", SqlDbType.Float);
                    if (order.OrderTypes == 2)
                    {
                        param.Value = order.OutHousePrice;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //Edit By Prabhaker 19-jun-18
                    param = new SqlParameter("@ApprovedByMerchandiserManagerOn", SqlDbType.DateTime);
                    if (order.ApprovedByMerchandiserManagerOn != DateTime.MinValue)
                    {
                        param.Value = order.ApprovedByMerchandiserManagerOn;
                    }

                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPLOn", SqlDbType.DateTime);
                    if (order.ApprovedBySalesBIPLOn != DateTime.MinValue)
                    {
                        param.Value = order.ApprovedBySalesBIPLOn;
                    }

                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //end of Code

                    cmd.ExecuteNonQuery();

                    orderID = Convert.ToInt32(outParam.Value);

                    if (orderID == -1)
                        return false;

                    order.OrderID = orderID;
                    NewOrderId = orderID;

                    if (order.OrderID > 0)
                    {
                        if (null != order.OrderBreakdown && order.OrderBreakdown.Count > 0)
                        {
                            foreach (OrderDetail orderDetail in order.OrderBreakdown)
                            {
                                if (orderDetail.OrderDetailID == -1 && orderDetail.isDeleted == 0)
                                {
                                    orderDetail.OrderID = order.OrderID;
                                    orderDetail.MerchantNotes = order.Comments;
                                    int orderDetailId = InsertOrderDetail(orderDetail, cnx, transaction);
                                    // bCheckExistOrderSam = bCheckOrderSam(orderDetail, cnx, transaction);
                                    orderDetail.OrderDetailID = orderDetailId;
                                    if (orderDetailId > 0)
                                    {
                                        if (null != orderDetail.OrderSizes && orderDetail.OrderSizes.Count > 0)
                                        {
                                            foreach (OrderDetailSizes orderDetailSizes in orderDetail.OrderSizes)
                                            {
                                                if (orderDetailSizes.OrderDetailSizeID == -1 && orderDetailSizes.Size != "")
                                                {
                                                    orderDetailSizes.OrderDetailID = orderDetail.OrderDetailID;
                                                    if (orderDetailSizes.Quantity > 0)
                                                    {
                                                        InsertOrderDetailSize(orderDetailSizes, cnx, transaction);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }
        }

        public bool bCheckOrderSam(OrderDetail orderDetail, SqlConnection cnx, SqlTransaction transaction)
        {
            string cmdText = "sp_CheckOrderSam";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            DataSet dsCheckExistFabric = new DataSet();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = orderDetail.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
            adapter.Fill(dsCheckExistFabric);
            int a = Convert.ToInt32(dsCheckExistFabric.Tables[0].Rows[0]["IsCheckOrderSam"]);
            if (a == 1)
            {
                return true;
            }
            else
            {
                return false;
            }


        }

        public bool ExfactoryPermission(int UserID, int ExfactoryCoulme)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_Check_Exfactory_Permission";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExfactoryPermission = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@UserID", SqlDbType.Int);
                    param.Value = UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ExfactoryCoulme", SqlDbType.Int);
                    param.Value = ExfactoryCoulme;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExfactoryPermission);
                    int a = Convert.ToInt32(dsCheckExfactoryPermission.Tables[0].Rows[0]["Permission"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool QCUploadFaultsSubmit(int UserID, int UploadFaultSubmit)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_Check_QCSumitPermission";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExfactoryPermission = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@UserID", SqlDbType.Int);
                    param.Value = UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UploadFaultSubmit", SqlDbType.Int);
                    param.Value = UploadFaultSubmit;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExfactoryPermission);
                    int a = Convert.ToInt32(dsCheckExfactoryPermission.Tables[0].Rows[0]["Permission"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool USP_GetValidationUniqueEntry(string TotalFilePath, int StyleID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "USP_GetValidationUniqueEntry";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExfactoryPermission = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@TotalPath", SqlDbType.VarChar);
                    param.Value = TotalFilePath;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Styleid", SqlDbType.Int);
                    param.Value = StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExfactoryPermission);
                    int a = Convert.ToInt32(dsCheckExfactoryPermission.Tables[0].Rows[0]["Exist"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool CheckShippedOrder(int OrderDetailID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_Check_ShippedOrder";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExfactoryPermission = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExfactoryPermission);
                    int a = Convert.ToInt32(dsCheckExfactoryPermission.Tables[0].Rows[0]["Shipped"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool CheckCutting_QtyAbove90_Percent(int OrderDetailID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_Check_Cutting_Qty";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExfactoryPermission = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExfactoryPermission);
                    int a = Convert.ToInt32(dsCheckExfactoryPermission.Tables[0].Rows[0]["Cutting"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool CheckValidationForCutIssue(int OrderDetailsId, int ReAllocationId, int TdyCutIssueOutHouse)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "Usp_Validation_CutIssue";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckCutIssues = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = OrderDetailsId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReallocationID", SqlDbType.Int);
                    param.Value = ReAllocationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TotalCutIssue", SqlDbType.Int);
                    param.Value = TdyCutIssueOutHouse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckCutIssues);
                    int a = Convert.ToInt32(dsCheckCutIssues.Tables[0].Rows[0]["Validation"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool bCheckOB(int OrderID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_CheckOBValueForSalesManager";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckExistFabric = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckExistFabric);
                    int a = Convert.ToInt32(dsCheckExistFabric.Tables[0].Rows[0]["FinalOB"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public bool bCheckOrderIsShipped(int OrderDetailID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "sp_CheckOrderIsShipped";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    DataSet dsCheckIsShiped = new DataSet();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsCheckIsShiped);
                    int a = Convert.ToInt32(dsCheckIsShiped.Tables[0].Rows[0]["Isshiped"]);
                    if (a == 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        // update by ravi kumar on 17/8/2015 for Days, line, AvailMins, PCD update on new order
        public bool CalculatePCD_InsertOrder(int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "usp_Efficiency_PCD_Call";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    int i = cmd.ExecuteNonQuery();

                    //transaction.Commit();
                    cnx.Close();

                }
                catch (Exception ex)
                {
                    throw ex;
                }
                return true;
            }

        }

        // Create by ravi kumar on 4/11/2015 for Days, line, AvailMins, PCD update on update order
        public bool CalculatePCD_UpdateOrder(int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    string cmdText = "usp_UpdateOrderDetail_PCD";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    int i = cmd.ExecuteNonQuery();

                    //transaction.Commit();
                    cnx.Close();

                }
                catch (Exception ex)
                {
                    throw ex;
                }
                return true;
            }
        }

        // Update By Ravi kumar on 3/4/18 for order form
        public int InsertOrderDetail(OrderDetail orderDetail, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_insert_order_detail";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter outParam;

            outParam = new SqlParameter("@d", SqlDbType.Int);
            outParam.Direction = ParameterDirection.Output;
            cmd.Parameters.Add(outParam);

            SqlParameter param;

            param = new SqlParameter("@LineItemNumber", SqlDbType.VarChar);
            param.Value = orderDetail.LineItemNumber;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ContractNumber", SqlDbType.VarChar);
            param.Value = orderDetail.ContractNumber;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //param = new SqlParameter("@Description", SqlDbType.VarChar);
            //param.Value = orderDetail.Description;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            //param = new SqlParameter("@File1", SqlDbType.VarChar);
            //param.Value = orderDetail.File1;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            //param = new SqlParameter("@File2", SqlDbType.VarChar);
            //param.Value = orderDetail.File2;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);
            //param = new SqlParameter("@File3", SqlDbType.VarChar);
            //param.Value = orderDetail.File3;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);
            //param = new SqlParameter("@File4", SqlDbType.VarChar);
            //param.Value = orderDetail.File4;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);


            param = new SqlParameter("@Fabric1", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric1.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric1Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric1Details.Trim(); ;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric2", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric2.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric2Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric2Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric3", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric3.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric3Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric3Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric4", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric4.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric4Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric4Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Quantity", SqlDbType.Int);
            param.Value = orderDetail.Quantity;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderID", SqlDbType.Int);
            param.Value = orderDetail.OrderID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Mode", SqlDbType.Int);
            param.Value = orderDetail.Mode;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ModeName", SqlDbType.VarChar);
            if (orderDetail.ModeName != null)
            {
                param.Value = orderDetail.ModeName;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@hdnCostingId", SqlDbType.Int);
            param.Value = orderDetail.hdnCostingId;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@KandiPrice", SqlDbType.Float);
            param.Value = orderDetail.iKandiPrice;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //Added by Ravi kumar on 30-3-18 for BIPL price contract wise
            param = new SqlParameter("@BIPLPrice", SqlDbType.Float);
            param.Value = orderDetail.odBIPLPrice;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);
            //End adding

            param = new SqlParameter("@ExFactory", SqlDbType.DateTime);
            param.Value = orderDetail.ExFactory;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@WeekToEx", SqlDbType.Int);
            param.Value = orderDetail.WeekToEx;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@DC", SqlDbType.DateTime);
            param.Value = orderDetail.DC;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@WeeksToDC", SqlDbType.Int);
            param.Value = orderDetail.WeeksToDC;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@STCAllocated", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@STCUnallocated", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@nlineCut", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@CuttingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@StitchingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ExFactoryPlanned", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ApprovedToExFactory", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@PackingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BulkTarget", SqlDbType.DateTime);
            param.Value = orderDetail.BulkTarget;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@LabDipTarget", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BulkApprovalTarget", SqlDbType.DateTime);
            param.Value = orderDetail.BulkApprovalTarget;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@sAirFabric1", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric1;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@sAirFabric2", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric2;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@sAirFabric3", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric3;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@sAirFabric4", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric4;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@MerchantNotes", SqlDbType.VarChar);
            if (orderDetail.MerchantNotes != null)
            {
                param.Value = orderDetail.MerchantNotes;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);
            //param = new SqlParameter("@MerchantNotes", SqlDbType.VarChar);
            //param.Value = orderDetail.MerchantNotes;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            param = new SqlParameter("@AFabric1", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric1;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@AFabric2", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric2;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@AFabric3", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric3;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@AFabric4", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric4;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //manisha on 1 march 2011
            param = new SqlParameter("@UniqueId", SqlDbType.VarChar);
            param.Value = orderDetail.HdnDetailType;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //Added By Ashish on 14/11/2014 for Save SizeOption
            param = new SqlParameter("@SizeOption", SqlDbType.Int);
            //if (string.IsNullOrEmpty(orderDetail.SizeOption))
            if (orderDetail.SizeOption != 0)
            {
                param.Value = orderDetail.SizeOption;
            }
            else
            {
                param.Value = 0;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //// Update by Ravi kumar on 18/12/2014
            //param = new SqlParameter("@IsPCdateChange", SqlDbType.Int);
            //param.Value = orderDetail.IsPCdateChange;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);
            ////End Update by Ravi kumar on 18/12/2014

            //// Add By Ravi kumar on 19/12/2014
            //param = new SqlParameter("@AfterUpdation", SqlDbType.Int);
            //param.Value = AfterUpdate;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            int orderDetailID = Convert.ToInt32(outParam.Value);
            // schedulerRun(orderDetail.hdnCostingId, DateTime.MinValue, DateTime.MinValue, -1, 1, 15, 0, 18, 4, 1, 2, 3, "", 0, -1);
            return orderDetailID;

        }

        public int InsertOrderDetailFromExistingRow(int OrderDetailID, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_insert_order_detail_from_existing_row";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter outParam;

            outParam = new SqlParameter("@Id", SqlDbType.Int);
            outParam.Direction = ParameterDirection.Output;
            cmd.Parameters.Add(outParam);

            SqlParameter param;

            param = new SqlParameter("@OrderDetailID", SqlDbType.VarChar);
            param.Value = OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            int orderDetailID = Convert.ToInt32(outParam.Value);

            return orderDetailID;
        }


        public bool InsertOrderDetailSize(OrderDetailSizes orderDetailSize, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_size_insert_order_detail_size";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = orderDetailSize.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Size", SqlDbType.VarChar);
            param.Value = orderDetailSize.Size;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Quantity", SqlDbType.Int);
            param.Value = orderDetailSize.Quantity;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Singles", SqlDbType.Int);
            if (orderDetailSize.Singles != null)
            {
                param.Value = orderDetailSize.Singles;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);


            param = new SqlParameter("@RatioPack", SqlDbType.Int);
            if (orderDetailSize.RatioPack.HasValue)
            {
                param.Value = orderDetailSize.RatioPack;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Ratio", SqlDbType.Int);
            if (orderDetailSize.RatioPack.HasValue)
            {
                param.Value = orderDetailSize.Ratio;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            return true;
        }

        // Update by Ravi kumar on 27/1/2015 For Limitation Form
        public bool InsertOrderLimitation(OrderLimitation orderLimitation)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_order_limitation_insert_order_limitation";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx, transaction);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@d", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderLimitation.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@FabricComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.FabricComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.AccessoriesComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@MerchandisingComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.MerchandisingComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@kandiComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.IkandiComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.FabricApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricApprovedOn", SqlDbType.DateTime);
                    if ((orderLimitation.FabricApprovedOn == DateTime.MinValue) || (orderLimitation.FabricApprovedOn == Convert.ToDateTime("1753-01-01")) || (orderLimitation.FabricApprovedOn == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.FabricApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.AccessoriesApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesApprovedOn", SqlDbType.DateTime);
                    if ((orderLimitation.AccessoriesApprovedOn == DateTime.MinValue) || (orderLimitation.AccessoriesApprovedOn == Convert.ToDateTime("1753-01-01")) || (orderLimitation.AccessoriesApprovedOn == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.AccessoriesApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@MerchandisingApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.MerchandisingApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MerchandisingApprovedOn", SqlDbType.DateTime);
                    if ((orderLimitation.MerchandisingApprovedOn == DateTime.MinValue) || (orderLimitation.MerchandisingApprovedOn == Convert.ToDateTime("1753-01-01")) || (orderLimitation.MerchandisingApprovedOn == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.MerchandisingApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // Add By Ravi kumar on 8/12/2014

                    param = new SqlParameter("@CalcFabric1Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric1Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric1Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric2Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric2Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric2Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric3Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric3Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric3Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric4Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric4Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric4Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // End Adding By ravi on 8/12/2014

                    // Add By Ravi kumar on 27/01/2015
                    param = new SqlParameter("@BasicCMT", SqlDbType.Int);
                    if (orderLimitation.BasicCMT == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BasicCMT;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@barrierdaysCMT", SqlDbType.Int);
                    if (orderLimitation.BarrierDaysCMT == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BarrierDaysCMT;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BasicBarrierDays", SqlDbType.Int);
                    if (orderLimitation.BasicBarrierDays == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BasicBarrierDays;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcBarrierDays", SqlDbType.Int);
                    if (orderLimitation.CalcBarrierDays == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcBarrierDays;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    // End By Ravi kumar on 27/01/2015

                    cmd.ExecuteNonQuery();

                    foreach (OrderDetail orderDetail in orderLimitation.Order.OrderBreakdown)
                    {
                        if (orderDetail.OrderID > 0)
                            UpdateOrderDetailETAs(orderDetail, cnx, transaction);
                    }

                    int orderLimitationID = Convert.ToInt32(outParam.Value);

                    transaction.Commit();

                    cnx.Close();

                }
                catch (SqlException ex)
                {
                    transaction.Rollback();

                    throw ex;
                }
            }
            return true;

        }

        // End by Ravi kumar on 27/1/2015 For Limitation Form

        public bool UpdateOrder(Order order)
        {
            int orderID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_orders_update_order";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@oId", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    SqlParameter param;

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = order.Style.StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = order.Style.client.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDate", SqlDbType.DateTime);
                    param.Value = order.OrderDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                    param.Value = order.SerialNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Description", SqlDbType.VarChar);
                    param.Value = order.Description;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    param.Value = order.Style.cdept.DeptID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Comments", SqlDbType.VarChar);
                    param.Value = order.Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesIkandi", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesIkandi;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManager", SqlDbType.Bit);
                    param.Value = order.ApprovedByMerchandiserManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPL", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesBIPL;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManagerOn", SqlDbType.DateTime);
                    if (order.ApprovedByMerchandiserManagerOn != DateTime.MinValue)
                    {
                        param.Value = order.ApprovedByMerchandiserManagerOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPLOn", SqlDbType.DateTime);
                    if (order.ApprovedBySalesBIPLOn != DateTime.MinValue)
                    {
                        param.Value = order.ApprovedBySalesBIPLOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@nvoiceLocation", SqlDbType.VarChar);
                    if (order.InvoiceLocation != null)
                    {
                        param.Value = order.InvoiceLocation;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    // param.Value = order.InvoiceLocation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@d", SqlDbType.Int);
                    param.Value = order.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AgreedPrice", SqlDbType.Float);
                    param.Value = order.Costing.AgreedPrice;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CostingID", SqlDbType.Int);
                    param.Value = order.Costing.CostingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BiplPrice", SqlDbType.Float);
                    param.Value = order.BiplPrice;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@History", SqlDbType.VarChar);
                    param.Value = order.History;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfPacking", SqlDbType.Int);
                    param.Value = order.TypeOfPacking;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedID", SqlDbType.Int);
                    param.Value = order.IsApproved;//manisha 28th march
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderOwner", SqlDbType.Int);
                    param.Value = order.OrderType;//manisha 28th march
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderType", SqlDbType.Int);
                    param.Value = order.OrderTypes;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OutHousePrice", SqlDbType.Float);
                    if (order.OrderTypes == 2)
                    {
                        param.Value = order.OutHousePrice;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    cmd.ExecuteNonQuery();
                    orderID = Convert.ToInt32(outParam.Value);
                    order.OrderID = orderID;

                    if (orderID == -1)
                        return false;

                    if (order.OrderID > -1)
                    {
                        string Ids = "";
                        DataTable dt = new DataTable();
                        dt.Columns.Add("PID");
                        dt.Columns.Add("OID");
                        int flag = 0;
                        string sortType = "asc";
                        foreach (OrderDetail objOrderDetail in order.OrderBreakdown)
                        {
                            DataRow dr = null;
                            if (null != order.OrderBreakdown && order.OrderBreakdown.Count > 0)
                            {
                                if (objOrderDetail.OrderDetailID > 0 && objOrderDetail.isDeleted == 0) // if  OrderDetailID exists
                                {
                                    objOrderDetail.OrderID = order.OrderID;
                                    UpdateCostingAgreedPrice(objOrderDetail, cnx, transaction);

                                    if (objOrderDetail.isQuantityInc > 0 && objOrderDetail.isSplitted == 0)
                                    {
                                        flag = 1;
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); //if quantity increased or decreased

                                    }
                                    else if (objOrderDetail.isSplitted > 0 && objOrderDetail.isQuantityInc > 0)
                                    {
                                        flag = 1;
                                        dr = dt.NewRow();
                                        dr["PID"] = 0;
                                        dr["OID"] = objOrderDetail.OrderDetailID;
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); //if order splitted then update quan of existing order detail
                                        if (Ids != "")
                                        {
                                            Ids = Ids + "," + objOrderDetail.OrderDetailID.ToString();
                                        }
                                        else
                                        {
                                            Ids = Ids + objOrderDetail.OrderDetailID.ToString();
                                        }
                                        sortType = objOrderDetail.sortType;
                                    }
                                    else
                                    {
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction);
                                    }
                                    foreach (OrderDetailSizes objOrderDetailSizes in objOrderDetail.OrderSizes)
                                    {
                                        objOrderDetailSizes.OrderDetailID = objOrderDetail.OrderDetailID;
                                        InsertUpdateOrderDetailSize(objOrderDetailSizes, objOrderDetail, cnx, transaction);
                                    }
                                }
                                else if (objOrderDetail.OrderDetailID == -1 && objOrderDetail.isDeleted == 0) // if OrderDetailID is newly created
                                {
                                    int orderDetailId = -1;

                                    if (objOrderDetail.OrderDetailID == -1)
                                    {
                                        objOrderDetail.OrderID = order.OrderID;

                                        if (objOrderDetail.isSplit > 0) // child OrderDetailID of splitted OrderDetailID
                                        {
                                            orderDetailId = InsertOrderDetailFromExistingRow(objOrderDetail.parentOrderDetailID, cnx, transaction);
                                            // Row copied for splitted OrderDetailID // Workflow copied 

                                            if (orderDetailId > 0)
                                            {
                                                objOrderDetail.OrderDetailID = orderDetailId;
                                                UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); // splitted OrderDetailID updated
                                                dr = dt.NewRow();
                                                dr["PID"] = objOrderDetail.parentOrderDetailID;
                                                dr["OID"] = objOrderDetail.OrderDetailID;

                                                // Copy Bulk In House History for Fabric & Accessory

                                                CopyACCAndFabricBulkInHouseHistory(objOrderDetail.parentOrderDetailID, orderDetailId, cnx, transaction);
                                            }
                                            //if (Ids != "")
                                            //{
                                            //    Ids = Ids + "," + orderDetailId;
                                            //}
                                            //else
                                            //{
                                            //    Ids = Ids + orderDetailId;
                                            //}
                                            sortType = objOrderDetail.sortType;
                                        }
                                        else
                                        {
                                            orderDetailId = InsertOrderDetail(objOrderDetail, cnx, transaction);
                                            //UpdateWorkFlowInstance();
                                        }

                                        if (orderDetailId > 0)
                                        {
                                            objOrderDetail.OrderDetailID = orderDetailId;

                                            foreach (OrderDetailSizes orderDetailSizes in objOrderDetail.OrderSizes)
                                            {
                                                InsertUpdateOrderDetailSize(orderDetailSizes, objOrderDetail, cnx, transaction);
                                            }
                                        }
                                    }
                                }

                                else if (objOrderDetail.isDeleted == 1)
                                {
                                    DeleteOrderDetail(objOrderDetail, cnx, transaction);
                                    flag = 1;
                                }
                            }
                        }


                        if (flag == 1)
                        {
                            UpdateAccessoryworking(order.OrderID, cnx, transaction); // update accessoryworking for changed quan
                            UpdateFabricworking(order.OrderID, cnx, transaction); // update fabricworking for changed quan

                        }

                        //IdsCollection.Add(Ids);
                        if (Ids != null)
                        {
                            string[] strID = Ids.Split(',');
                            foreach (string s in strID)
                            {
                                string id = s;
                                dt.DefaultView.RowFilter = "PID=" + s;
                                DataTable dtNew = dt.DefaultView.ToTable();
                                foreach (DataRow dr in dtNew.Rows)
                                {
                                    id = id + "," + dr["OID"];
                                }
                                IdsCollection.Add(id);
                            }
                        }

                        foreach (string str in IdsCollection)
                        {
                            if (str != "")
                            {
                                UpdateCutting(str, sortType, cnx, transaction); // update cutting and stitching
                                UpdateOrderTOPStatus(str, cnx, transaction);//update TOP status
                                UpdatePlanningFile(str, sortType, cnx, transaction);
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }

        }

        // Update By Ravi kumar on 3/4/18 for order form
        public bool UpdateOrder(Order order, int User, ref bool bCheckExistOrderSam, ref int AfterUpdation)
        {
            int orderID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_orders_update_order";

                    SqlCommand cmd = base.SqlCommand(cmdText, cnx, QueryType.Update);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@oId", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    SqlParameter param;

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = order.Style.StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = order.Style.client.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDate", SqlDbType.DateTime);
                    param.Value = order.OrderDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                    param.Value = order.SerialNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Description", SqlDbType.VarChar);
                    param.Value = order.Description;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentDepartmentId", SqlDbType.Int);
                    param.Value = order.Costing.ParentDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    param.Value = order.Style.cdept.DeptID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Comments", SqlDbType.VarChar);
                    param.Value = order.Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesIkandi", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesIkandi;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManager", SqlDbType.Bit);
                    param.Value = order.ApprovedByMerchandiserManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPL", SqlDbType.Bit);
                    param.Value = order.ApprovedBySalesBIPL;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedByMerchandiserManagerOn", SqlDbType.DateTime);
                    if ((order.ApprovedByMerchandiserManagerOn == DateTime.MinValue) || (order.ApprovedByMerchandiserManagerOn == Convert.ToDateTime("1753-01-01")) || (order.ApprovedByMerchandiserManagerOn == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = Convert.ToDateTime(order.ApprovedByMerchandiserManagerOn);
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedBySalesBIPLOn", SqlDbType.DateTime);
                    if ((order.ApprovedBySalesBIPLOn == DateTime.MinValue) || (order.ApprovedBySalesBIPLOn == Convert.ToDateTime("1753-01-01")) || (order.ApprovedBySalesBIPLOn == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = Convert.ToDateTime(order.ApprovedBySalesBIPLOn);
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@nvoiceLocation", SqlDbType.VarChar);
                    if (order.InvoiceLocation != null)
                    {
                        param.Value = order.InvoiceLocation;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@d", SqlDbType.Int);
                    param.Value = order.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AgreedPrice", SqlDbType.Float);
                    param.Value = order.Costing.AgreedPrice;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CostingID", SqlDbType.Int);
                    param.Value = order.Costing.CostingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@History", SqlDbType.VarChar);
                    param.Value = order.History;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TypeOfPacking", SqlDbType.Int);
                    param.Value = order.TypeOfPacking;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApprovedID", SqlDbType.Int);
                    param.Value = order.IsApproved;//manisha 28th march
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderOwner", SqlDbType.VarChar);
                    param.Value = order.OrderType;//manisha 28th march
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AgreementBy", SqlDbType.Int);
                    param.Value = User;//
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CDQDA", SqlDbType.Int);
                    param.Value = order.CDQDA;//
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderType", SqlDbType.Int);
                    param.Value = order.OrderTypes;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OutHousePrice", SqlDbType.Float);
                    if (order.OrderTypes == 2)
                    {
                        param.Value = order.OutHousePrice;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();
                    orderID = Convert.ToInt32(outParam.Value);
                    order.OrderID = orderID;

                    if (orderID == -1)
                        return false;

                    if (order.OrderID > -1)
                    {
                        string Ids = "";
                        DataTable dt = new DataTable();
                        dt.Columns.Add("PID");
                        dt.Columns.Add("OID");
                        int flag = 0;
                        string sortType = "asc";
                        foreach (OrderDetail objOrderDetail in order.OrderBreakdown)
                        {
                            DataRow dr = null;
                            if (null != order.OrderBreakdown && order.OrderBreakdown.Count > 0)
                            {
                                if (objOrderDetail.OrderDetailID > 0 && objOrderDetail.isDeleted == 0) // if  OrderDetailID exists
                                {

                                    objOrderDetail.OrderID = order.OrderID;
                                    UpdateCostingAgreedPrice(objOrderDetail, cnx, transaction);

                                    if (objOrderDetail.isQuantityInc > 0 && objOrderDetail.isSplitted == 0)
                                    {
                                        flag = 1;
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); //if quantity increased or decreased
                                        bCheckExistOrderSam = bCheckOrderSam(objOrderDetail, cnx, transaction);

                                    }
                                    else if (objOrderDetail.isSplitted > 0 && objOrderDetail.isQuantityInc > 0)
                                    {
                                        flag = 1;
                                        dr = dt.NewRow();
                                        dr["PID"] = 0;
                                        dr["OID"] = objOrderDetail.OrderDetailID;
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); //if order splitted then update quan of existing order detail
                                        bCheckExistOrderSam = bCheckOrderSam(objOrderDetail, cnx, transaction);
                                        if (Ids != "")
                                        {
                                            Ids = Ids + "," + objOrderDetail.OrderDetailID.ToString();
                                        }
                                        else
                                        {
                                            Ids = Ids + objOrderDetail.OrderDetailID.ToString();
                                        }
                                    }
                                    else
                                    {
                                        UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction);
                                        bCheckExistOrderSam = bCheckOrderSam(objOrderDetail, cnx, transaction);

                                    }
                                    foreach (OrderDetailSizes objOrderDetailSizes in objOrderDetail.OrderSizes)
                                    {
                                        objOrderDetailSizes.OrderDetailID = objOrderDetail.OrderDetailID;
                                        InsertUpdateOrderDetailSize(objOrderDetailSizes, objOrderDetail, cnx, transaction);
                                    }
                                }
                                else if (objOrderDetail.OrderDetailID == -1 && objOrderDetail.isDeleted == 0) // if OrderDetailID is newly created
                                {
                                    int orderDetailId = -1;

                                    if (objOrderDetail.OrderDetailID == -1)
                                    {
                                        objOrderDetail.OrderID = order.OrderID;

                                        if (objOrderDetail.isSplit > 0) // child OrderDetailID of splitted OrderDetailID
                                        {
                                            AfterUpdation = 1;
                                            orderDetailId = InsertOrderDetailFromExistingRow(objOrderDetail.parentOrderDetailID, cnx, transaction);
                                            // Row copied for splitted OrderDetailID // Workflow copied 

                                            if (orderDetailId > 0)
                                            {
                                                objOrderDetail.OrderDetailID = orderDetailId;
                                                UpdateOrderDetail(objOrderDetail, order.OrderType, order.IsApproved, cnx, transaction); // splitted OrderDetailID updated
                                                bCheckExistOrderSam = bCheckOrderSam(objOrderDetail, cnx, transaction);
                                                dr = dt.NewRow();
                                                dr["PID"] = objOrderDetail.parentOrderDetailID;
                                                dr["OID"] = objOrderDetail.OrderDetailID;
                                                // Copy Bulk In House History for Fabric & Accessory

                                                CopyACCAndFabricBulkInHouseHistory(objOrderDetail.parentOrderDetailID, orderDetailId, cnx, transaction);
                                            }
                                            //if (Ids != "")
                                            //{
                                            //    Ids = Ids + "," + orderDetailId;
                                            //}
                                            //else
                                            //{
                                            //    Ids = Ids + orderDetailId;
                                            //}
                                            sortType = objOrderDetail.sortType;
                                        }
                                        else
                                        {
                                            AfterUpdation = 1;
                                            orderDetailId = InsertOrderDetail(objOrderDetail, cnx, transaction);
                                            //UpdateWorkFlowInstance();
                                        }

                                        if (orderDetailId > 0)
                                        {
                                            objOrderDetail.OrderDetailID = orderDetailId;

                                            foreach (OrderDetailSizes orderDetailSizes in objOrderDetail.OrderSizes)
                                            {
                                                InsertUpdateOrderDetailSize(orderDetailSizes, objOrderDetail, cnx, transaction);
                                            }
                                        }
                                    }
                                }

                                else if (objOrderDetail.isDeleted == 1)
                                {
                                    DeleteOrderDetail(objOrderDetail, cnx, transaction);
                                    flag = 1;
                                }
                            }
                            if (dr != null)
                            {
                                dt.Rows.Add(dr);
                            }
                        }


                        if (flag == 1)
                        {
                            UpdateAccessoryworking(order.OrderID, cnx, transaction); // update accessoryworking for changed quan // For timing
                            UpdateFabricworking(order.OrderID, cnx, transaction); // update fabricworking for changed quan
                        }

                        //IdsCollection.Add(Ids);
                        if (Ids != null && Ids != "")
                        {
                            string[] strID = Ids.Split(',');
                            foreach (string s in strID)
                            {
                                string id = s;
                                DataTable dtttt = dt;
                                dt.DefaultView.RowFilter = "PID=" + s;
                                DataTable dtNew = dt.DefaultView.ToTable();
                                foreach (DataRow dr in dtNew.Rows)
                                {
                                    id = id + "," + dr["OID"];
                                }
                                IdsCollection.Add(id);
                            }
                        }

                        foreach (string str in IdsCollection)
                        {
                            if (str != "")
                            {
                                UpdateCutting(str, sortType, cnx, transaction); // update cutting and stitching
                                UpdateOrderTOPStatus(str, cnx, transaction);//update TOP status
                                UpdatePlanningFile(str, sortType, cnx, transaction);
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }

        }
        // End By Ravi kumar on 8/1/2015


        public bool SplitOrder(int orderID, int orderDetailID, int parentOrder, int User, string Sort)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_orders_split_order";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = orderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentId", SqlDbType.Int);
                    param.Value = parentOrder;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Sort", SqlDbType.VarChar);
                    param.Value = Sort;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SplittedBy", SqlDbType.Int);
                    param.Value = User;//
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();


                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }

        }
        // Edit by surendra for Auto Allocation and reallocation for new order on 15-10-2015
        public bool AutoAllocation_ReallocationOrder(int orderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "usp_AutoAllocation";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }
        }
        // end

        // Added By Ravi for Auto Allocation and reallocation till confirmed order on 23-10-2017
        public bool Update_AutoAllocationFactoryUnit_InOrder(int orderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "usp_Update_AutoAllocationFactoryUnit_InOrder";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }
        }
        // end

        private void InsertUpdateOrderDetailSize(OrderDetailSizes objOrderDetailSizes, OrderDetail objOrderDetail, SqlConnection cnx, SqlTransaction transaction)
        {
            if (objOrderDetailSizes.OrderDetailSizeID > -1 && objOrderDetailSizes.Size != string.Empty)
            {
                //if (objOrderDetail.Quantity == 0.0)
                //{
                //    DeleteOrderDetailSizes(objOrderDetailSizes, cnx, transaction);
                //}
                if (objOrderDetailSizes.isDeleted == 0)
                {
                    //UpdateOrderDetailSize(objOrderDetailSizes, cnx, transaction);
                    //Added By Ashish on 25/11/2014
                    if (objOrderDetailSizes.OrderDetailSizeID == 0)
                    {
                        objOrderDetailSizes.OrderDetailID = objOrderDetail.OrderDetailID;

                        InsertOrderDetailSize(objOrderDetailSizes, cnx, transaction);
                    }
                    else
                    {
                        UpdateOrderDetailSize(objOrderDetailSizes, cnx, transaction);
                    }
                }
                else
                {
                    DeleteOrderDetailSizes(objOrderDetailSizes, cnx, transaction);
                }
            }
            else
            {
                // add by sushil on date 17/3/2015 for remove order size 
                if (objOrderDetailSizes.isDeleted == 1)
                {
                    DeleteOrderDetailSizes(objOrderDetailSizes, cnx, transaction);
                }
                else
                {
                    if (null != objOrderDetail.OrderSizes && objOrderDetail.OrderSizes.Count > 0 && objOrderDetailSizes.Size != string.Empty)
                    {

                        objOrderDetailSizes.OrderDetailID = objOrderDetail.OrderDetailID;
                        InsertOrderDetailSize(objOrderDetailSizes, cnx, transaction);

                    }
                }

            }
        }



        private int GetExtraPercentage(int totalQuan, int adjQuan, int extra)
        {
            double percent = (Convert.ToDouble(adjQuan) / Convert.ToDouble(totalQuan)) * 100;
            double total = (percent / 100) * extra;
            return Convert.ToInt32(Math.Round(total));
        }

        private void UpdateCutting(string str, string sortType, SqlConnection cnx, SqlTransaction transaction)
        {
            int CuttingDetailID = 0;
            int PcsCut = 0;
            int PcsIssued = 0;
            int OrderDetailID = 0;
            int TotalQuantity = 0;
            int Quantity = 0;
            int PcsLeft = 0;
            int PcsIssuedLeft = 0;
            int fabricorderdetailid = 0;
            int accessoryorderdetailid = 0;
            int ActQuantity = 0;
            int ActIssueQuantity = 0;
            int extraPcs = 0;
            int extraPcsAdj = 0;
            int extraIssue = 0;
            int extraIssueAdj = 0;
            DataSet ds = GetOrderDetailInfo(str, sortType, cnx, transaction);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[8].Rows.Count > 0)
                {
                    fabricorderdetailid = (ds.Tables[8].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[8].Rows[0]["OrderDetailID"]);

                }

                if (ds.Tables[7].Rows.Count > 0)
                {
                    accessoryorderdetailid = (ds.Tables[7].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[7].Rows[0]["OrderDetailID"]);
                }

                if (ds.Tables[2].Rows.Count > 0)
                {
                    CuttingDetailID = (ds.Tables[2].Rows[0]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["Id"]);
                    PcsCut = (ds.Tables[2].Rows[0]["PcsCut"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["PcsCut"]);
                    PcsIssued = (ds.Tables[2].Rows[0]["PcsIssued"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["PcsIssued"]);
                }

                if (ds.Tables[1].Rows.Count > 0)
                {
                    TotalQuantity = (ds.Tables[1].Rows[0]["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["TotalQuantity"]);
                }

                extraPcs = PcsCut - TotalQuantity;
                if (extraPcs > 0)
                {
                    PcsCut = PcsCut - extraPcs;
                }
                else extraPcs = 0;

                extraIssue = PcsIssued - TotalQuantity;
                if (extraIssue > 0)
                {
                    PcsIssued = PcsIssued - extraIssue;
                }
                else extraIssue = 0;

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Quantity = (ds.Tables[0].Rows[i]["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Quantity"]);

                        if (extraPcs > 0)
                        {
                            //for pcscut
                            int extraQuant = GetExtraPercentage(TotalQuantity, Quantity, extraPcs);
                            ActQuantity = Quantity + extraQuant;
                            extraPcsAdj = extraPcsAdj + extraQuant;
                        }
                        else ActQuantity = Quantity;

                        if (extraIssue > 0)
                        {
                            //for pcs issued
                            int extraIssueQuant = GetExtraPercentage(TotalQuantity, Quantity, extraIssue);
                            ActIssueQuantity = Quantity + extraIssueQuant;
                            extraIssueAdj = extraIssueAdj + extraIssueQuant;
                        }
                        else ActIssueQuantity = Quantity;

                        if (i == ds.Tables[0].Rows.Count - 1)
                        {
                            if (extraPcs > 0)
                            {//for pcscut
                                if (extraPcsAdj > extraPcs)
                                    ActQuantity = ActQuantity - (extraPcsAdj - extraPcs);
                                else if (extraPcsAdj < extraPcs)
                                    ActQuantity = ActQuantity + (extraPcs - extraPcsAdj);
                            }

                            if (extraIssue > 0)
                            {//for pcs issued
                                if (extraIssueAdj > extraIssue)
                                    ActIssueQuantity = ActQuantity - (extraIssueAdj - extraIssue);
                                else if (extraIssueAdj < extraIssue)
                                    ActIssueQuantity = ActIssueQuantity + (extraIssue - extraIssueAdj);
                            }
                        }


                        OrderDetailID = (ds.Tables[0].Rows[i]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);
                        if (fabricorderdetailid != OrderDetailID && fabricorderdetailid > 0)
                        {
                            //insert and update rows for all  new ids in fabric history
                            UpdateOrderFabricHistory(fabricorderdetailid, OrderDetailID, Quantity, TotalQuantity, 1, cnx, transaction);

                        }
                        else
                        {
                            UpdateOrderFabricHistory(fabricorderdetailid, OrderDetailID, Quantity, TotalQuantity, 2, cnx, transaction);//update main odi in fabric history
                        }
                        if (accessoryorderdetailid != OrderDetailID && accessoryorderdetailid > 0)
                        {
                            //insert and update rows for all  new ids in fabric history
                            UpdateOrderAccessoryHistory(accessoryorderdetailid, OrderDetailID, Quantity, TotalQuantity, 1, cnx, transaction);

                        }
                        else
                        {
                            UpdateOrderAccessoryHistory(accessoryorderdetailid, OrderDetailID, Quantity, TotalQuantity, 2, cnx, transaction);

                        }
                        if (i == 0)
                        {
                            if (PcsCut <= Quantity)
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, PcsCut, -1, 1, cnx, transaction);
                                //  PcsLeft = PcsCut - Quantity;
                            }
                            else
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 1, cnx, transaction);
                                // PcsLeft = PcsCut - Quantity;
                            }

                            if (PcsIssued <= Quantity)
                            {
                                // UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, PcsIssued, 1, cnx, transaction);
                                //PcsIssuedLeft = PcsIssued - Quantity;
                            }
                            else
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 1, cnx, transaction);
                                //PcsIssuedLeft = PcsIssued - Quantity;
                            }
                        }
                        else
                        {
                            if (TotalQuantity > PcsCut)
                            {
                                if (Quantity <= PcsLeft)
                                {
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 2, cnx, transaction);
                                    // PcsLeft = PcsLeft - Quantity;
                                }
                                else
                                {
                                    if (PcsLeft < 0)
                                    {
                                        PcsLeft = 0;
                                    }
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, PcsLeft, -1, 2, cnx, transaction);
                                    // PcsLeft = PcsLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsLeft)
                                {
                                    //if (i < ds.Tables[0].Rows.Count - 1)
                                    //{
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 2, cnx, transaction);
                                    // PcsLeft = PcsLeft - Quantity;
                                    //}
                                    //else
                                    //{
                                    //    UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, PcsLeft, -1, 2, cnx, transaction);

                                    //}

                                }
                            }
                            if (TotalQuantity > PcsIssued)
                            {
                                if (Quantity <= PcsIssuedLeft)
                                {
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 2, cnx, transaction);
                                    // PcsIssuedLeft = PcsIssuedLeft - Quantity;
                                }
                                else
                                {
                                    if (PcsIssuedLeft < 0)
                                    {
                                        // PcsIssuedLeft = 0;
                                    }
                                    // UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, PcsIssuedLeft, 2, cnx, transaction);
                                    //PcsIssuedLeft = PcsIssuedLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsIssuedLeft)
                                {
                                    //if (i < ds.Tables[0].Rows.Count - 1)
                                    //{
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 2, cnx, transaction);
                                    // PcsIssuedLeft = PcsIssuedLeft - Quantity;
                                    //}
                                    //else
                                    //{
                                    //    UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, PcsIssuedLeft, 2, cnx, transaction);
                                    //}

                                }
                            }

                        }
                    }
                }
            }
            //DataSet dsCuttingDetail = GetOrderDetailInfo(str, sortType, cnx, transaction);
            //int orderdetailid = 0;
            //int TotalPcsCut = PcsCut;
            //if (dsCuttingDetail.Tables.Count > 0)
            //{
            //    if (dsCuttingDetail.Tables[3].Rows.Count > 0)
            //    {
            //        orderdetailid = (dsCuttingDetail.Tables[3].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsCuttingDetail.Tables[3].Rows[0]["OrderDetailID"]);
            //    }

            //    DataTable dtNew = new DataTable();
            //    dtNew = dsCuttingDetail.Tables[3];
            //    for (int i = dtNew.Rows.Count - 1; i > 0; i--)
            //    {
            //        if (dtNew.Rows[i]["OrderDetailId"].ToString() == dtNew.Rows[i - 1]["OrderDetailId"].ToString())
            //        {
            //            if (Convert.ToInt32(dtNew.Rows[i - 1]["PcsCut"]) < Convert.ToInt32(dtNew.Rows[i]["PcsCut"]))
            //                dtNew.Rows[i]["PcsCut"] = Convert.ToInt32(dtNew.Rows[i]["PcsCut"]) - Convert.ToInt32(dtNew.Rows[i - 1]["PcsCut"]);
            //            else
            //                dtNew.Rows[i]["PcsCut"] = Convert.ToInt32(dtNew.Rows[i - 1]["PcsCut"]) - Convert.ToInt32(dtNew.Rows[i]["PcsCut"]);

            //        }
            //    }

            //    if (dsCuttingDetail.Tables[2].Rows.Count > 0)
            //    {
            //        ///manisha
            //        int k = 0;
            //        int bal = 0;
            //        int kPcs = 0;
            //        int lPcs = 0;
            //        for (int i = 0; i < dsCuttingDetail.Tables[2].Rows.Count; i++)
            //        {
            //            //k = Convert.ToInt32(dsCuttingDetail.Tables[0].Rows[i]["id"]);
            //            kPcs = Convert.ToInt32(dsCuttingDetail.Tables[2].Rows[i]["PcsCut"]);
            //            for (int j = k; j < dtNew.Rows.Count; j++)
            //            {
            //                dtNew.Rows[j]["OrderDetailId"] = dsCuttingDetail.Tables[2].Rows[i]["OrderDetailId"];
            //                lPcs = Convert.ToInt32(dtNew.Rows[j]["PcsCut"]);
            //                kPcs = kPcs - lPcs;
            //                if (kPcs <= 0)
            //                {
            //                    bal = -kPcs;
            //                    lPcs = lPcs - bal;
            //                    dtNew.Rows[j]["PcsCut"] = lPcs.ToString();
            //                    if (bal > 0)
            //                    {
            //                        DataRow dr = dtNew.NewRow();
            //                        dtNew.Rows.InsertAt(dr, j + 1);
            //                        dr.ItemArray = dtNew.Rows[j].ItemArray;
            //                        dr["PcsCut"] = bal.ToString();
            //                    }
            //                    k = j + 1;
            //                    break;
            //                }
            //            }
            //        }
            //        DataTable dt = new DataTable();
            //        //dt =  dsCuttingDetail.Tables[3];
            //        dt = dtNew;

            //        for (int i = 1; i < dt.Rows.Count; i++)
            //        {
            //            if (dt.Rows[i]["OrderDetailId"].ToString() == dt.Rows[i - 1]["OrderDetailId"].ToString())
            //            {
            //                dt.Rows[i]["PcsCut"] = Convert.ToInt32(dt.Rows[i]["PcsCut"]) + Convert.ToInt32(dt.Rows[i - 1]["PcsCut"]);
            //            }
            //        }

            //        int total = 0;

            //        foreach (DataRow dr in dt.Rows)    //foreach (DataRow dr in dsCuttingDetail.Tables[2].Rows)
            //        {
            //            if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && total == 0)//&& NewOrderDetailID > 0)
            //            {
            //                UpdateOrderCuttingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["pcsCut"]), Convert.ToDateTime(dr["Date"]), 2, cnx, transaction);
            //                total++;
            //                //UpdateOrderCuttingHistory1(orderdetailid, 0, NewPcsCut, TotalPcsCut, 2, cnx, transaction); //update main odi
            //            }
            //            else //if (orderdetailid != Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
            //            {
            //                //insert and update rows for all  new ids 
            //                UpdateOrderCuttingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["pcsCut"]), Convert.ToDateTime(dr["Date"]), 1, cnx, transaction);
            //                //UpdateOrderCuttingHistory1(orderdetailid, NewOrderDetailID, NewPcsCut, TotalPcsCut, 1, cnx, transaction);
            //            }

            //        }

            //    }
            //}

            //UpdateStitchingNew(str, sortType, ds, cnx, transaction);
        }

        //UpdatePlanningFile
        private void UpdatePlanningFile(string str, string sortType, SqlConnection cnx, SqlTransaction transaction)
        {
            int TotalQuantity = 0;
            DataSet dsPlanningDetail = GetOrderDetailInfo(str, sortType, cnx, transaction);
            int orderdetailid = 0;
            if (dsPlanningDetail.Tables.Count > 0)
            {
                if (dsPlanningDetail.Tables[10].Rows.Count > 0)
                {
                    orderdetailid = (dsPlanningDetail.Tables[10].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsPlanningDetail.Tables[10].Rows[0]["OrderDetailID"]);
                    TotalQuantity = (dsPlanningDetail.Tables[10].Rows[0]["ShippingQty"] == DBNull.Value) ? 0 : Convert.ToInt32(dsPlanningDetail.Tables[10].Rows[0]["ShippingQty"]);

                    DataTable dt = new DataTable();
                    dt.Columns.Add("OrderDetailId");
                    dt.Columns.Add("OriginalQty");
                    dt.Columns.Add("ShippingQty");
                    dt.Columns.Add("IsShortShipment");

                    foreach (DataRow dr in dsPlanningDetail.Tables[0].Rows)
                    {
                        DataRow drNew = dt.NewRow();
                        drNew["OrderDetailId"] = dr["ID"];
                        if (Convert.ToInt32(dr["Quantity"]) <= TotalQuantity)
                        {
                            drNew["OriginalQty"] = dr["Quantity"];
                            drNew["ShippingQty"] = dr["Quantity"];
                            TotalQuantity = TotalQuantity - Convert.ToInt32(dr["Quantity"]);
                        }
                        else
                        {
                            drNew["OriginalQty"] = dr["Quantity"];
                            drNew["ShippingQty"] = TotalQuantity;
                            TotalQuantity = 0;
                        }
                        dt.Rows.Add(drNew);
                    }
                    dt.AcceptChanges();


                    int isShortShipmentMain = 0;

                    int ShippingQtyMain = 0;
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            int isShortShipment = 0;
                            if (Convert.ToInt32(dr["OriginalQty"]) <= Convert.ToInt32(dr["ShippingQty"]))
                                isShortShipment = 0;
                            else isShortShipment = 1;

                            dr["IsShortShipment"] = isShortShipment;
                            if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]))
                            {
                                //UpdateOrderPlanningFile(Convert.ToInt32(dr["OrderDetailId"]), orderdetailid, Convert.ToInt32(dr["ShippingQty"]), Convert.ToInt32(dr["IsShortShipment"]), 2, cnx, transaction);
                                ShippingQtyMain = Convert.ToInt32(dr["ShippingQty"]);
                                isShortShipmentMain = Convert.ToInt32(dr["IsShortShipment"]);
                            }
                            else
                            {
                                UpdateOrderPlanningFile(Convert.ToInt32(dr["OrderDetailId"]), orderdetailid, Convert.ToInt32(dr["ShippingQty"]), Convert.ToInt32(dr["IsShortShipment"]), 1, cnx, transaction);
                            }
                        }
                        UpdateOrderPlanningFile(orderdetailid, orderdetailid, ShippingQtyMain, isShortShipmentMain, 2, cnx, transaction);
                    }
                }
            }
        }

        private void UpdateStitching(string str, string sortType, DataSet ds, SqlConnection cnx, SqlTransaction transaction)
        {
            int StitchingDetailID = 0;
            int TotalPcsStitchedToday = 0;
            int OverallPcsStitched = 0;
            int PcsSent = 0;
            int PcsReceived = 0;
            int PcsPackedToday = 0;
            int OverallPcsPacked = 0;
            DateTime ExpectedFinishDate = DateTime.MinValue;

            int TotalPcsStitchedTodayLeft = 0;
            int OverallPcsStitchedLeft = 0;
            int PcsSentLeft = 0;
            int PcsReceivedLeft = 0;
            int PcsPackedTodayLeft = 0;
            int OverallPcsPackedLeft = 0;

            int OrderDetailID = 0;
            int TotalQuantity = 0;
            int Quantity = 0;

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[4].Rows.Count > 0)
                {
                    StitchingDetailID = (ds.Tables[4].Rows[0]["StitchingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["StitchingDetailID"]);
                    TotalPcsStitchedToday = (ds.Tables[4].Rows[0]["TotalPcsStitchedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["TotalPcsStitchedToday"]);
                    OverallPcsStitched = (ds.Tables[4].Rows[0]["OverallPcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsStitched"]);
                    PcsSent = (ds.Tables[4].Rows[0]["PcsSent"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsSent"]);
                    PcsReceived = (ds.Tables[4].Rows[0]["PcsReceived"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsReceived"]);
                    PcsPackedToday = (ds.Tables[4].Rows[0]["PcsPackedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsPackedToday"]);
                    OverallPcsPacked = (ds.Tables[4].Rows[0]["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsPacked"]);
                    ExpectedFinishDate = (ds.Tables[4].Rows[0]["ExpectedFinishDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(ds.Tables[4].Rows[0]["ExpectedFinishDate"]);

                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    TotalQuantity = (ds.Tables[1].Rows[0]["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["TotalQuantity"]);
                }
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Quantity = (ds.Tables[0].Rows[i]["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Quantity"]);
                        OrderDetailID = (ds.Tables[0].Rows[i]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);

                        if (i == 0)
                        {
                            if (TotalPcsStitchedToday <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, TotalPcsStitchedToday, -1, -1, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                TotalPcsStitchedTodayLeft = TotalPcsStitchedToday - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, Quantity, -1, -1, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                TotalPcsStitchedTodayLeft = TotalPcsStitchedToday - Quantity;
                            }

                            if (OverallPcsStitched <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitched, -1, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                OverallPcsStitchedLeft = OverallPcsStitched - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, Quantity, -1, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                OverallPcsStitchedLeft = OverallPcsStitched - Quantity;
                            }

                            if (PcsSent <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, PcsSent, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsSentLeft = PcsSent - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, Quantity, -1, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsSentLeft = PcsSent - Quantity;
                            }

                            if (PcsReceived <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, PcsReceived, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsReceivedLeft = PcsReceived - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, Quantity, -1, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsReceivedLeft = PcsReceived - Quantity;
                            }

                            if (PcsPackedToday <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, PcsPackedToday, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsPackedTodayLeft = PcsPackedToday - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, Quantity, -1, 1, ExpectedFinishDate, cnx, transaction);
                                PcsPackedTodayLeft = PcsPackedToday - Quantity;
                            }

                            if (OverallPcsPacked <= Quantity)
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, OverallPcsPacked, 1, ExpectedFinishDate, cnx, transaction);
                                OverallPcsPackedLeft = OverallPcsPacked - Quantity;

                            }
                            else
                            {
                                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, Quantity, 1, ExpectedFinishDate, cnx, transaction);
                                OverallPcsPackedLeft = OverallPcsPacked - Quantity;
                            }
                        }

                        else
                        {

                            if (TotalQuantity > TotalPcsStitchedToday)
                            {
                                if (Quantity <= TotalPcsStitchedTodayLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, Quantity, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;

                                }
                                else
                                {
                                    if (TotalPcsStitchedTodayLeft < 0)
                                    {
                                        TotalPcsStitchedTodayLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, TotalPcsStitchedTodayLeft, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= TotalPcsStitchedTodayLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, Quantity, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                        TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                                    }

                                }
                            }

                            if (TotalQuantity > OverallPcsStitched)
                            {
                                if (Quantity <= OverallPcsStitchedLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, Quantity, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;

                                }
                                else
                                {
                                    if (OverallPcsStitchedLeft < 0)
                                    {
                                        OverallPcsStitchedLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= OverallPcsStitchedLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, Quantity, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                        OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                                    }

                                }
                            }

                            if (TotalQuantity > PcsSent)
                            {
                                if (Quantity <= PcsSentLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, Quantity, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsSentLeft = PcsSentLeft - Quantity;

                                }
                                else
                                {
                                    if (PcsSentLeft < 0)
                                    {
                                        PcsSentLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, PcsSentLeft, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsSentLeft = PcsSentLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsSentLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, Quantity, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                        PcsSentLeft = PcsSentLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, PcsSentLeft, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                                    }
                                }
                            }

                            if (TotalQuantity > PcsReceived)
                            {
                                if (Quantity <= PcsReceivedLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, Quantity, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsReceivedLeft = PcsReceivedLeft - Quantity;

                                }
                                else
                                {
                                    if (PcsReceivedLeft < 0)
                                    {
                                        PcsReceivedLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, PcsReceivedLeft, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsReceivedLeft = PcsReceivedLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsReceivedLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, Quantity, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                                        PcsReceivedLeft = PcsReceivedLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, PcsReceivedLeft, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                                    }

                                }
                            }

                            if (TotalQuantity > PcsPackedToday)
                            {
                                if (Quantity <= PcsPackedTodayLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, Quantity, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;

                                }
                                else
                                {
                                    if (PcsPackedTodayLeft < 0)
                                    {
                                        PcsPackedTodayLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, PcsPackedTodayLeft, -1, 2, ExpectedFinishDate, cnx, transaction);
                                    PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsPackedTodayLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, Quantity, -1, 2, ExpectedFinishDate, cnx, transaction);
                                        PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, PcsPackedTodayLeft, -1, 2, ExpectedFinishDate, cnx, transaction);

                                    }

                                }
                            }
                            if (TotalQuantity > OverallPcsPacked)
                            {
                                if (Quantity <= OverallPcsPackedLeft)
                                {
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, Quantity, 2, ExpectedFinishDate, cnx, transaction);
                                    OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;

                                }
                                else
                                {
                                    if (OverallPcsPackedLeft < 0)
                                    {
                                        OverallPcsPackedLeft = 0;
                                    }
                                    UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, OverallPcsPackedLeft, 2, ExpectedFinishDate, cnx, transaction);
                                    OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= OverallPcsPackedLeft)
                                {
                                    if (i < ds.Tables[0].Rows.Count - 1)
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, Quantity, 2, ExpectedFinishDate, cnx, transaction);
                                        OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;
                                    }
                                    else
                                    {
                                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, OverallPcsPackedLeft, 2, ExpectedFinishDate, cnx, transaction);

                                    }

                                }
                            }
                        }
                    }
                }
            }
            DataSet dsStitchingDetail = GetOrderDetailInfo(str, sortType, cnx, transaction);
            int orderdetailid = 0;
            int TotalPcsStitched = OverallPcsStitched;
            int NewOrderDetailID = 0;
            int NewPcsStitched = 0;
            int TotalPcsPacked = OverallPcsPacked;
            int NewPcsPacked = 0;

            if (dsStitchingDetail.Tables.Count > 0)
            {
                if (dsStitchingDetail.Tables[5].Rows.Count > 0)
                {
                    orderdetailid = (dsStitchingDetail.Tables[5].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsStitchingDetail.Tables[5].Rows[0]["OrderDetailID"]);

                }

                if (dsStitchingDetail.Tables[4].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsStitchingDetail.Tables[4].Rows)
                    {
                        NewOrderDetailID = (dr["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailID"]);
                        NewPcsStitched = (dr["OverallPcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OverallPcsStitched"]);
                        if (orderdetailid > 0)
                        {
                            if (orderdetailid != Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                            {
                                //insert and update rows for all  new ids 
                                UpdateOrderStitchingHistory(orderdetailid, NewOrderDetailID, NewPcsStitched, TotalPcsStitched, 1, cnx, transaction);
                            }

                            if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                            {
                                UpdateOrderStitchingHistory(orderdetailid, 0, NewPcsStitched, TotalPcsStitched, 2, cnx, transaction); //update main odi
                            }
                        }
                    }
                }


                if (dsStitchingDetail.Tables[6].Rows.Count > 0)
                {
                    orderdetailid = (dsStitchingDetail.Tables[6].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsStitchingDetail.Tables[6].Rows[0]["OrderDetailID"]);

                }

                if (dsStitchingDetail.Tables[4].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsStitchingDetail.Tables[4].Rows)
                    {
                        NewOrderDetailID = (dr["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailID"]);
                        NewPcsPacked = (dr["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OverallPcsPacked"]);
                        if (orderdetailid > 0)
                        {
                            if (orderdetailid != Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                            {
                                //insert and update rows for all  new ids 
                                UpdateOrderPackingHistory(orderdetailid, NewOrderDetailID, NewPcsPacked, TotalPcsPacked, 1, cnx, transaction);
                            }

                            if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                            {
                                UpdateOrderPackingHistory(orderdetailid, 0, NewPcsPacked, TotalPcsPacked, 2, cnx, transaction); //update main odi
                            }
                        }
                    }
                }
            }
        }

        private void UpdateStitchingNew(string str, string sortType, DataSet ds, SqlConnection cnx, SqlTransaction transaction)
        {
            int StitchingDetailID = 0;
            int TotalPcsStitchedToday = 0;
            int OverallPcsStitched = 0;
            int PcsSent = 0;
            int PcsReceived = 0;
            int PcsPackedToday = 0;
            int OverallPcsPacked = 0;
            DateTime ExpectedFinishDate = DateTime.MinValue;

            //int TotalPcsStitchedTodayLeft = 0;
            //int OverallPcsStitchedLeft = 0;
            //int PcsSentLeft = 0;
            //int PcsReceivedLeft = 0;
            //int PcsPackedTodayLeft = 0;
            //int OverallPcsPackedLeft = 0;

            int OrderDetailID = 0;
            int TotalQuantity = 0;
            int Quantity = 0;
            ///
            int extraTotalPcsStitchedToday = 0;
            int extraOverallPcsStitched = 0;
            int extraPcsSent = 0;
            int extraPcsReceived = 0;
            int extraPcsPackedToday = 0;
            int extraOverallPcsPacked = 0;

            int extraTotalPcsStitchedTodayAdj = 0;
            int extraOverallPcsStitchedAdj = 0;
            int extraPcsSentAdj = 0;
            int extraPcsReceivedAdj = 0;
            int extraPcsPackedTodayAdj = 0;
            int extraOverallPcsPackedAdj = 0;

            int ActTotalPcsStitchedToday = 0;
            int ActOverallPcsStitched = 0;
            int ActPcsSent = 0;
            int ActPcsReceived = 0;
            int ActPcsPackedToday = 0;
            int ActOverallPcsPacked = 0;



            #region stitching table
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[4].Rows.Count > 0)
                {
                    StitchingDetailID = (ds.Tables[4].Rows[0]["StitchingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["StitchingDetailID"]);
                    TotalPcsStitchedToday = (ds.Tables[4].Rows[0]["TotalPcsStitchedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["TotalPcsStitchedToday"]);
                    OverallPcsStitched = (ds.Tables[4].Rows[0]["OverallPcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsStitched"]);
                    PcsSent = (ds.Tables[4].Rows[0]["PcsSent"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsSent"]);
                    PcsReceived = (ds.Tables[4].Rows[0]["PcsReceived"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsReceived"]);
                    PcsPackedToday = (ds.Tables[4].Rows[0]["PcsPackedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsPackedToday"]);
                    OverallPcsPacked = (ds.Tables[4].Rows[0]["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsPacked"]);
                    ExpectedFinishDate = (ds.Tables[4].Rows[0]["ExpectedFinishDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(ds.Tables[4].Rows[0]["ExpectedFinishDate"]);

                }

                if (ds.Tables[1].Rows.Count > 0)
                {
                    TotalQuantity = (ds.Tables[1].Rows[0]["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["TotalQuantity"]);
                }

                ///
                extraTotalPcsStitchedToday = TotalPcsStitchedToday - TotalQuantity;
                if (extraTotalPcsStitchedToday > 0)
                {
                    TotalPcsStitchedToday = TotalPcsStitchedToday - extraTotalPcsStitchedToday;
                }
                else extraTotalPcsStitchedToday = 0;
                ////
                extraOverallPcsStitched = OverallPcsStitched - TotalQuantity;
                if (extraOverallPcsStitched > 0)
                {
                    OverallPcsStitched = OverallPcsStitched - extraOverallPcsStitched;
                }
                else extraOverallPcsStitched = 0;
                /////
                extraPcsSent = PcsSent - TotalQuantity;
                if (extraPcsSent > 0)
                {
                    PcsSent = PcsSent - extraPcsSent;
                }
                else extraPcsSent = 0;
                ////
                extraPcsReceived = PcsReceived - TotalQuantity;
                if (extraPcsReceived > 0)
                {
                    PcsReceived = PcsReceived - extraPcsReceived;
                }
                else extraPcsReceived = 0;
                ///
                extraPcsPackedToday = PcsPackedToday - TotalQuantity;
                if (extraPcsPackedToday > 0)
                {
                    PcsPackedToday = PcsPackedToday - extraPcsPackedToday;
                }
                else extraPcsPackedToday = 0;
                ////
                extraOverallPcsPacked = OverallPcsPacked - TotalQuantity;
                if (extraOverallPcsPacked > 0)
                {
                    OverallPcsPacked = OverallPcsPacked - extraOverallPcsPacked;
                }
                else extraOverallPcsPacked = 0;
                /////


                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {

                        Quantity = (ds.Tables[0].Rows[i]["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Quantity"]);
                        OrderDetailID = (ds.Tables[0].Rows[i]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);

                        if (extraTotalPcsStitchedToday > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraTotalPcsStitchedToday);
                            ActTotalPcsStitchedToday = Quantity + extraTotalPcs;
                            extraTotalPcsStitchedTodayAdj = extraTotalPcsStitchedTodayAdj + extraTotalPcs;
                        }
                        else ActTotalPcsStitchedToday = Quantity;

                        if (extraOverallPcsStitched > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsStitched);
                            ActOverallPcsStitched = Quantity + extraTotalPcs;
                            extraOverallPcsStitchedAdj = extraOverallPcsStitchedAdj + extraTotalPcs;
                        }
                        else ActOverallPcsStitched = Quantity;

                        if (extraPcsSent > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraPcsSent);
                            ActPcsSent = Quantity + extraTotalPcs;
                            extraPcsSentAdj = extraPcsSentAdj + extraTotalPcs;
                        }
                        else ActPcsSent = Quantity;

                        if (extraPcsReceived > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsStitched);
                            ActPcsReceived = Quantity + extraTotalPcs;
                            extraPcsReceivedAdj = extraPcsReceivedAdj + extraTotalPcs;
                        }
                        else ActPcsReceived = Quantity;

                        if (extraPcsPackedToday > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraPcsPackedToday);
                            ActPcsPackedToday = Quantity + extraTotalPcs;
                            extraPcsPackedTodayAdj = extraPcsPackedTodayAdj + extraTotalPcs;
                        }
                        else ActPcsPackedToday = Quantity;

                        if (extraOverallPcsPacked > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsPacked);
                            ActOverallPcsPacked = Quantity + extraTotalPcs;
                            extraOverallPcsPackedAdj = extraOverallPcsPackedAdj + extraTotalPcs;
                        }
                        else ActOverallPcsPacked = Quantity;


                        if (i == ds.Tables[0].Rows.Count - 1)
                        {/// only for last row
                            //pcs Stitched
                            if (extraTotalPcsStitchedToday > 0)
                            {
                                if (extraTotalPcsStitchedTodayAdj > extraTotalPcsStitchedToday)
                                    ActTotalPcsStitchedToday = ActTotalPcsStitchedToday - (extraTotalPcsStitchedTodayAdj - extraTotalPcsStitchedToday);
                                else if (extraTotalPcsStitchedTodayAdj < extraTotalPcsStitchedToday)
                                    ActTotalPcsStitchedToday = ActTotalPcsStitchedToday + (extraTotalPcsStitchedToday - extraTotalPcsStitchedTodayAdj);
                            }

                            if (extraOverallPcsStitched > 0)
                            {
                                if (extraOverallPcsStitchedAdj > extraOverallPcsStitched)
                                    ActOverallPcsStitched = ActOverallPcsStitched - (extraOverallPcsStitchedAdj - extraOverallPcsStitched);
                                else if (extraOverallPcsStitchedAdj < extraOverallPcsStitched)
                                    ActOverallPcsStitched = ActOverallPcsStitched + (extraOverallPcsStitched - extraOverallPcsStitchedAdj);
                            }

                            //Pcs Sent & Recieved
                            if (extraPcsSent > 0)
                            {
                                if (extraPcsSentAdj > extraPcsSent)
                                    ActPcsSent = ActPcsSent - (extraPcsSentAdj - extraPcsSent);
                                else if (extraPcsSentAdj < extraPcsSent)
                                    ActPcsSent = ActPcsSent + (extraPcsSent - extraPcsSentAdj);
                            }

                            if (extraPcsReceived > 0)
                            {
                                if (extraPcsReceivedAdj > extraPcsReceived)
                                    ActPcsReceived = ActPcsReceived - (extraPcsReceivedAdj - extraPcsReceived);
                                else if (extraPcsReceivedAdj < extraPcsReceived)
                                    ActPcsReceived = ActPcsReceived + (extraPcsReceived - extraPcsReceivedAdj);
                            }

                            //Packing
                            if (extraPcsPackedToday > 0)
                            {
                                if (extraPcsPackedTodayAdj > extraPcsPackedToday)
                                    ActPcsPackedToday = ActPcsPackedToday - (extraPcsPackedTodayAdj - extraPcsPackedToday);
                                else if (extraPcsPackedTodayAdj < extraPcsPackedToday)
                                    ActPcsPackedToday = ActPcsPackedToday + (extraPcsPackedToday - extraPcsPackedTodayAdj);
                            }

                            if (extraOverallPcsPacked > 0)
                            {
                                if (extraOverallPcsPackedAdj > extraOverallPcsPacked)
                                    ActOverallPcsPacked = ActOverallPcsPacked - (extraOverallPcsPackedAdj - extraOverallPcsPacked);
                                else if (extraOverallPcsPackedAdj < extraOverallPcsPacked)
                                    ActOverallPcsPacked = ActOverallPcsPacked + (extraOverallPcsPacked - extraOverallPcsPackedAdj);
                            }

                        }

                        int PcsTotalPcsStitchedToday = 0;
                        if (TotalPcsStitchedToday < Quantity)
                        {
                            PcsTotalPcsStitchedToday = TotalPcsStitchedToday;
                            TotalPcsStitchedToday = 0;
                        }
                        else
                        {
                            PcsTotalPcsStitchedToday = ActTotalPcsStitchedToday;
                            TotalPcsStitchedToday = TotalPcsStitchedToday - Quantity;
                        }

                        int PcsOverallPcsStitched = 0;
                        if (OverallPcsStitched < Quantity)
                        {
                            PcsOverallPcsStitched = OverallPcsStitched;
                            OverallPcsStitched = 0;
                        }
                        else
                        {
                            PcsOverallPcsStitched = ActOverallPcsStitched;
                            OverallPcsStitched = OverallPcsStitched - Quantity;
                        }

                        int PcsPcsSent = 0;
                        if (PcsSent < Quantity)
                        {
                            PcsPcsSent = PcsSent;
                            PcsSent = 0;
                        }
                        else
                        {
                            PcsPcsSent = ActPcsSent;
                            PcsSent = PcsSent - Quantity;
                        }

                        int PcsPcsReceived = 0;
                        if (PcsReceived < Quantity)
                        {
                            PcsPcsReceived = PcsReceived;
                            PcsReceived = 0;
                        }
                        else
                        {
                            PcsPcsReceived = ActPcsReceived;
                            PcsReceived = PcsReceived - Quantity;
                        }

                        int PcsPcsPackedToday = 0;
                        if (PcsPackedToday < Quantity)
                        {
                            PcsPcsPackedToday = PcsPackedToday;
                            PcsPackedToday = 0;
                        }
                        else
                        {
                            PcsPcsPackedToday = ActPcsPackedToday;
                            PcsPackedToday = PcsPackedToday - Quantity;
                        }

                        int PcsOverallPcsPacked = 0;
                        if (OverallPcsPacked < Quantity)
                        {
                            PcsOverallPcsPacked = OverallPcsPacked;
                            OverallPcsPacked = 0;
                        }
                        else
                        {
                            PcsOverallPcsPacked = ActOverallPcsPacked;
                            OverallPcsPacked = OverallPcsPacked - Quantity;
                        }
                        UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, PcsTotalPcsStitchedToday, PcsOverallPcsStitched, PcsPcsSent, PcsPcsReceived, PcsPcsPackedToday, PcsOverallPcsPacked, 1, ExpectedFinishDate, cnx, transaction);

                    }

                    #region stitching table Commented
                    //}

                    //else
                    //{

                    //    if (TotalQuantity > TotalPcsStitchedToday)
                    //    {
                    //        if (Quantity <= TotalPcsStitchedTodayLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, Quantity, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (TotalPcsStitchedTodayLeft < 0)
                    //            {
                    //                TotalPcsStitchedTodayLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, TotalPcsStitchedTodayLeft, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= TotalPcsStitchedTodayLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, Quantity, -1, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //                TotalPcsStitchedTodayLeft = TotalPcsStitchedTodayLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                    //            }

                    //        }
                    //    }

                    //    if (TotalQuantity > OverallPcsStitched)
                    //    {
                    //        if (Quantity <= OverallPcsStitchedLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, Quantity, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (OverallPcsStitchedLeft < 0)
                    //            {
                    //                OverallPcsStitchedLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= OverallPcsStitchedLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, Quantity, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //                OverallPcsStitchedLeft = OverallPcsStitchedLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, OverallPcsStitchedLeft, -1, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                    //            }

                    //        }
                    //    }

                    //    if (TotalQuantity > PcsSent)
                    //    {
                    //        if (Quantity <= PcsSentLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, Quantity, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsSentLeft = PcsSentLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (PcsSentLeft < 0)
                    //            {
                    //                PcsSentLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, PcsSentLeft, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsSentLeft = PcsSentLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= PcsSentLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, Quantity, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //                PcsSentLeft = PcsSentLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, PcsSentLeft, -1, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                    //            }
                    //        }
                    //    }

                    //    if (TotalQuantity > PcsReceived)
                    //    {
                    //        if (Quantity <= PcsReceivedLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, Quantity, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsReceivedLeft = PcsReceivedLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (PcsReceivedLeft < 0)
                    //            {
                    //                PcsReceivedLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, PcsReceivedLeft, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsReceivedLeft = PcsReceivedLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= PcsReceivedLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, Quantity, -1, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //                PcsReceivedLeft = PcsReceivedLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, PcsReceivedLeft, -1, -1, 2, ExpectedFinishDate, cnx, transaction);

                    //            }

                    //        }
                    //    }

                    //    if (TotalQuantity > PcsPackedToday)
                    //    {
                    //        if (Quantity <= PcsPackedTodayLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, Quantity, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (PcsPackedTodayLeft < 0)
                    //            {
                    //                PcsPackedTodayLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, PcsPackedTodayLeft, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //            PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= PcsPackedTodayLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, Quantity, -1, 2, ExpectedFinishDate, cnx, transaction);
                    //                PcsPackedTodayLeft = PcsPackedTodayLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, PcsPackedTodayLeft, -1, 2, ExpectedFinishDate, cnx, transaction);

                    //            }

                    //        }
                    //    }
                    //    if (TotalQuantity > OverallPcsPacked)
                    //    {
                    //        if (Quantity <= OverallPcsPackedLeft)
                    //        {
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, Quantity, 2, ExpectedFinishDate, cnx, transaction);
                    //            OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;

                    //        }
                    //        else
                    //        {
                    //            if (OverallPcsPackedLeft < 0)
                    //            {
                    //                OverallPcsPackedLeft = 0;
                    //            }
                    //            UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, OverallPcsPackedLeft, 2, ExpectedFinishDate, cnx, transaction);
                    //            OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (Quantity <= OverallPcsPackedLeft)
                    //        {
                    //            if (i < ds.Tables[0].Rows.Count - 1)
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, Quantity, 2, ExpectedFinishDate, cnx, transaction);
                    //                OverallPcsPackedLeft = OverallPcsPackedLeft - Quantity;
                    //            }
                    //            else
                    //            {
                    //                UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, -1, -1, -1, -1, -1, OverallPcsPackedLeft, 2, ExpectedFinishDate, cnx, transaction);

                    //            }

                    //        }
                    //    }
                    //}
                    #endregion
                }
            }


            #endregion

            #region Stitching/Packing Split
            DataSet dsStitchingDetail = GetOrderDetailInfo(str, sortType, cnx, transaction);
            int orderdetailid = 0;
            int TotalPcsStitched = OverallPcsStitched;
            int TotalPcsPacked = OverallPcsPacked;


            #region Stitching Split
            if (dsStitchingDetail.Tables.Count > 0)
            {
                if (dsStitchingDetail.Tables[5].Rows.Count > 0)
                {
                    orderdetailid = (dsStitchingDetail.Tables[1].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsStitchingDetail.Tables[1].Rows[0]["OrderDetailID"]);
                }
                DataTable dtNew = new DataTable();
                dtNew = dsStitchingDetail.Tables[5];

                if (dsStitchingDetail.Tables[4].Rows.Count > 0)
                {
                    int k = 0;
                    int bal = 0;
                    int kPcs = 0;
                    int lPcs = 0;
                    for (int i = 0; i < dsStitchingDetail.Tables[4].Rows.Count; i++)
                    {
                        kPcs = Convert.ToInt32(dsStitchingDetail.Tables[4].Rows[i]["OverallPcsStitched"]);
                        for (int j = k; j < dtNew.Rows.Count; j++)
                        {
                            dtNew.Rows[j]["OrderDetailId"] = dsStitchingDetail.Tables[4].Rows[i]["OrderDetailId"];
                            lPcs = Convert.ToInt32(dtNew.Rows[j]["Quantity"]);
                            kPcs = kPcs - lPcs;
                            if (kPcs <= 0)
                            {
                                bal = -kPcs;
                                lPcs = lPcs - bal;
                                dtNew.Rows[j]["Quantity"] = lPcs.ToString();
                                if (bal > 0)
                                {
                                    DataRow dr = dtNew.NewRow();
                                    dtNew.Rows.InsertAt(dr, j + 1);
                                    dr.ItemArray = dtNew.Rows[j].ItemArray;
                                    dr["Quantity"] = bal.ToString();
                                }
                                k = j + 1;
                                break;
                            }
                        }
                    }

                    int total = 0;

                    foreach (DataRow dr in dtNew.Rows)    //foreach (DataRow dr in dsStitchingDetail.Tables[4].Rows)
                    {
                        DateTime dtExpecteddate;
                        if (dr["ExpectedFinishDate"] == DBNull.Value)
                        {
                            dtExpecteddate = DateTime.MinValue;
                        }
                        else
                        {
                            dtExpecteddate = Convert.ToDateTime(dr["ExpectedFinishDate"]);
                        }

                        if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && total == 0)
                        {

                            UpdateOrderStitchingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["Quantity"]), Convert.ToDateTime(dr["Date"]), Convert.ToString(dr["Line"]), Convert.ToString(dr["Floor"]), dtExpecteddate, Convert.ToInt32(dr["IsStitchingComplete"]), 2, cnx, transaction);
                            total++;
                        }
                        else
                        {
                            //insert and update rows for all  new ids 
                            UpdateOrderStitchingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["Quantity"]), Convert.ToDateTime(dr["Date"]), Convert.ToString(dr["Line"]), Convert.ToString(dr["Floor"]), dtExpecteddate, Convert.ToInt32(dr["IsStitchingComplete"]), 1, cnx, transaction);
                            //UpdateOrderStitchingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["OverallPcsStitched"]), Convert.ToDateTime(dr["Date"]), 1, cnx, transaction);
                        }
                    }
                }
            #endregion

                #region Packing Split
                if (dsStitchingDetail.Tables[6].Rows.Count > 0)
                {
                    orderdetailid = (dsStitchingDetail.Tables[1].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dsStitchingDetail.Tables[1].Rows[0]["OrderDetailID"]);
                }

                DataTable dtNew1 = new DataTable();
                dtNew1 = dsStitchingDetail.Tables[6];

                if (dsStitchingDetail.Tables[4].Rows.Count > 0)
                {
                    int k = 0;
                    int bal = 0;
                    int kPcs = 0;
                    int lPcs = 0;
                    for (int i = 0; i < dsStitchingDetail.Tables[4].Rows.Count; i++)
                    {
                        kPcs = Convert.ToInt32(dsStitchingDetail.Tables[4].Rows[i]["OverallPcsPacked"]);
                        for (int j = k; j < dtNew1.Rows.Count; j++)
                        {
                            dtNew1.Rows[j]["OrderDetailId"] = dsStitchingDetail.Tables[4].Rows[i]["OrderDetailId"];
                            lPcs = Convert.ToInt32(dtNew1.Rows[j]["PcsPacked"]);
                            kPcs = kPcs - lPcs;
                            if (kPcs <= 0)
                            {
                                bal = -kPcs;
                                lPcs = lPcs - bal;
                                dtNew1.Rows[j]["PcsPacked"] = lPcs.ToString();
                                if (bal > 0)
                                {
                                    DataRow dr = dtNew1.NewRow();
                                    dtNew1.Rows.InsertAt(dr, j + 1);
                                    dr.ItemArray = dtNew1.Rows[j].ItemArray;
                                    dr["PcsPacked"] = bal.ToString();
                                }
                                k = j + 1;
                                break;
                            }
                        }
                    }


                    int total = 0;

                    foreach (DataRow dr in dtNew1.Rows)    //foreach (DataRow dr in dsStitchingDetail.Tables[4].Rows)
                    {

                        if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && total == 0)
                        {

                            UpdateOrderPackingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["PcsPacked"]), Convert.ToDateTime(dr["Date"]), 2, cnx, transaction);
                            total++;
                        }
                        else
                        {
                            //insert and update rows for all  new ids 
                            UpdateOrderPackingHistory1(Convert.ToInt32(dr["OrderDetailId"]), Convert.ToInt32(dr["PcsPacked"]), Convert.ToDateTime(dr["Date"]), 1, cnx, transaction);
                        }
                    }
                }
                #endregion

                #region Packing Commented Code
                //if (dsStitchingDetail.Tables[4].Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dsStitchingDetail.Tables[4].Rows)
                //    {
                //        NewOrderDetailID = (dr["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailID"]);
                //        NewPcsPacked = (dr["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OverallPcsPacked"]);
                //        if (orderdetailid > 0)
                //        {
                //            if (orderdetailid != Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                //            {
                //                //insert and update rows for all  new ids 
                //                UpdateOrderPackingHistory(orderdetailid, NewOrderDetailID, NewPcsPacked, TotalPcsPacked, 1, cnx, transaction);
                //            }

                //            if (orderdetailid == Convert.ToInt32(dr["OrderDetailID"]) && NewOrderDetailID > 0)
                //            {
                //                UpdateOrderPackingHistory(orderdetailid, 0, NewPcsPacked, TotalPcsPacked, 2, cnx, transaction); //update main odi
                //            }
                //        }
                //    }
                //}
                #endregion

            }
            #endregion
        }


        public bool UpdateWorkFlowInstance()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))//use this line because error  comes
            {

                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_order_update_workflow_instance";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                //paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                //paramIn.Value = OrderID;
                //cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
            }

            return true;
        }

        private bool UpdateOrderTOPStatus(string str, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_inline_order_form_update_data";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.VarChar);
            paramIn.Value = str;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        private bool UpdateOrderPlanningFile(int orderDetailID, int NewOrderDetailID, int ShippingQty, int IsShortShipment, int Type, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_PlannigFile_order_form_update_data";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = orderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@OldOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);


            paramIn = new SqlParameter("@ShippingQty", SqlDbType.Int);
            paramIn.Value = ShippingQty;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@sShortShipment", SqlDbType.Int);
            paramIn.Value = IsShortShipment;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateAccessoryworking(int OrderID, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_accessory_order_form_update_data";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
            paramIn.Value = OrderID;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateFabricworking(int OrderID, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_fabric_order_form_update_data";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
            paramIn.Value = OrderID;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderCuttingHistory(int OrderDetailID, int NewOrderDetailID, int NewPcsCut, int TotalPcsCut, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_cutting_history";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewPcsCut", SqlDbType.Int);
            paramIn.Value = NewPcsCut;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalPcsCut", SqlDbType.Int);
            paramIn.Value = TotalPcsCut;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderCuttingHistory1(int OrderDetailID, int PcsCut, DateTime dt, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_cutting_history1";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsCut", SqlDbType.Int);
            paramIn.Value = PcsCut;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
            paramIn.Value = dt;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderStitchingHistory(int OrderDetailID, int NewOrderDetailID, int NewPcsStitched, int TotalPcsStitched, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_stitching_history";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewPcsStitched", SqlDbType.Int);
            paramIn.Value = NewPcsStitched;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalPcsStitched", SqlDbType.Int);
            paramIn.Value = TotalPcsStitched;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderStitchingHistory1(int OrderDetailID, int TotalPcsStitched, DateTime dt, string Line, string Floor, DateTime expectedDT, int sComplete, int Type, SqlConnection cnx, SqlTransaction transaction)
        {
            //iOrderDetailID,iDate,iQuantity,iLine,iFloor,iIsStitchingComplete,iExpectedFinishDate
            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_stitching_history1";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Quantity", SqlDbType.Int);
            paramIn.Value = TotalPcsStitched;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
            paramIn.Value = dt;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Line", SqlDbType.VarChar);
            paramIn.Value = Line;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Floor", SqlDbType.VarChar);
            paramIn.Value = Floor;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@sStitchingComplete", SqlDbType.Int);
            paramIn.Value = sComplete;
            cmd.Parameters.Add(paramIn);


            paramIn = new SqlParameter("@ExpectedFinishDate", SqlDbType.DateTime);
            if (expectedDT != DateTime.MinValue)
            {
                paramIn.Value = expectedDT;
            }
            else
            {
                paramIn.Value = DBNull.Value;
            }
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderPackingHistory(int OrderDetailID, int NewOrderDetailID, int NewPcsPacked, int TotalPcsPacked, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_packing_history";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewPcsPacked", SqlDbType.Int);
            paramIn.Value = NewPcsPacked;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalPcsPacked", SqlDbType.Int);
            paramIn.Value = TotalPcsPacked;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderPackingHistory1(int OrderDetailID, int PcsPacked, DateTime dt, int Type, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_packing_history1";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsPacked", SqlDbType.Int);
            paramIn.Value = PcsPacked;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
            paramIn.Value = dt;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }
        //abhishek 8/9/2015
        public string GetMoETARemarksAll(string Flag1, int OrderDetailId, out int check)
        {
            check = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string strRemarkFind = "";
                DataTable dtRemarks = new DataTable();
                try
                {
                    string cmdText = "Usp_GetAllETARemarks";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Flag1", SqlDbType.VarChar);
                    param.Value = Flag1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailId", SqlDbType.VarChar);
                    param.Value = OrderDetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@RetVal", SqlDbType.Int);

                    //param.Direction = ParameterDirection.Output;
                    //cmd.Parameters.Add(param);

                    ////added by abhishek 8/9/2015
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtRemarks);

                    //check = (int)cmd.Parameters["@RetVal"].Value;
                    //end

                    if (Flag1 == "Access")//abhishek 7/9/2015
                    {
                        if (dtRemarks.Rows.Count > 0)
                        {
                            int Check = dtRemarks.Rows.Count;
                            for (int i = 0; i < Check; i++)
                            {
                                if (dtRemarks.Rows[i]["ETAReamrks"].ToString() != "")
                                {
                                    strRemarkFind += '`';
                                    strRemarkFind += dtRemarks.Rows[i]["ETAReamrks"].ToString();
                                }
                                //strRemarkFind = dtRemarks.Rows[0]["ETAReamrks"].ToString();
                            }
                        }
                    }
                    else
                    {
                        int countRow = dtRemarks.Rows.Count;
                        if (countRow > 0)
                        {
                            for (int i = 0; i < countRow; i++)
                            {
                                if (dtRemarks.Rows[i]["ETAReamrks"].ToString() != "")
                                {
                                    strRemarkFind += '`';
                                    strRemarkFind += dtRemarks.Rows[i]["ETAReamrks"].ToString();
                                }
                            }
                        }
                    }



                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return strRemarkFind;
            }
        }
        //end abhishek 
        public string GetFabricHistory(int FabricQualityID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                string strRemarkFind = "";
                DataTable dtRemarks = new DataTable();
                try
                {
                    string cmdText = "Usp_GetFabric_History_Remarks";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                    param.Value = FabricQualityID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtRemarks);


                    if (dtRemarks.Rows.Count > 0)
                    {
                        strRemarkFind = dtRemarks.Rows[0]["FabricHistory"].ToString();
                    }





                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return strRemarkFind;
            }
        }
        // Add By Ravi kumar on 19/2/2015 for Show Order Comment
        public string GetMoOrderComment(int OrderDetailId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string strRemark = "";
                DataTable dtRemarks = new DataTable();
                try
                {
                    string cmdText = "sp_GetOrderComment";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = OrderDetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtRemarks);

                    if (dtRemarks.Rows.Count > 0)
                    {
                        strRemark = dtRemarks.Rows[0]["Comments"].ToString();
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return strRemark;
            }
        }
        // End Add By Ravi kumar on 19/2/2015 for Show Order Comment

        public bool UpdateOrderFabricHistory(int OrderDetailID, int NewOrderDetailID, int NewQuantity, int TotalQuantity, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_fabric_history";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewQuantity", SqlDbType.Int);
            paramIn.Value = NewQuantity;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalQuantity", SqlDbType.Int);
            paramIn.Value = TotalQuantity;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderAccessoryHistory(int OrderDetailID, int NewOrderDetailID, int NewQuantity, int TotalQuantity, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_accessory_history";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);
            paramIn.Value = NewOrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewQuantity", SqlDbType.Int);
            paramIn.Value = NewQuantity;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalQuantity", SqlDbType.Int);
            paramIn.Value = TotalQuantity;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderCuttingDetails(int CuttingDetailID, int OrderDetailID, int PcsCut, int PcsIssued, int Type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_cutting_detail";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@CuttingDetailID", SqlDbType.Int);
            paramIn.Value = CuttingDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsCut", SqlDbType.Int);
            paramIn.Value = PcsCut;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsIssued", SqlDbType.Int);
            paramIn.Value = PcsIssued;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateOrderStitchingDetails(int StitchingDetailID, int OrderDetailID, int TotalPcsStitchedToday, int OverallPcsStitched, int PcsSent, int PcsReceived, int PcsPackedToday, int OverallPcsPacked, int Type, DateTime ExpectedFinishDate, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();
            string cmdText = "sp_order_update_stitching_detail";
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter paramIn;

            paramIn = new SqlParameter("@StitchingDetailID", SqlDbType.Int);
            paramIn.Value = StitchingDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            paramIn.Value = OrderDetailID;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@TotalPcsStitchedToday", SqlDbType.Int);
            paramIn.Value = TotalPcsStitchedToday;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@OverallPcsStitched", SqlDbType.Int);
            paramIn.Value = OverallPcsStitched;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsSent", SqlDbType.Int);
            paramIn.Value = PcsSent;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsReceived", SqlDbType.Int);
            paramIn.Value = PcsReceived;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@PcsPackedToday", SqlDbType.Int);
            paramIn.Value = PcsPackedToday;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@OverallPcsPacked", SqlDbType.Int);
            paramIn.Value = OverallPcsPacked;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@ExpectedFinishDate", SqlDbType.DateTime);
            if ((ExpectedFinishDate == DateTime.MinValue) || (ExpectedFinishDate == Convert.ToDateTime("1753-01-01")) || (ExpectedFinishDate == Convert.ToDateTime("1900-01-01")))
            {
                paramIn.Value = DBNull.Value;
            }
            else
            {
                paramIn.Value = ExpectedFinishDate;
            }
            //paramIn = new SqlParameter("@ExpectedFinishDate", SqlDbType.DateTime);
            //paramIn.Value = ExpectedFinishDate;
            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@Type", SqlDbType.Int);
            paramIn.Value = Type;
            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

            return true;
        }

        public DataSet GetOrderDetailInfo(string OrderDetailIDList, string sortType, SqlConnection cnx, SqlTransaction transaction)
        {
            DataSet dsOrderDetailInfo = new DataSet();

            try
            {
                string cmdText = "sp_order_get_orderdetail_info";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.Transaction = transaction;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailIDList", SqlDbType.VarChar);
                param.Value = OrderDetailIDList;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Sort", SqlDbType.VarChar);
                param.Value = sortType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsOrderDetailInfo);

            }
            catch (SqlException ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }


            return dsOrderDetailInfo;
        }
        public DataTable GetOrderDetailInfoSimulation(string OrderDetailIDList, string OrderQuantity, string sortType)
        {///simulation on order form currently put on hold Manisha 12th May 
            DataSet dsOrderDetailInfo = new DataSet();

            try
            {
                string cmdText = "sp_order_get_orderdetail_info";

                SqlCommand cmd = new SqlCommand(cmdText);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailIDList", SqlDbType.VarChar);
                param.Value = OrderDetailIDList;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Sort", SqlDbType.VarChar);
                param.Value = sortType;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsOrderDetailInfo);

            }
            catch (SqlException ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }


            #region cuttingTab
            int CuttingDetailID = 0;
            int PcsCut = 0;
            int PcsIssued = 0;
            int OrderDetailID = 0;
            int TotalQuantity = 0;
            int Quantity = 0;
            int PcsLeft = 0;
            int PcsIssuedLeft = 0;
            int ActQuantity = 0;
            int ActIssueQuantity = 0;
            int extraPcs = 0;
            int extraPcsAdj = 0;
            int extraIssue = 0;
            int extraIssueAdj = 0;
            DataSet ds = dsOrderDetailInfo;
            DataTable dt = new DataTable();
            dt.Columns.Add("ID");
            dt.Columns.Add("Quantity");
            dt.Columns.Add("Cutting");
            dt.Columns.Add("Stitching");
            dt.Columns.Add("Packing");
            string[] splitDetail;
            string[] splitQuantity;
            splitDetail = OrderDetailIDList.Split(',');
            splitQuantity = OrderQuantity.Split(',');
            for (int i = 0; i < splitDetail.Length; i++)
            {
                DataRow dr = dt.NewRow();
                dr["ID"] = splitDetail[i];
                dr["Quantity"] = splitQuantity[i];
                dt.Rows.Add(dr);
            }
            dt.DefaultView.Sort = "Quantity" + " " + sortType;
            DataTable dtSplit = dt.DefaultView.ToTable();

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[2].Rows.Count > 0)
                {
                    CuttingDetailID = (ds.Tables[2].Rows[0]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["Id"]);
                    PcsCut = (ds.Tables[2].Rows[0]["PcsCut"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["PcsCut"]);
                    PcsIssued = (ds.Tables[2].Rows[0]["PcsIssued"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[2].Rows[0]["PcsIssued"]);
                }

                if (ds.Tables[1].Rows.Count > 0)
                {
                    TotalQuantity = (ds.Tables[1].Rows[0]["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["TotalQuantity"]);
                }

                extraPcs = PcsCut - TotalQuantity;
                if (extraPcs > 0)
                {
                    PcsCut = PcsCut - extraPcs;
                }
                else extraPcs = 0;

                extraIssue = PcsIssued - TotalQuantity;
                if (extraIssue > 0)
                {
                    PcsIssued = PcsIssued - extraIssue;
                }
                else extraIssue = 0;

                if (dtSplit.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSplit.Rows.Count; i++)
                    {
                        Quantity = (dtSplit.Rows[i]["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(dtSplit.Rows[i]["Quantity"]);

                        if (extraPcs > 0)
                        {
                            //for pcscut
                            int extraQuant = GetExtraPercentage(TotalQuantity, Quantity, extraPcs);
                            ActQuantity = Quantity + extraQuant;
                            extraPcsAdj = extraPcsAdj + extraQuant;
                        }
                        else ActQuantity = Quantity;

                        if (extraIssue > 0)
                        {
                            //for pcs issued
                            int extraIssueQuant = GetExtraPercentage(TotalQuantity, Quantity, extraIssue);
                            ActIssueQuantity = Quantity + extraIssueQuant;
                            extraIssueAdj = extraIssueAdj + extraIssueQuant;
                        }
                        else ActIssueQuantity = Quantity;

                        if (i == dtSplit.Rows.Count - 1)
                        {
                            if (extraPcs > 0)
                            {//for pcscut
                                if (extraPcsAdj > extraPcs)
                                    ActQuantity = ActQuantity - (extraPcsAdj - extraPcs);
                                else if (extraPcsAdj < extraPcs)
                                    ActQuantity = ActQuantity + (extraPcs - extraPcsAdj);
                            }

                            if (extraIssue > 0)
                            {//for pcs issued
                                if (extraIssueAdj > extraIssue)
                                    ActIssueQuantity = ActQuantity - (extraIssueAdj - extraIssue);
                                else if (extraIssueAdj < extraIssue)
                                    ActIssueQuantity = ActIssueQuantity + (extraIssue - extraIssueAdj);
                            }
                        }


                        OrderDetailID = (dtSplit.Rows[i]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(dtSplit.Rows[i]["Id"]);

                        if (i == 0)
                        {
                            if (PcsCut <= Quantity)
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, PcsCut, -1, 1, cnx, transaction);
                                PcsLeft = PcsCut - Quantity;
                            }
                            else
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 1, cnx, transaction);
                                PcsLeft = PcsCut - Quantity;
                            }

                            if (PcsIssued <= Quantity)
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, PcsIssued, 1, cnx, transaction);
                                PcsIssuedLeft = PcsIssued - Quantity;
                            }
                            else
                            {
                                //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 1, cnx, transaction);
                                PcsIssuedLeft = PcsIssued - Quantity;
                            }
                        }
                        else
                        {
                            if (TotalQuantity > PcsCut)
                            {
                                if (Quantity <= PcsLeft)
                                {
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 2, cnx, transaction);
                                    PcsLeft = PcsLeft - Quantity;
                                }
                                else
                                {
                                    if (PcsLeft < 0)
                                    {
                                        PcsLeft = 0;
                                    }
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, PcsLeft, -1, 2, cnx, transaction);
                                    PcsLeft = PcsLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsLeft)
                                {
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, ActQuantity, -1, 2, cnx, transaction);
                                    PcsLeft = PcsLeft - Quantity;
                                }
                            }
                            if (TotalQuantity > PcsIssued)
                            {
                                if (Quantity <= PcsIssuedLeft)
                                {
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 2, cnx, transaction);
                                    PcsIssuedLeft = PcsIssuedLeft - Quantity;
                                }
                                else
                                {
                                    if (PcsIssuedLeft < 0)
                                    {
                                        PcsIssuedLeft = 0;
                                    }
                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, PcsIssuedLeft, 2, cnx, transaction);
                                    PcsIssuedLeft = PcsIssuedLeft - Quantity;
                                }
                            }
                            else
                            {
                                if (Quantity <= PcsIssuedLeft)
                                {

                                    //UpdateOrderCuttingDetails(CuttingDetailID, OrderDetailID, -1, ActIssueQuantity, 2, cnx, transaction);
                                    PcsIssuedLeft = PcsIssuedLeft - Quantity;


                                }
                            }

                        }
                    }
                }
            }
            #endregion

            #region stitchingTab
            int StitchingDetailID = 0;
            int TotalPcsStitchedToday = 0;
            int OverallPcsStitched = 0;
            int PcsSent = 0;
            int PcsReceived = 0;
            int PcsPackedToday = 0;
            int OverallPcsPacked = 0;
            DateTime ExpectedFinishDate = DateTime.MinValue;


            OrderDetailID = 0;
            TotalQuantity = 0;
            Quantity = 0;
            ///
            int extraTotalPcsStitchedToday = 0;
            int extraOverallPcsStitched = 0;
            int extraPcsSent = 0;
            int extraPcsReceived = 0;
            int extraPcsPackedToday = 0;
            int extraOverallPcsPacked = 0;

            int extraTotalPcsStitchedTodayAdj = 0;
            int extraOverallPcsStitchedAdj = 0;
            int extraPcsSentAdj = 0;
            int extraPcsReceivedAdj = 0;
            int extraPcsPackedTodayAdj = 0;
            int extraOverallPcsPackedAdj = 0;

            int ActTotalPcsStitchedToday = 0;
            int ActOverallPcsStitched = 0;
            int ActPcsSent = 0;
            int ActPcsReceived = 0;
            int ActPcsPackedToday = 0;
            int ActOverallPcsPacked = 0;



            #region stitching table
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[4].Rows.Count > 0)
                {
                    StitchingDetailID = (ds.Tables[4].Rows[0]["StitchingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["StitchingDetailID"]);
                    TotalPcsStitchedToday = (ds.Tables[4].Rows[0]["TotalPcsStitchedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["TotalPcsStitchedToday"]);
                    OverallPcsStitched = (ds.Tables[4].Rows[0]["OverallPcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsStitched"]);
                    PcsSent = (ds.Tables[4].Rows[0]["PcsSent"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsSent"]);
                    PcsReceived = (ds.Tables[4].Rows[0]["PcsReceived"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsReceived"]);
                    PcsPackedToday = (ds.Tables[4].Rows[0]["PcsPackedToday"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["PcsPackedToday"]);
                    OverallPcsPacked = (ds.Tables[4].Rows[0]["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[4].Rows[0]["OverallPcsPacked"]);
                    ExpectedFinishDate = (ds.Tables[4].Rows[0]["ExpectedFinishDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(ds.Tables[4].Rows[0]["ExpectedFinishDate"]);

                }

                if (ds.Tables[1].Rows.Count > 0)
                {
                    TotalQuantity = (ds.Tables[1].Rows[0]["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["TotalQuantity"]);
                }

                ///
                extraTotalPcsStitchedToday = TotalPcsStitchedToday - TotalQuantity;
                if (extraTotalPcsStitchedToday > 0)
                {
                    TotalPcsStitchedToday = TotalPcsStitchedToday - extraTotalPcsStitchedToday;
                }
                else extraTotalPcsStitchedToday = 0;
                ////
                extraOverallPcsStitched = OverallPcsStitched - TotalQuantity;
                if (extraOverallPcsStitched > 0)
                {
                    OverallPcsStitched = OverallPcsStitched - extraOverallPcsStitched;
                }
                else extraOverallPcsStitched = 0;
                /////
                extraPcsSent = PcsSent - TotalQuantity;
                if (extraPcsSent > 0)
                {
                    PcsSent = PcsSent - extraPcsSent;
                }
                else extraPcsSent = 0;
                ////
                extraPcsReceived = PcsReceived - TotalQuantity;
                if (extraPcsReceived > 0)
                {
                    PcsReceived = PcsReceived - extraPcsReceived;
                }
                else extraPcsReceived = 0;
                ///
                extraPcsPackedToday = PcsPackedToday - TotalQuantity;
                if (extraPcsPackedToday > 0)
                {
                    PcsPackedToday = PcsPackedToday - extraPcsPackedToday;
                }
                else extraPcsPackedToday = 0;
                ////
                extraOverallPcsPacked = OverallPcsPacked - TotalQuantity;
                if (extraOverallPcsPacked > 0)
                {
                    OverallPcsPacked = OverallPcsPacked - extraOverallPcsPacked;
                }
                else extraOverallPcsPacked = 0;
                /////


                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {

                        Quantity = (ds.Tables[0].Rows[i]["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Quantity"]);
                        OrderDetailID = (ds.Tables[0].Rows[i]["Id"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);

                        if (extraTotalPcsStitchedToday > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraTotalPcsStitchedToday);
                            ActTotalPcsStitchedToday = Quantity + extraTotalPcs;
                            extraTotalPcsStitchedTodayAdj = extraTotalPcsStitchedTodayAdj + extraTotalPcs;
                        }
                        else ActTotalPcsStitchedToday = Quantity;

                        if (extraOverallPcsStitched > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsStitched);
                            ActOverallPcsStitched = Quantity + extraTotalPcs;
                            extraOverallPcsStitchedAdj = extraOverallPcsStitchedAdj + extraTotalPcs;
                        }
                        else ActOverallPcsStitched = Quantity;

                        if (extraPcsSent > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraPcsSent);
                            ActPcsSent = Quantity + extraTotalPcs;
                            extraPcsSentAdj = extraPcsSentAdj + extraTotalPcs;
                        }
                        else ActPcsSent = Quantity;

                        if (extraPcsReceived > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsStitched);
                            ActPcsReceived = Quantity + extraTotalPcs;
                            extraPcsReceivedAdj = extraPcsReceivedAdj + extraTotalPcs;
                        }
                        else ActPcsReceived = Quantity;

                        if (extraPcsPackedToday > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraPcsPackedToday);
                            ActPcsPackedToday = Quantity + extraTotalPcs;
                            extraPcsPackedTodayAdj = extraPcsPackedTodayAdj + extraTotalPcs;
                        }
                        else ActPcsPackedToday = Quantity;

                        if (extraOverallPcsPacked > 0)
                        {
                            int extraTotalPcs = GetExtraPercentage(TotalQuantity, Quantity, extraOverallPcsPacked);
                            ActOverallPcsPacked = Quantity + extraTotalPcs;
                            extraOverallPcsPackedAdj = extraOverallPcsPackedAdj + extraTotalPcs;
                        }
                        else ActOverallPcsPacked = Quantity;


                        if (i == ds.Tables[0].Rows.Count - 1)
                        {/// only for last row
                            //pcs Stitched
                            if (extraTotalPcsStitchedToday > 0)
                            {
                                if (extraTotalPcsStitchedTodayAdj > extraTotalPcsStitchedToday)
                                    ActTotalPcsStitchedToday = ActTotalPcsStitchedToday - (extraTotalPcsStitchedTodayAdj - extraTotalPcsStitchedToday);
                                else if (extraTotalPcsStitchedTodayAdj < extraTotalPcsStitchedToday)
                                    ActTotalPcsStitchedToday = ActTotalPcsStitchedToday + (extraTotalPcsStitchedToday - extraTotalPcsStitchedTodayAdj);
                            }

                            if (extraOverallPcsStitched > 0)
                            {
                                if (extraOverallPcsStitchedAdj > extraOverallPcsStitched)
                                    ActOverallPcsStitched = ActOverallPcsStitched - (extraOverallPcsStitchedAdj - extraOverallPcsStitched);
                                else if (extraOverallPcsStitchedAdj < extraOverallPcsStitched)
                                    ActOverallPcsStitched = ActOverallPcsStitched + (extraOverallPcsStitched - extraOverallPcsStitchedAdj);
                            }

                            //Pcs Sent & Recieved
                            if (extraPcsSent > 0)
                            {
                                if (extraPcsSentAdj > extraPcsSent)
                                    ActPcsSent = ActPcsSent - (extraPcsSentAdj - extraPcsSent);
                                else if (extraPcsSentAdj < extraPcsSent)
                                    ActPcsSent = ActPcsSent + (extraPcsSent - extraPcsSentAdj);
                            }

                            if (extraPcsReceived > 0)
                            {
                                if (extraPcsReceivedAdj > extraPcsReceived)
                                    ActPcsReceived = ActPcsReceived - (extraPcsReceivedAdj - extraPcsReceived);
                                else if (extraPcsReceivedAdj < extraPcsReceived)
                                    ActPcsReceived = ActPcsReceived + (extraPcsReceived - extraPcsReceivedAdj);
                            }

                            //Packing
                            if (extraPcsPackedToday > 0)
                            {
                                if (extraPcsPackedTodayAdj > extraPcsPackedToday)
                                    ActPcsPackedToday = ActPcsPackedToday - (extraPcsPackedTodayAdj - extraPcsPackedToday);
                                else if (extraPcsPackedTodayAdj < extraPcsPackedToday)
                                    ActPcsPackedToday = ActPcsPackedToday + (extraPcsPackedToday - extraPcsPackedTodayAdj);
                            }

                            if (extraOverallPcsPacked > 0)
                            {
                                if (extraOverallPcsPackedAdj > extraOverallPcsPacked)
                                    ActOverallPcsPacked = ActOverallPcsPacked - (extraOverallPcsPackedAdj - extraOverallPcsPacked);
                                else if (extraOverallPcsPackedAdj < extraOverallPcsPacked)
                                    ActOverallPcsPacked = ActOverallPcsPacked + (extraOverallPcsPacked - extraOverallPcsPackedAdj);
                            }

                        }

                        int PcsTotalPcsStitchedToday = 0;
                        if (TotalPcsStitchedToday < Quantity)
                        {
                            PcsTotalPcsStitchedToday = TotalPcsStitchedToday;
                            TotalPcsStitchedToday = 0;
                        }
                        else
                        {
                            PcsTotalPcsStitchedToday = ActTotalPcsStitchedToday;
                            TotalPcsStitchedToday = TotalPcsStitchedToday - Quantity;
                        }

                        int PcsOverallPcsStitched = 0;
                        if (OverallPcsStitched < Quantity)
                        {
                            PcsOverallPcsStitched = OverallPcsStitched;
                            OverallPcsStitched = 0;
                        }
                        else
                        {
                            PcsOverallPcsStitched = ActOverallPcsStitched;
                            OverallPcsStitched = OverallPcsStitched - Quantity;
                        }

                        int PcsPcsSent = 0;
                        if (PcsSent < Quantity)
                        {
                            PcsPcsSent = PcsSent;
                            PcsSent = 0;
                        }
                        else
                        {
                            PcsPcsSent = ActPcsSent;
                            PcsSent = PcsSent - Quantity;
                        }

                        int PcsPcsReceived = 0;
                        if (PcsReceived < Quantity)
                        {
                            PcsPcsReceived = PcsReceived;
                            PcsReceived = 0;
                        }
                        else
                        {
                            PcsPcsReceived = ActPcsReceived;
                            PcsReceived = PcsReceived - Quantity;
                        }

                        int PcsPcsPackedToday = 0;
                        if (PcsPackedToday < Quantity)
                        {
                            PcsPcsPackedToday = PcsPackedToday;
                            PcsPackedToday = 0;
                        }
                        else
                        {
                            PcsPcsPackedToday = ActPcsPackedToday;
                            PcsPackedToday = PcsPackedToday - Quantity;
                        }

                        int PcsOverallPcsPacked = 0;
                        if (OverallPcsPacked < Quantity)
                        {
                            PcsOverallPcsPacked = OverallPcsPacked;
                            OverallPcsPacked = 0;
                        }
                        else
                        {
                            PcsOverallPcsPacked = ActOverallPcsPacked;
                            OverallPcsPacked = OverallPcsPacked - Quantity;
                        }
                        //UpdateOrderStitchingDetails(StitchingDetailID, OrderDetailID, PcsTotalPcsStitchedToday, PcsOverallPcsStitched, PcsPcsSent, PcsPcsReceived, PcsPcsPackedToday, PcsOverallPcsPacked, 1, ExpectedFinishDate, cnx, transaction);

                    }


                }
            }
            #endregion
            #endregion

            #region packingTab
            if (ds.Tables[6].Rows.Count > 0)
            {
                OrderDetailID = (ds.Tables[1].Rows[0]["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(ds.Tables[1].Rows[0]["OrderDetailID"]);
            }

            DataTable dtNew1 = new DataTable();
            dtNew1 = ds.Tables[6];

            if (ds.Tables[4].Rows.Count > 0)
            {
                int k = 0;
                int bal = 0;
                int kPcs = 0;
                int lPcs = 0;
                for (int i = 0; i < ds.Tables[4].Rows.Count; i++)
                {
                    kPcs = Convert.ToInt32(ds.Tables[4].Rows[i]["OverallPcsPacked"]);
                    for (int j = k; j < dtNew1.Rows.Count; j++)
                    {
                        dtNew1.Rows[j]["OrderDetailId"] = ds.Tables[4].Rows[i]["OrderDetailId"];
                        lPcs = Convert.ToInt32(dtNew1.Rows[j]["PcsPacked"]);
                        kPcs = kPcs - lPcs;
                        if (kPcs <= 0)
                        {
                            bal = -kPcs;
                            lPcs = lPcs - bal;
                            dtNew1.Rows[j]["PcsPacked"] = lPcs.ToString();
                            if (bal > 0)
                            {
                                DataRow dr = dtNew1.NewRow();
                                dtNew1.Rows.InsertAt(dr, j + 1);
                                dr.ItemArray = dtNew1.Rows[j].ItemArray;
                                dr["PcsPacked"] = bal.ToString();
                            }
                            k = j + 1;
                            break;
                        }
                    }
                }
            }
            #endregion

            return dtSplit;
        }

        public bool UpdateOrderDetailSize(OrderDetailSizes orderDetailSizes, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_size_update_order_detail_size";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = orderDetailSizes.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Size", SqlDbType.VarChar);
            param.Value = orderDetailSizes.Size;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Quantity", SqlDbType.VarChar);
            param.Value = orderDetailSizes.Quantity;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Singles", SqlDbType.Int);
            if (orderDetailSizes.Singles != null)
            {
                param.Value = orderDetailSizes.Singles;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);


            param = new SqlParameter("@RatioPack", SqlDbType.Int);
            if (orderDetailSizes.RatioPack.HasValue)
            {
                param.Value = orderDetailSizes.RatioPack;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Ratio", SqlDbType.Int);
            if (orderDetailSizes.RatioPack.HasValue)
            {
                param.Value = orderDetailSizes.Ratio;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderDetailSizeID", SqlDbType.Int);
            param.Value = orderDetailSizes.OrderDetailSizeID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            return true;

        }

        // Update By Ravi kumar on 3/4/18 for order form
        public bool UpdateOrderDetail(OrderDetail orderDetail, string owner, int type, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_update_order_detail";

            SqlCommand cmd = new SqlCommand(cmdText, cnx, transaction);
            //cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@Id", SqlDbType.Int);
            param.Value = orderDetail.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@LineItemNumber", SqlDbType.VarChar);
            param.Value = orderDetail.LineItemNumber;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ContractNumber", SqlDbType.VarChar);
            param.Value = orderDetail.ContractNumber;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric1", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric1.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric1Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric1Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric2", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric2.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric2Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric2Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric3", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric3.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric3Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric3Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric4", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric4.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Fabric4Details", SqlDbType.VarChar);
            param.Value = orderDetail.Fabric4Details.Trim();
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);


            param = new SqlParameter("@Quantity", SqlDbType.Int);
            param.Value = Convert.ToInt32(orderDetail.Quantity);
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderID", SqlDbType.Int);
            param.Value = orderDetail.OrderID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Mode", SqlDbType.VarChar);
            param.Value = orderDetail.Mode;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ModeName", SqlDbType.VarChar);
            if (orderDetail.ModeName != null)
            {
                param.Value = orderDetail.ModeName;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@hdnCostingId", SqlDbType.Int);
            param.Value = orderDetail.hdnCostingId;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);


            param = new SqlParameter("@iKandiPrice", SqlDbType.Float);
            param.Value = orderDetail.iKandiPrice;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BIPLPrice", SqlDbType.Float);
            if (orderDetail.odBIPLPrice != 0)
            {
                param.Value = orderDetail.odBIPLPrice;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ExFactory", SqlDbType.DateTime);
            param.Value = orderDetail.ExFactory;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@WeekToEx", SqlDbType.Int);
            param.Value = orderDetail.WeekToEx;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@DC", SqlDbType.DateTime);
            param.Value = orderDetail.DC;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@WeeksToDC", SqlDbType.Int);
            param.Value = orderDetail.WeeksToDC;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@STCAllocated", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@STCUnallocated", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@InlineCut", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@CuttingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@StitchingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ExFactoryPlanned", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ApprovedToExFactory", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@PackingETA", SqlDbType.DateTime);
            param.Value = DBNull.Value;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BulkTarget", SqlDbType.DateTime);
            param.Value = orderDetail.BulkTarget;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@LabDipTarget", SqlDbType.DateTime);
            param.Value = orderDetail.LabDipTarget;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BulkApprovalTarget", SqlDbType.DateTime);
            param.Value = orderDetail.BulkApprovalTarget;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsQuantityInc", SqlDbType.Int);
            param.Value = orderDetail.isQuantityInc;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsAirFabric1", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric1;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsAirFabric2", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric2;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsAirFabric3", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric3;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsAirFabric4", SqlDbType.Bit);
            param.Value = orderDetail.IsAirFabric4;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IAFabric1", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric1;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IAFabric2", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric2;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IAFabric3", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric3;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IAFabric4", SqlDbType.Bit);
            param.Value = orderDetail.IAFabric4;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ApprovedId", SqlDbType.Int);
            param.Value = type;//manisha 28th march
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderOwner", SqlDbType.VarChar);
            param.Value = owner;//manisha 28th march
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            //Added By Ashish on 14/11/2014 for Save SizeOption
            param = new SqlParameter("@SizeOption", SqlDbType.Int);
            //if (string.IsNullOrEmpty(orderDetail.SizeOption))
            if (orderDetail.SizeOption != 0)
            {

                param.Value = orderDetail.SizeOption;
            }
            else
            {
                param.Value = 0;

            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);
            //END

            // Update by Ravi kumar on 18/12/2014
            param = new SqlParameter("@IsPCdateChange", SqlDbType.Int);
            param.Value = orderDetail.IsPCdateChange;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);
            //End Update by Ravi kumar on 18/12/2014

            param = new SqlParameter("@UserName", SqlDbType.VarChar);
            param.Value = this.LoggedInUser.UserData.FullName;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@UserId", SqlDbType.Int);
            param.Value = this.LoggedInUser.UserData.UserID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsSplit", SqlDbType.Bit);
            param.Value = orderDetail.isSplit;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            int i = cmd.ExecuteNonQuery();

            return true;
        }

        public bool UpdateCostingAgreedPrice(OrderDetail orderDetail, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_costing_update_agreed_price";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@hdnMode", SqlDbType.VarChar);
            if (orderDetail.hdnMode != null)
            {
                param.Value = orderDetail.hdnMode;
            }
            else
            {
                param.Value = DBNull.Value;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@hdnCostingId", SqlDbType.Int);
            param.Value = orderDetail.hdnCostingId;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@KandiPrice", SqlDbType.Int);
            param.Value = orderDetail.iKandiPrice;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            return true;

        }

        // Update By Ravi kumar on 27-1-15 For Limitation form
        public bool UpdateOrderLimitation(OrderLimitation orderLimitation)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                SqlTransaction transaction = null;

                try
                {
                    if (cnx.State == ConnectionState.Closed)
                    {
                        cnx.Open();
                    }
                    //cnx.Open();
                    transaction = cnx.BeginTransaction();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_order_limitation_update_order_limitation";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx, transaction);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderLimitation.OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@FabricComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.FabricComments == null ? "" : orderLimitation.FabricComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.AccessoriesComments == null ? "" : orderLimitation.AccessoriesComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@MerchandisingComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.MerchandisingComments == null ? "" : orderLimitation.MerchandisingComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@kandiComments", SqlDbType.VarChar);
                    param.Value = orderLimitation.IkandiComments == null ? "" : orderLimitation.IkandiComments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.FabricApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricApprovedOn", SqlDbType.DateTime);
                    if (orderLimitation.FabricApprovedOn == DateTime.MinValue)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.FabricApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.AccessoriesApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccessoriesApprovedOn", SqlDbType.DateTime);
                    if (orderLimitation.AccessoriesApprovedOn == DateTime.MinValue)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.AccessoriesApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@MerchandisingApprovedByMgr", SqlDbType.Int);
                    param.Value = orderLimitation.MerchandisingApprovedByMgr;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MerchandisingApprovedOn", SqlDbType.DateTime);
                    if (orderLimitation.MerchandisingApprovedOn == DateTime.MinValue)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.MerchandisingApprovedOn;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    // Add By Ravi kumar on 5/12/2014

                    param = new SqlParameter("@CalcFabric1Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric1Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric1Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric2Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric2Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric2Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric3Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric3Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric3Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcFabric4Days", SqlDbType.Int);
                    if (orderLimitation.CalcFabric4Days == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcFabric4Days;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    // End Adding By ravi on 5/12/2014

                    // Add By Ravi kumar on 27/01/2015
                    param = new SqlParameter("@BasicCMT", SqlDbType.Int);
                    if (orderLimitation.BasicCMT == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BasicCMT;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@barrierdaysCMT", SqlDbType.Int);
                    if (orderLimitation.BarrierDaysCMT == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BarrierDaysCMT;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BasicBarrierDays", SqlDbType.Int);
                    if (orderLimitation.BasicBarrierDays == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.BasicBarrierDays;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CalcBarrierDays", SqlDbType.Int);
                    if (orderLimitation.CalcBarrierDays == 0)
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = orderLimitation.CalcBarrierDays;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    // End By Ravi kumar on 27/01/2015


                    cmd.ExecuteNonQuery();

                    foreach (OrderDetail orderDetail in orderLimitation.Order.OrderBreakdown)
                    {
                        if (orderDetail.OrderID > 0)
                            UpdateOrderDetailETAs(orderDetail, cnx, transaction);
                    }

                    transaction.Commit();
                }
                catch (SqlException ex)
                {
                    transaction.Rollback();
                    throw ex;
                }
            }
            return true;

        }

        // End By Ravi kumar on 21-1-15 For Limitation form

        // Update By Ravi kumar on 8-12-14 For Limitation form
        private bool UpdateOrderDetailETAs(OrderDetail orderDetail, SqlConnection cnx, SqlTransaction transaction)
        {
            string cmdText = "sp_order_detail_update_bulk_eta";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            cmd.Transaction = transaction;

            SqlParameter param;
            param = new SqlParameter("@OrderID", SqlDbType.Int);
            param.Value = orderDetail.OrderID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = orderDetail.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BIHFabric1", SqlDbType.DateTime);
            if ((orderDetail.BIHFabric1 == DateTime.MinValue) || (orderDetail.BIHFabric1 == Convert.ToDateTime("1753-01-01")) || (orderDetail.BIHFabric1 == Convert.ToDateTime("1900-01-01")))
            {
                param.Value = DBNull.Value;
            }
            else
            {
                param.Value = orderDetail.BIHFabric1;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BIHFabric2", SqlDbType.DateTime);
            if ((orderDetail.BIHFabric2 == DateTime.MinValue) || (orderDetail.BIHFabric2 == Convert.ToDateTime("1753-01-01")) || (orderDetail.BIHFabric2 == Convert.ToDateTime("1900-01-01")))
            {
                param.Value = DBNull.Value;
            }
            else
            {
                param.Value = orderDetail.BIHFabric2;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BIHFabric3", SqlDbType.DateTime);
            if ((orderDetail.BIHFabric3 == DateTime.MinValue) || (orderDetail.BIHFabric3 == Convert.ToDateTime("1753-01-01")) || (orderDetail.BIHFabric3 == Convert.ToDateTime("1900-01-01")))
            {
                param.Value = DBNull.Value;
            }
            else
            {
                param.Value = orderDetail.BIHFabric3;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@BIHFabric4", SqlDbType.DateTime);
            if ((orderDetail.BIHFabric4 == DateTime.MinValue) || (orderDetail.BIHFabric4 == Convert.ToDateTime("1753-01-01")) || (orderDetail.BIHFabric4 == Convert.ToDateTime("1900-01-01")))
            {
                param.Value = DBNull.Value;
            }
            else
            {
                param.Value = orderDetail.BIHFabric4;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@PCDdate", SqlDbType.DateTime);
            if ((orderDetail.PCDDATE == DateTime.MinValue) || (orderDetail.PCDDATE == Convert.ToDateTime("1753-01-01")) || (orderDetail.PCDDATE == Convert.ToDateTime("1900-01-01")))
            {
                param.Value = DBNull.Value;
            }
            else
            {
                param.Value = orderDetail.PCDDATE;
            }
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@UserID", SqlDbType.Int);
            param.Value = this.LoggedInUser.UserData.UserID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();

            return true;
        }
        // End Update By Ravi kumar on 8-12-14 For Limitation form

        // Update By Ravi kumar on 14-1-15 For Limitation form
        public Order GetOrderById(int OrderID)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_Id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                //param.Value = SerialNumber;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.InvoiceLocation = (reader["InvoiceLocation"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["InvoiceLocation"]);
                        order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
                        order.Style.client = new Client();
                        order.Style.cdept = new ClientDepartment();
                        order.Costing = new Costing();
                        order.OrderID = OrderID;
                        order.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        order.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        order.IsIkandiClient = (reader["IsIkandiClient"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IsIkandiClient"]);
                        order.Style.client.Address = reader["Address"].ToString();
                        order.Style.client.CompanyName = (reader["CompanyName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CompanyName"]);
                        order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        order.Style.cdept.Name = reader["DepartmentName"].ToString();
                        order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
                        order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
                        order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        order.AccountManagerName = reader["AccountManagerName"].ToString();
                        order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
                        order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
                        order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
                        order.Style.client.CompanyName = reader["CompanyName"].ToString();
                        order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
                        order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
                        order.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
                        order.Costing.CurrencySign = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.Costing.ConvertTo);
                        order.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL1"]);
                        order.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL2"]);
                        order.StatusModeSequence = reader["StatusModeSequence"] == DBNull.Value ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                        order.History = (reader["History"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["History"]);
                        order.IsBiplAgreement = (reader["IsBiplAgreement"] == DBNull.Value) ? 2 : Convert.ToInt32(reader["IsBiplAgreement"]);
                        order.TypeOfPacking = Convert.ToInt32(reader["TypeOfPacking"]);

                        //Added By Ashish on 31/10/2014
                        order.PatternSampleDate = (reader["PatternSampleDate"] == DBNull.Value || reader["PatternSampleDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["PatternSampleDate"]);
                        order.PCDDate = (reader["PCDDate"] == DBNull.Value || reader["PCDDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["PCDDate"]);
                        order.ProductionFileDate = (reader["ProductionFileDate"] == DBNull.Value || reader["ProductionFileDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["ProductionFileDate"]);

                        order.StichedStartDate = (reader["StichedStartDate"] == DBNull.Value || reader["StichedStartDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["StichedStartDate"]);

                        order.BIHdate = (reader["BIH_Date"] == DBNull.Value || reader["BIH_Date"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BIH_Date"]);

                        //END

                        // Added By Ravi kumar on 5-12-2014                      

                        order.OrderBreakdown = GetOrderDetailById(OrderID);
                        order.OrderLimitation = GetOrderLimitation(OrderID);

                        //Added by abhishek on 13/1/2015

                        order.LabdipTargetETA = (reader["LabdipTargetETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["LabdipTargetETA"]);
                        //End by abhishek on 13/1/2015
                    }
                }
            }
            return order;
        }
        // End Update By Ravi kumar on 14-1-15 For Limitation form

        //public Order GetOrderByIdOrderForm(int OrderID)
        //{
        //    Order order = new Order();
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        SqlDataReader reader;
        //        SqlCommand cmd;
        //        string cmdText;

        //        cmdText = "sp_orders_get_order_by_IdOrderForm";
        //        cmd = new SqlCommand(cmdText, cnx);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param = new SqlParameter("@OrderId", SqlDbType.Int);
        //        param.Value = OrderID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        reader = cmd.ExecuteReader();

        //        if (reader.HasRows)
        //        {
        //            while (reader.Read())
        //            {
        //                order.InvoiceLocation = (reader["InvoiceLocation"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["InvoiceLocation"]);
        //                order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
        //                order.Style.client = new Client();
        //                order.Style.cdept = new ClientDepartment();
        //                order.Costing = new Costing();
        //                order.OrderID = OrderID;
        //                order.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
        //                order.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
        //                order.Style.client.Address = reader["Address"].ToString();
        //                order.Style.client.CompanyName = (reader["CompanyName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CompanyName"]);
        //                order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
        //                order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
        //                order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
        //                order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
        //                order.Style.cdept.Name = reader["DepartmentName"].ToString();
        //                order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
        //                order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
        //                order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
        //                order.AccountManagerName = reader["AccountManagerName"].ToString();
        //                order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
        //                order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
        //                order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
        //                //order.Style.client.CompanyName = reader["CompanyName"].ToString();
        //                order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
        //                order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
        //                order.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
        //                order.Costing.CurrencySign = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.Costing.ConvertTo);
        //                order.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL1"]);
        //                order.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL2"]);
        //                order.StatusModeSequence = reader["StatusModeSequence"] == DBNull.Value ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
        //                order.History = (reader["History"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["History"]);
        //                order.IsBiplAgreement = (reader["IsBiplAgreement"] == DBNull.Value) ? 2 : Convert.ToInt32(reader["IsBiplAgreement"]);
        //                order.TypeOfPacking = Convert.ToInt32(reader["TypeOfPacking"]);
        //                //order.OrderBreakdown = GetOrderDetailById(OrderID);
        //                order.OrderBreakdown = GetOrderDetailByIdOrderForm(OrderID);
        //                order.OrderLimitation = GetOrderLimitation(OrderID);
        //                //manisha 28th March
        //                order.IsApproved = (reader["IsApproved"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["IsApproved"]);

        //                order.StyleNumber_d = (reader["StyleNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["StyleNumber_d"]);
        //                order.CompanyName_d = (reader["CompanyName_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["CompanyName_d"]);
        //                order.Description_d = (reader["Description_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Description_d"]);
        //                order.Name_d = reader["DepartmentName_d"].ToString();
        //                order.Comments_d = (reader["Comments_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Comments_d"]);
        //                order.TotalQuantity_d = (reader["TotalQuantity_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["TotalQuantity_d"]);                        
        //                order.BulkETA_d = (reader["BulkETA_d"] == DBNull.Value || reader["BulkETA_d"].ToString() == "-1") ? DateTime.MinValue : (reader["BulkETA"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]));
        //                order.BiplPrice_d = (reader["BiplPrice_d"] == DBNull.Value) ? -1 : Convert.ToDouble(reader["BiplPrice_d"]);
        //                order.ConvertTo_d = (reader["ConvertTo_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo_d"]);
        //                order.CurrencySign_d = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.ConvertTo_d);
        //                order.TypeOfPacking_d = Convert.ToInt32(reader["TypeOfPacking_d"]);
        //                order.TypeOfPackingName = (reader["TypeOfPackingName"] == DBNull.Value) ? "-1" : Convert.ToString(reader["TypeOfPackingName"]);
        //                order.OrderBreakdown_d = GetOrderDetailByIdOrderForm(OrderID);
        //                // Update By Ravi kumar on 11/8/15 For add style from order
        //                order.BaseStyle = (reader["BaseStyle"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["BaseStyle"]);
        //                order.CQDName = (reader["CQDName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CQDName"]);

        //                //added by abhishek on 1/10/2016
        //                order.OrderTypes = (reader["OrderType"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["OrderType"]);
        //                order.OutHousePrice = (reader["OutHousePrice"] == DBNull.Value) ? -1 : Convert.ToDouble(reader["OutHousePrice"]);

        //                order.Costing.CMT = (reader["CMT"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CMT"]);
        //                order.BIHdate = (reader["BIHTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["BIHTarget"]);
        //                order.BulkApprTarget = (reader["BulkApprTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkApprTarget"]);
        //                order.InitialApprTarget = (reader["InitialApprTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["InitialApprTarget"]);
        //                order.ProdDays = (reader["ProdDays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["ProdDays"]);

        //            }
        //        }
        //    }
        //    return order;
        //}
        public Order GetOrderByIdOrderForm(int OrderID)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_IdOrderForm";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        //order.InvoiceLocation = (reader["InvoiceLocation"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["InvoiceLocation"]);
                        order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
                        order.Style.client = new Client();
                        order.Style.cdept = new ClientDepartment();
                        order.Costing = new Costing();
                        order.OrderID = OrderID;
                        order.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        order.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        order.Style.client.Address = reader["Address"].ToString();
                        order.Style.client.CompanyName = (reader["CompanyName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CompanyName"]);
                        order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        order.Costing.ParentDepartmentID = (reader["ParrentDepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["ParrentDepartmentID"]);
                        order.Costing.ParentDepartment = reader["ParentDeptName"].ToString();
                        order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        order.Style.cdept.Name = reader["DepartmentName"].ToString();
                        order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
                        order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
                        order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        order.AccountManagerName = reader["AccountManagerName"].ToString();
                        order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
                        order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
                        order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
                        order.Style.client.CompanyName = reader["CompanyName"].ToString();
                        order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
                        order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
                        order.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
                        order.Costing.CurrencySign = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.Costing.ConvertTo);
                        order.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL1"]);
                        order.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL2"]);
                        order.StatusModeSequence = reader["StatusModeSequence"] == DBNull.Value ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                        order.History = (reader["History"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["History"]);
                        order.IsBiplAgreement = (reader["IsBiplAgreement"] == DBNull.Value) ? 2 : Convert.ToInt32(reader["IsBiplAgreement"]);
                        order.TypeOfPacking = Convert.ToInt32(reader["TypeOfPacking"]);
                        order.OrderBreakdown = GetOrderDetailByIdOrderForm(OrderID);
                        order.OrderLimitation = GetOrderLimitation(OrderID);
                        order.IsApproved = (reader["IsApproved"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["IsApproved"]);

                        order.StyleNumber_d = (reader["StyleNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["StyleNumber_d"]);
                        order.CompanyName_d = (reader["CompanyName_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["CompanyName_d"]);
                        order.Description_d = (reader["Description_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Description_d"]);
                        order.Name_d = reader["DepartmentName_d"].ToString();
                        order.Costing.ParentDepartment_d = reader["ParentDeptName_d"].ToString();

                        order.Comments_d = (reader["Comments_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Comments_d"]);
                        order.TotalQuantity_d = (reader["TotalQuantity_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["TotalQuantity_d"]);
                        order.BulkETA_d = (reader["BulkETA_d"] == DBNull.Value || reader["BulkETA_d"].ToString() == "-1") ? DateTime.MinValue : (reader["BulkETA"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]));
                        order.BiplPrice_d = (reader["BiplPrice_d"] == DBNull.Value) ? -1 : Convert.ToDouble(reader["BiplPrice_d"]);
                        order.ConvertTo_d = (reader["ConvertTo_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo_d"]);
                        order.CurrencySign_d = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.ConvertTo_d);
                        order.TypeOfPacking_d = Convert.ToInt32(reader["TypeOfPacking_d"]);
                        order.TypeOfPackingName = (reader["TypeOfPackingName"] == DBNull.Value) ? "-1" : Convert.ToString(reader["TypeOfPackingName"]);
                        order.OrderBreakdown_d = GetOrderDetailByIdOrderForm(OrderID);
                        // Update By Ravi kumar on 11/8/15 For add style from order
                        order.BaseStyle = (reader["BaseStyle"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["BaseStyle"]);
                        order.CQDName = (reader["CQDName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CQDName"]);

                        //added by abhishek on 1/10/2016
                        order.OrderTypes = (reader["OrderType"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["OrderType"]);
                        order.OutHousePrice = (reader["OutHousePrice"] == DBNull.Value) ? -1 : Convert.ToDouble(reader["OutHousePrice"]);

                    }
                }
            }
            return order;
        }

        public int GetAuthenticatCutting(int OrderId)
        {
            DataSet dscheckpermission = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "Usp_CheckCutting_Permission";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderId", SqlDbType.Int);
                paramIn.Value = OrderId;
                cmd.Parameters.Add(paramIn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dscheckpermission);
                return Convert.ToInt32(dscheckpermission.Tables[0].Rows[0][0].ToString());
            }
        }
        public Order GetOrderByOrderDetailId(int OrderDetailID)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_orderdetailId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
                        order.Style.client = new Client();
                        order.Style.cdept = new ClientDepartment();
                        order.Costing = new Costing();
                        order.OrderID = (reader["ID"] == DBNull.Value || Convert.ToString(reader["ID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ID"]); ;
                        order.Style.client.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        order.ClientID = order.Style.client.ClientID;
                        order.Style.client.Address = reader["Address"].ToString();
                        order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        order.Style.cdept.Name = reader["DepartmentName"].ToString();
                        order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
                        order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
                        order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        order.AccountManagerName = reader["AccountManagerName"].ToString();
                        order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
                        order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
                        order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
                        order.Style.client.CompanyName = reader["CompanyName"].ToString();
                        order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
                        order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
                        //int AgreedPrice = reader.GetOrdinal("AgreedPrice");
                        //if (reader.IsDBNull(AgreedPrice) == false)
                        //{
                        //    order.Costing.AgreedPrice = Convert.ToDouble(reader["AgreedPrice"]);
                        //}
                        //else
                        //{
                        //    order.Costing.AgreedPrice = 0;
                        //}

                        order.OrderBreakdown = GetOrderDetailById(order.OrderID);
                        order.OrderLimitation = GetOrderLimitation(order.OrderID);

                    }
                }
            }
            return order;
        }
        public Order GetOrderByOrderDetailId_Forprocessworkflow(int OrderDetailID)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_orderdetailId_Forprocessworkflow";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
                        order.Style.client = new Client();
                        order.Style.cdept = new ClientDepartment();
                        order.Costing = new Costing();
                        order.OrderID = (reader["ID"] == DBNull.Value || Convert.ToString(reader["ID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ID"]); ;
                        order.Style.client.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        order.ClientID = order.Style.client.ClientID;
                        order.Style.client.Address = reader["Address"].ToString();
                        order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        order.Style.cdept.Name = reader["DepartmentName"].ToString();
                        order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
                        order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
                        order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        order.AccountManagerName = reader["AccountManagerName"].ToString();
                        order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
                        order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
                        order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
                        order.Style.client.CompanyName = reader["CompanyName"].ToString();
                        order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
                        order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
                        //int AgreedPrice = reader.GetOrdinal("AgreedPrice");
                        //if (reader.IsDBNull(AgreedPrice) == false)
                        //{
                        //    order.Costing.AgreedPrice = Convert.ToDouble(reader["AgreedPrice"]);
                        //}
                        //else
                        //{
                        //    order.Costing.AgreedPrice = 0;
                        //}

                        order.OrderBreakdown = GetOrderDetailById(order.OrderID);
                        order.OrderLimitation = GetOrderLimitation(order.OrderID);

                    }
                }
            }
            return order;
        }

        public List<OrderDetail> GetOrder(string styleCodeVersion, int deptID)
        {
            List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_style_code_version_and_deptId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleCodeVersion", SqlDbType.VarChar);
                param.Value = styleCodeVersion;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DeptId", SqlDbType.Int);
                param.Value = deptID;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetail orderDetail = new OrderDetail();
                        orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                        orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                        orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                        orderDetail.File = (reader["File"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["File"]);
                        orderDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                        orderDetail.Fabric2Details = (reader["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Details"]);
                        orderDetail.Fabric3Details = (reader["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Details"]);
                        orderDetail.Fabric4Details = (reader["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Details"]);
                        var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                            result = 0;
                        }

                        var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                            result = 0;
                        }

                        var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                            result = 0;
                        }

                        var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                            result = 0;
                        }

                        orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                        orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                        orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                        orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);
                        orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                        orderDetail.Mode = Convert.ToInt32(reader["Mode"]);
                        orderDetail.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                        orderDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);
                        orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                        orderDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                        orderDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                        orderDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                        orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                        orderDetail.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                        orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Quantity"]);
                        orderDetail.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                        orderDetail.Fabric2Quantity = (reader["Fabric2Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Quantity"]);
                        orderDetail.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                        orderDetail.Fabric3Quantity = (reader["Fabric3Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Quantity"]);
                        orderDetail.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                        orderDetail.Fabric4Quantity = (reader["Fabric4Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Quantity"]);
                        orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                        orderDetail.Status = (reader["Status"] == DBNull.Value) ? "" : Convert.ToString(reader["Status"]);
                        orderDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);
                        orderDetail.StatusModeSequence = (reader["StatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                        orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                        orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                        orderDetail.LabDipTarget = (reader["LabDipTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["LabDipTarget"]) : DateTime.MinValue;
                        orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkApprovalTarget"]) : DateTime.MinValue;
                        orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;

                        orderDetail.ParentOrder = new Order();
                        int styleID = (reader["StyleID"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["StyleID"]);

                        orderDetail.ParentOrder.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId(styleID); // this object should be filled from OrderController 
                        orderDetail.ParentOrder.Style.StyleID = styleID;

                        orderDetail.ParentOrder.Style.client = new Client();

                        orderDetail.ParentOrder.Style.cdept = new ClientDepartment();

                        orderDetail.ParentOrder.Costing = new Costing();
                        orderDetail.ParentOrder.OrderID = (reader["OrderID"] != DBNull.Value) ? Convert.ToInt32(reader["OrderID"]) : 0;
                        orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32((reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : reader["ClientID"]);
                        orderDetail.ParentOrder.ClientID = orderDetail.ParentOrder.Style.client.ClientID;
                        orderDetail.ParentOrder.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        orderDetail.ParentOrder.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        orderDetail.ParentOrder.Description = (reader["OrderDescription"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["OrderDescription"]);
                        orderDetail.ParentOrder.Style.cdept.Name = reader["DepartmentName"].ToString();
                        orderDetail.ParentOrder.TotalQuantity = (reader["TotalQuantity"] != DBNull.Value) ? Convert.ToInt32(reader["TotalQuantity"]) : 0;
                        orderDetail.ParentOrder.AccountManagerName = (reader["AccountManagerName"] != DBNull.Value) ? reader["AccountManagerName"].ToString() : String.Empty;
                        orderDetail.ParentOrder.AccountManagerID = (reader["AccountManagerID"] != DBNull.Value) ? Convert.ToInt32(reader["AccountManagerID"]) : 0;
                        orderDetail.ParentOrder.Style.client.CompanyName = reader["CompanyName"].ToString();
                        orderDetail.ParentOrder.BuyingHouseID = Convert.ToInt32(reader["BuyingHouseID"]);
                        orderDetail.ParentOrder.IsIkandiClient = Convert.ToInt32(reader["IsIkandiClient"]);
                        int AgreedPrice = reader.GetOrdinal("AgreedPrice");
                        if (reader.IsDBNull(AgreedPrice) == false)
                        {
                            orderDetail.ParentOrder.Costing.AgreedPrice = Convert.ToDouble(reader["AgreedPrice"]);
                        }
                        else
                        {
                            orderDetail.ParentOrder.Costing.AgreedPrice = 0;
                        }

                        orderDetail.ParentOrder.IsRepeat = (reader["IsRepeat"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsRepeat"]);
                        orderDetail.ParentOrder.StatusModeSequence = reader["StatusModeSequence"] == DBNull.Value ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                        orderDetail.ParentOrder.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
                        //manisha 28th March
                        orderDetail.ParentOrder.IsApproved = (reader["IsApproved"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["IsApproved"]);
                        orderDetailCollection.Add(orderDetail);
                    }
                }
            }
            return orderDetailCollection;
        }


        public List<Order> GetOrderByCurrentDate(DateTime CurrentDate, int bCheck)
        {
            List<Order> orderCollection = new List<Order>();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_currentDate_New";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@CurrentDate", SqlDbType.DateTime);
                param.Value = CurrentDate;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@bCheck", SqlDbType.Int);
                param.Value = bCheck;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        Order order = new Order();
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.ClientID = Convert.ToInt32(reader["ClientID"]);
                        string History = Convert.ToString(reader["History"]);
                        if (History.ToString().IndexOf("$$") > -1)
                        {
                            History = History.ToString().Replace("$$", "<br/>");
                        }
                        order.History = History;
                        orderCollection.Add(order);
                    }
                }
            }
            return orderCollection;
        }

        // Add By Ravi kumar on 4-12-14 For limitation Form
        public List<OrderDetail> GetOrderDetailById(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_get_order_detail_by_orderId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        if (reader["Id"] != DBNull.Value && Convert.ToInt32(reader["Id"]) > 0)
                        {
                            OrderDetail orderDetail = new OrderDetail();
                            orderDetail.ParentOrder = new Order();
                            orderDetail.ParentOrder.Print = new Print();
                            orderDetail.ParentOrder.Costing = new Costing();

                            orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                            orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                            orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            orderDetail.File1 = (reader["File1"] == DBNull.Value || reader["File1"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File1"]);
                            orderDetail.File2 = (reader["File2"] == DBNull.Value || reader["File2"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File2"]);
                            orderDetail.File3 = (reader["File3"] == DBNull.Value || reader["File3"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File3"]);
                            orderDetail.File4 = (reader["File4"] == DBNull.Value || reader["File4"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File4"]);
                            orderDetail.Fabric1Details = (reader["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1DetailsRef"]);
                            orderDetail.Fabric2Details = (reader["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2DetailsRef"]);
                            orderDetail.Fabric3Details = (reader["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3DetailsRef"]);
                            orderDetail.Fabric4Details = (reader["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4DetailsRef"]);
                            var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                result = 0;

                            }

                            var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                result = 0;
                            }



                            var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                result = 0;
                            }


                            var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                result = 0;
                            }

                            orderDetail.AccessoriesRemarks = (reader["AccessoriesRemarks"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["AccessoriesRemarks"]);
                            orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                            orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                            orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                            orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);
                            orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                            orderDetail.Mode = Convert.ToInt32(reader["Mode"]);
                            orderDetail.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                            orderDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);
                            orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                            // Edit by surendra on 29-Nov-2013
                            orderDetail.PCDDate = (reader["PCDDate"] != DBNull.Value) ? Convert.ToDateTime(reader["PCDDate"]) : DateTime.MinValue;
                            //End
                            orderDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                            orderDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                            orderDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                            orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                            orderDetail.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                            orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Quantity"]);
                            orderDetail.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                            orderDetail.Fabric2Quantity = (reader["Fabric2Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Quantity"]);
                            orderDetail.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                            orderDetail.Fabric3Quantity = (reader["Fabric3Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Quantity"]);
                            orderDetail.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                            orderDetail.Fabric4Quantity = (reader["Fabric4Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Quantity"]);
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.Status = (reader["Status"] == DBNull.Value) ? "" : Convert.ToString(reader["Status"]);
                            orderDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);
                            orderDetail.StatusModeSequence = (reader["StatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                            orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.LabDipTarget = (reader["LabDipTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["LabDipTarget"]) : DateTime.MinValue;
                            orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkApprovalTarget"]) : DateTime.MinValue;
                            orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;
                            orderDetail.ParentOrder.Print.ImageUrl = (reader["ImageUrl"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ImageUrl"]);
                            //orderDetail.ExFactoryColor = iKandi.BLL.CommonHelper.GetExFactoryColor(orderDetail.ExFactory, orderDetail.DC, orderDetail.Mode);
                            orderDetail.IsAirFabric1 = (reader["IsAirFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric1"]);
                            orderDetail.IsAirFabric2 = (reader["IsAirFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric2"]);
                            orderDetail.IsAirFabric3 = (reader["IsAirFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric3"]);
                            orderDetail.IsAirFabric4 = (reader["IsAirFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric4"]);

                            orderDetail.IAFabric1 = (reader["IAFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric1"]);
                            orderDetail.IAFabric2 = (reader["IAFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric2"]);
                            orderDetail.IAFabric3 = (reader["IAFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric3"]);
                            orderDetail.IAFabric4 = (reader["IAFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric4"]);


                            /// Using new properties which was added in order.cs By Yatendra 
                            orderDetail.CCGSM1 = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                            orderDetail.CCGSM2 = (reader["Fabric21"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric21"]);
                            orderDetail.CCGSM3 = (reader["Fabric31"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric31"]);
                            orderDetail.CCGSM4 = (reader["Fabric41"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric41"]);


                            if (reader["Fab1QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab1QualityId"]) > 0)
                                orderDetail.Fabric1Origin = (reader["Fabric1Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric1Origin"]);

                            if (reader["Fab2QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab2QualityId"]) > 0)
                                orderDetail.Fabric2Origin = (reader["Fabric2Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric2Origin"]);

                            if (reader["Fab3QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab3QualityId"]) > 0)
                                orderDetail.Fabric3Origin = (reader["Fabric3Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric3Origin"]);

                            if (reader["Fab4QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab4QualityId"]) > 0)
                                orderDetail.Fabric4Origin = (reader["Fabric4Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric4Origin"]);

                            // Add By Ravi kumar on 4-12-14

                            orderDetail.Fabric1STCAverage = (reader["Fabric1STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1STCAverage"]);
                            orderDetail.Fabric2STCAverage = (reader["Fabric2STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2STCAverage"]);
                            orderDetail.Fabric3STCAverage = (reader["Fabric3STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3STCAverage"]);
                            orderDetail.Fabric4STCAverage = (reader["Fabric4STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4STCAverage"]);
                            orderDetail.BIHFabric1 = (reader["BIHFabric1"] != DBNull.Value) ? Convert.ToDateTime(reader["BIHFabric1"]) : DateTime.MinValue;
                            orderDetail.BIHFabric2 = (reader["BIHFabric2"] != DBNull.Value) ? Convert.ToDateTime(reader["BIHFabric2"]) : DateTime.MinValue;
                            orderDetail.BIHFabric3 = (reader["BIHFabric3"] != DBNull.Value) ? Convert.ToDateTime(reader["BIHFabric3"]) : DateTime.MinValue;
                            orderDetail.BIHFabric4 = (reader["BIHFabric4"] != DBNull.Value) ? Convert.ToDateTime(reader["BIHFabric4"]) : DateTime.MinValue;
                            // End Adding By Ravi kumar on 4-12-14


                            /////////////////////////////////////////////////////////////////////////////////////////////


                            orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);

                            orderDetailCollection.Add(orderDetail);
                        }
                    }
                }

                return orderDetailCollection;
            }
        }
        // End By Ravi kumar on 4-12-14 For limitation Form

        public List<OrderDetail> GetOrderDetailByIdOrderForm(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_get_order_detail_by_orderIdOrderForm";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        if (reader["Id"] != DBNull.Value && Convert.ToInt32(reader["Id"]) > 0)
                        {
                            OrderDetail orderDetail = new OrderDetail();
                            orderDetail.ParentOrder = new Order();
                            orderDetail.ParentOrder.Print = new Print();
                            orderDetail.ParentOrder.Costing = new Costing();

                            orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                            orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                            orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                            //Added By Ashish on 29/10/2014 for Get Size Option
                            orderDetail.SizeOption = (reader["SizeOption"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["SizeOption"]);
                            //END
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            orderDetail.File = (reader["File"] == DBNull.Value || reader["File"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File"]);
                            orderDetail.File1 = (reader["File1"] == DBNull.Value || reader["File1"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File1"]);
                            orderDetail.File2 = (reader["File2"] == DBNull.Value || reader["File2"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File2"]);
                            orderDetail.File3 = (reader["File3"] == DBNull.Value || reader["File3"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File3"]);
                            orderDetail.File4 = (reader["File4"] == DBNull.Value || reader["File4"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File4"]);
                            orderDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                            orderDetail.Fabric2Details = (reader["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Details"]);
                            orderDetail.Fabric3Details = (reader["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Details"]);
                            orderDetail.Fabric4Details = (reader["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Details"]);
                            orderDetail.Fabric1Desc = (reader["Fabric1Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Desc"]);
                            orderDetail.Fabric2Desc = (reader["Fabric2Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Desc"]);
                            orderDetail.Fabric3Desc = (reader["Fabric3Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Desc"]);
                            orderDetail.Fabric4Desc = (reader["Fabric4Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Desc"]);
                            var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                result = 0;

                            }

                            var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                result = 0;
                            }



                            var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                result = 0;
                            }


                            var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                result = 0;
                            }

                            orderDetail.AccessoriesRemarks = (reader["AccessoriesRemarks"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["AccessoriesRemarks"]);
                            orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                            orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                            orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                            orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);
                            orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                            orderDetail.Mode = Convert.ToInt32(reader["Mode"]);
                            orderDetail.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                            orderDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);

                            //Added by Ravi kumar on 02-04-18 for BIPL price contract wise
                            orderDetail.odBIPLPrice = (reader["BIPLPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BIPLPrice"]);
                            orderDetail.odOldBIPLPrice = (reader["OldBiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["OldBiplPrice"]);
                            orderDetail.IsShiped = (reader["IsShiped"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsShiped"]);
                            //End by Ravi kumar on 02-04-18 for BIPL price contract wise

                            orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                            // add PCD date by ravi kumar on 11/3/2015
                            orderDetail.PCDDate = (reader["PCDDate"] != DBNull.Value) ? Convert.ToDateTime(reader["PCDDate"]) : DateTime.MinValue;
                            orderDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                            orderDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                            orderDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                            orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                            orderDetail.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                            orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Quantity"]);
                            orderDetail.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                            orderDetail.Fabric2Quantity = (reader["Fabric2Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Quantity"]);
                            orderDetail.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                            orderDetail.Fabric3Quantity = (reader["Fabric3Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Quantity"]);
                            orderDetail.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                            orderDetail.Fabric4Quantity = (reader["Fabric4Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Quantity"]);
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.Status = (reader["Status"] == DBNull.Value) ? "" : Convert.ToString(reader["Status"]);
                            orderDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);
                            orderDetail.StatusModeSequence = (reader["StatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                            orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.LabDipTarget = (reader["LabDipTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["LabDipTarget"]) : DateTime.MinValue;
                            orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkApprovalTarget"]) : DateTime.MinValue;
                            orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;
                            orderDetail.ParentOrder.Print.ImageUrl = (reader["ImageUrl"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ImageUrl"]);
                            //orderDetail.ExFactoryColor = iKandi.BLL.CommonHelper.GetExFactoryColor(orderDetail.ExFactory, orderDetail.DC, orderDetail.Mode);
                            orderDetail.IsAirFabric1 = (reader["IsAirFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric1"]);
                            orderDetail.IsAirFabric2 = (reader["IsAirFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric2"]);
                            orderDetail.IsAirFabric3 = (reader["IsAirFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric3"]);
                            orderDetail.IsAirFabric4 = (reader["IsAirFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric4"]);

                            orderDetail.IAFabric1 = (reader["IAFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric1"]);
                            orderDetail.IAFabric2 = (reader["IAFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric2"]);
                            orderDetail.IAFabric3 = (reader["IAFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric3"]);
                            orderDetail.IAFabric4 = (reader["IAFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric4"]);


                            /// Using new properties which was added in order.cs By Yatendra 
                            orderDetail.CCGSM1 = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                            orderDetail.CCGSM2 = (reader["Fabric21"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric21"]);
                            orderDetail.CCGSM3 = (reader["Fabric31"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric31"]);
                            orderDetail.CCGSM4 = (reader["Fabric41"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric41"]);


                            if (reader["Fab1QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab1QualityId"]) > 0)
                                orderDetail.Fabric1Origin = (reader["Fabric1Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric1Origin"]);

                            if (reader["Fab2QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab2QualityId"]) > 0)
                                orderDetail.Fabric2Origin = (reader["Fabric2Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric2Origin"]);

                            if (reader["Fab3QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab3QualityId"]) > 0)
                                orderDetail.Fabric3Origin = (reader["Fabric3Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric3Origin"]);

                            if (reader["Fab4QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab4QualityId"]) > 0)
                                orderDetail.Fabric4Origin = (reader["Fabric4Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric4Origin"]);

                            /////////////////////////////////////////////////////////////////////////////////////////////

                            orderDetail.LineItemNumber_d = (reader["LineItemNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["LineItemNumber_d"]);
                            orderDetail.ContractNumber_d = (reader["ContractNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["ContractNumber_d"]);
                            orderDetail.File_d = (reader["File_d"] == DBNull.Value || reader["File_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File_d"]);
                            orderDetail.File1_d = (reader["File1_d"] == DBNull.Value || reader["File1_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File1_d"]);
                            orderDetail.File2_d = (reader["File2_d"] == DBNull.Value || reader["File2_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File2_d"]);
                            orderDetail.File3_d = (reader["File3_d"] == DBNull.Value || reader["File3_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File3_d"]);
                            orderDetail.File4_d = (reader["File4_d"] == DBNull.Value || reader["File4_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File4_d"]);
                            orderDetail.Fabric1Details_d = (reader["Fabric1Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric1Details_d"]);
                            orderDetail.Fabric2Details_d = (reader["Fabric2Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric2Details_d"]);
                            orderDetail.Fabric3Details_d = (reader["Fabric3Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric3Details_d"]);
                            orderDetail.Fabric4Details_d = (reader["Fabric4Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric4Details_d"]);
                            var Fab1Det_d = orderDetail.Fabric1Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det_d[0]) && Int32.TryParse(Fab1Det_d[0], out result) && (Fab1Det_d.Length == 1 || (Fab1Det_d.Length == 2 && Fab1Det_d[1].Length <= 2)))
                            {
                                if (Fab1Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric1Details_d = "PRD:" + orderDetail.Fabric1Details_d;
                                    result = 0;
                                }
                            }

                            var Fab2Det_d = orderDetail.Fabric2Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det_d[0]) && Int32.TryParse(Fab2Det_d[0], out result) && (Fab2Det_d.Length == 1 || (Fab2Det_d.Length == 2 && Fab2Det_d[1].Length <= 2)))
                            {
                                if (Fab2Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric2Details_d = "PRD:" + orderDetail.Fabric2Details_d;
                                    result = 0;
                                }
                            }

                            var Fab3Det_d = orderDetail.Fabric3Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det_d[0]) && Int32.TryParse(Fab3Det_d[0], out result) && (Fab3Det_d.Length == 1 || (Fab3Det_d.Length == 2 && Fab3Det_d[1].Length <= 2)))
                            {
                                if (Fab3Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric3Details_d = "PRD:" + orderDetail.Fabric3Details_d;
                                    result = 0;
                                }
                            }

                            var Fab4Det_d = orderDetail.Fabric4Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det_d[0]) && Int32.TryParse(Fab4Det_d[0], out result) && (Fab4Det_d.Length == 1 || (Fab4Det_d.Length == 2 && Fab4Det_d[1].Length <= 2)))
                            {
                                if (Fab4Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric4Details_d = "PRD:" + orderDetail.Fabric4Details_d;
                                    result = 0;
                                }
                            }

                            orderDetail.Fabric1_d = (reader["Fabric1_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric1_d"]);
                            orderDetail.Fabric2_d = (reader["Fabric2_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric2_d"]);
                            orderDetail.Fabric3_d = (reader["Fabric3_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric3_d"]);
                            orderDetail.Fabric4_d = (reader["Fabric4_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric4_d"]);
                            orderDetail.IAFabric1Text_d = (reader["IAFabric1_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric1_d"]);
                            orderDetail.IAFabric2Text_d = (reader["IAFabric2_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric2_d"]);
                            orderDetail.IAFabric3Text_d = (reader["IAFabric3_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric3_d"]);
                            orderDetail.IAFabric4Text_d = (reader["IAFabric4_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric4_d"]);
                            orderDetail.Quantity_d = Convert.ToInt32(reader["Quantity_d"]);
                            orderDetail.Mode_d = (reader["Mode_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Mode_d"]);
                            orderDetail.ModeName_d = (reader["ModeName_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["ModeName_d"]);
                            orderDetail.iKandiPrice_d = Convert.ToDouble(reader["iKandiPrice_d"]);
                            orderDetail.ExFactory_d = (reader["ExFactory_d"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory_d"]) : DateTime.MinValue;
                            orderDetail.DC_d = (reader["DC_d"] != DBNull.Value) ? Convert.ToDateTime(reader["DC_d"]) : DateTime.MinValue;
                            orderDetail.WeekToEx_d = Convert.ToInt32(reader["WeekToEx_d"]);
                            orderDetail.WeeksToDC_d = Convert.ToInt32(reader["WeeksToDC_d"]);
                            orderDetail.IsPartShipment = Convert.ToBoolean(reader["IsPartShipment"]);

                            if (orderDetail.IAFabric1Text_d == "1")
                                orderDetail.IAFabric1Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric1Text_d == "0")
                                orderDetail.IAFabric1Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric2Text_d == "1")
                                orderDetail.IAFabric2Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric2Text_d == "0")
                                orderDetail.IAFabric2Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric3Text_d == "1")
                                orderDetail.IAFabric3Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric3Text_d == "0")
                                orderDetail.IAFabric3Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric4Text_d == "1")
                                orderDetail.IAFabric4Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric4Text_d == "0")
                                orderDetail.IAFabric4Text_d = "IA:Unchecked";

                            //if (orderDetail.IAFabric1_d = false || (orderDetail.IAFabric1_d == orderDetail.IAFabric1))
                            //{
                            //    orderDetail.IAFabric1Text_d = "";
                            //}
                            //if (orderDetail.IAFabric2_d = false || (orderDetail.IAFabric2_d == orderDetail.IAFabric2))
                            //{
                            //    orderDetail.IAFabric2Text_d = "";
                            //}
                            //if (orderDetail.IAFabric3_d = false || (orderDetail.IAFabric3_d == orderDetail.IAFabric3))
                            //{
                            //    orderDetail.IAFabric3Text_d = "";
                            //}
                            //if (orderDetail.IAFabric4_d = false || (orderDetail.IAFabric4_d == orderDetail.IAFabric4))
                            //{
                            //    orderDetail.IAFabric4Text_d = "";
                            //}


                            //orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);

                            orderDetail.OrderSizes = GetOrderDetailSizeAndQuantity(orderDetail.OrderDetailID, orderDetail.SizeOption);
                            // add list for accessories detail by sushil
                            // orderDetail.OrderAccDetail = GetOrderAccDetail(OrderID);
                            // end code
                            orderDetailCollection.Add(orderDetail);
                        }
                    }
                }

                return orderDetailCollection;
            }
        }

        // code add by sushil 
        public OrderDetail[] GetOrderDetailByIdOrderForm_s(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_get_order_detail_by_orderIdOrderForm";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        if (reader["Id"] != DBNull.Value && Convert.ToInt32(reader["Id"]) > 0)
                        {
                            OrderDetail orderDetail = new OrderDetail();
                            orderDetail.ParentOrder = new Order();
                            orderDetail.ParentOrder.Print = new Print();
                            orderDetail.ParentOrder.Costing = new Costing();

                            orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                            orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                            orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            orderDetail.File = (reader["File"] == DBNull.Value || reader["File"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File"]);
                            orderDetail.File1 = (reader["File1"] == DBNull.Value || reader["File1"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File1"]);
                            orderDetail.File2 = (reader["File2"] == DBNull.Value || reader["File2"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File2"]);
                            orderDetail.File3 = (reader["File3"] == DBNull.Value || reader["File3"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File3"]);
                            orderDetail.File4 = (reader["File4"] == DBNull.Value || reader["File4"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File4"]);
                            orderDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                            orderDetail.Fabric2Details = (reader["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Details"]);
                            orderDetail.Fabric3Details = (reader["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Details"]);
                            orderDetail.Fabric4Details = (reader["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Details"]);
                            orderDetail.Fabric1Desc = (reader["Fabric1Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Desc"]);
                            orderDetail.Fabric2Desc = (reader["Fabric2Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Desc"]);
                            orderDetail.Fabric3Desc = (reader["Fabric3Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Desc"]);
                            orderDetail.Fabric4Desc = (reader["Fabric4Desc"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Desc"]);
                            var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                result = 0;

                            }

                            var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                result = 0;
                            }



                            var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                result = 0;
                            }


                            var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                result = 0;
                            }

                            orderDetail.AccessoriesRemarks = (reader["AccessoriesRemarks"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["AccessoriesRemarks"]);
                            orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                            orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                            orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                            orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);
                            orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                            orderDetail.Mode = Convert.ToInt32(reader["Mode"]);
                            orderDetail.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                            orderDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);
                            orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                            orderDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                            orderDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                            orderDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                            orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                            orderDetail.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                            orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Quantity"]);
                            orderDetail.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                            orderDetail.Fabric2Quantity = (reader["Fabric2Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Quantity"]);
                            orderDetail.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                            orderDetail.Fabric3Quantity = (reader["Fabric3Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Quantity"]);
                            orderDetail.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                            orderDetail.Fabric4Quantity = (reader["Fabric4Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Quantity"]);
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.Status = (reader["Status"] == DBNull.Value) ? "" : Convert.ToString(reader["Status"]);
                            orderDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);
                            orderDetail.StatusModeSequence = (reader["StatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                            orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.LabDipTarget = (reader["LabDipTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["LabDipTarget"]) : DateTime.MinValue;
                            orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkApprovalTarget"]) : DateTime.MinValue;
                            orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;
                            orderDetail.ParentOrder.Print.ImageUrl = (reader["ImageUrl"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ImageUrl"]);
                            //orderDetail.ExFactoryColor = iKandi.BLL.CommonHelper.GetExFactoryColor(orderDetail.ExFactory, orderDetail.DC, orderDetail.Mode);
                            orderDetail.IsAirFabric1 = (reader["IsAirFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric1"]);
                            orderDetail.IsAirFabric2 = (reader["IsAirFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric2"]);
                            orderDetail.IsAirFabric3 = (reader["IsAirFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric3"]);
                            orderDetail.IsAirFabric4 = (reader["IsAirFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric4"]);

                            orderDetail.IAFabric1 = (reader["IAFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric1"]);
                            orderDetail.IAFabric2 = (reader["IAFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric2"]);
                            orderDetail.IAFabric3 = (reader["IAFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric3"]);
                            orderDetail.IAFabric4 = (reader["IAFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric4"]);


                            /// Using new properties which was added in order.cs By Yatendra 
                            orderDetail.CCGSM1 = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                            orderDetail.CCGSM2 = (reader["Fabric21"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric21"]);
                            orderDetail.CCGSM3 = (reader["Fabric31"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric31"]);
                            orderDetail.CCGSM4 = (reader["Fabric41"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric41"]);


                            if (reader["Fab1QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab1QualityId"]) > 0)
                                orderDetail.Fabric1Origin = (reader["Fabric1Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric1Origin"]);

                            if (reader["Fab2QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab2QualityId"]) > 0)
                                orderDetail.Fabric2Origin = (reader["Fabric2Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric2Origin"]);

                            if (reader["Fab3QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab3QualityId"]) > 0)
                                orderDetail.Fabric3Origin = (reader["Fabric3Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric3Origin"]);

                            if (reader["Fab4QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab4QualityId"]) > 0)
                                orderDetail.Fabric4Origin = (reader["Fabric4Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric4Origin"]);

                            /////////////////////////////////////////////////////////////////////////////////////////////

                            orderDetail.LineItemNumber_d = (reader["LineItemNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["LineItemNumber_d"]);
                            orderDetail.ContractNumber_d = (reader["ContractNumber_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["ContractNumber_d"]);
                            orderDetail.File_d = (reader["File_d"] == DBNull.Value || reader["File_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File_d"]);
                            orderDetail.File1_d = (reader["File1_d"] == DBNull.Value || reader["File1_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File1_d"]);
                            orderDetail.File2_d = (reader["File2_d"] == DBNull.Value || reader["File2_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File2_d"]);
                            orderDetail.File3_d = (reader["File3_d"] == DBNull.Value || reader["File3_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File3_d"]);
                            orderDetail.File4_d = (reader["File4_d"] == DBNull.Value || reader["File4_d"].ToString() == "-1") ? "-1" : Convert.ToString(reader["File4_d"]);
                            orderDetail.Fabric1Details_d = (reader["Fabric1Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric1Details_d"]);
                            orderDetail.Fabric2Details_d = (reader["Fabric2Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric2Details_d"]);
                            orderDetail.Fabric3Details_d = (reader["Fabric3Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric3Details_d"]);
                            orderDetail.Fabric4Details_d = (reader["Fabric4Details_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric4Details_d"]);
                            var Fab1Det_d = orderDetail.Fabric1Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det_d[0]) && Int32.TryParse(Fab1Det_d[0], out result) && (Fab1Det_d.Length == 1 || (Fab1Det_d.Length == 2 && Fab1Det_d[1].Length <= 2)))
                            {
                                if (Fab1Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric1Details_d = "PRD:" + orderDetail.Fabric1Details_d;
                                    result = 0;
                                }
                            }

                            var Fab2Det_d = orderDetail.Fabric2Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det_d[0]) && Int32.TryParse(Fab2Det_d[0], out result) && (Fab2Det_d.Length == 1 || (Fab2Det_d.Length == 2 && Fab2Det_d[1].Length <= 2)))
                            {
                                if (Fab2Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric2Details_d = "PRD:" + orderDetail.Fabric2Details_d;
                                    result = 0;
                                }
                            }

                            var Fab3Det_d = orderDetail.Fabric3Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det_d[0]) && Int32.TryParse(Fab3Det_d[0], out result) && (Fab3Det_d.Length == 1 || (Fab3Det_d.Length == 2 && Fab3Det_d[1].Length <= 2)))
                            {
                                if (Fab3Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric3Details_d = "PRD:" + orderDetail.Fabric3Details_d;
                                    result = 0;
                                }
                            }

                            var Fab4Det_d = orderDetail.Fabric4Details_d.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det_d[0]) && Int32.TryParse(Fab4Det_d[0], out result) && (Fab4Det_d.Length == 1 || (Fab4Det_d.Length == 2 && Fab4Det_d[1].Length <= 2)))
                            {
                                if (Fab4Det_d[0] != "-1")
                                {
                                    orderDetail.Fabric4Details_d = "PRD:" + orderDetail.Fabric4Details_d;
                                    result = 0;
                                }
                            }

                            orderDetail.Fabric1_d = (reader["Fabric1_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric1_d"]);
                            orderDetail.Fabric2_d = (reader["Fabric2_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric2_d"]);
                            orderDetail.Fabric3_d = (reader["Fabric3_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric3_d"]);
                            orderDetail.Fabric4_d = (reader["Fabric4_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["Fabric4_d"]);
                            orderDetail.IAFabric1Text_d = (reader["IAFabric1_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric1_d"]);
                            orderDetail.IAFabric2Text_d = (reader["IAFabric2_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric2_d"]);
                            orderDetail.IAFabric3Text_d = (reader["IAFabric3_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric3_d"]);
                            orderDetail.IAFabric4Text_d = (reader["IAFabric4_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["IAFabric4_d"]);
                            orderDetail.Quantity_d = Convert.ToInt32(reader["Quantity_d"]);
                            orderDetail.Mode_d = (reader["Mode_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Mode_d"]);
                            orderDetail.ModeName_d = (reader["ModeName_d"] == DBNull.Value) ? "-1" : Convert.ToString(reader["ModeName_d"]);
                            orderDetail.iKandiPrice_d = Convert.ToDouble(reader["iKandiPrice_d"]);
                            orderDetail.ExFactory_d = (reader["ExFactory_d"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory_d"]) : DateTime.MinValue;
                            orderDetail.DC_d = (reader["DC_d"] != DBNull.Value) ? Convert.ToDateTime(reader["DC_d"]) : DateTime.MinValue;
                            orderDetail.WeekToEx_d = Convert.ToInt32(reader["WeekToEx_d"]);
                            orderDetail.WeeksToDC_d = Convert.ToInt32(reader["WeeksToDC_d"]);
                            orderDetail.IsPartShipment = Convert.ToBoolean(reader["IsPartShipment"]);

                            if (orderDetail.IAFabric1Text_d == "1")
                                orderDetail.IAFabric1Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric1Text_d == "0")
                                orderDetail.IAFabric1Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric2Text_d == "1")
                                orderDetail.IAFabric2Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric2Text_d == "0")
                                orderDetail.IAFabric2Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric3Text_d == "1")
                                orderDetail.IAFabric3Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric3Text_d == "0")
                                orderDetail.IAFabric3Text_d = "IA:Unchecked";

                            if (orderDetail.IAFabric4Text_d == "1")
                                orderDetail.IAFabric4Text_d = "IA:Checked";
                            else if (orderDetail.IAFabric4Text_d == "0")
                                orderDetail.IAFabric4Text_d = "IA:Unchecked";

                            //if (orderDetail.IAFabric1_d = false || (orderDetail.IAFabric1_d == orderDetail.IAFabric1))
                            //{
                            //    orderDetail.IAFabric1Text_d = "";
                            //}
                            //if (orderDetail.IAFabric2_d = false || (orderDetail.IAFabric2_d == orderDetail.IAFabric2))
                            //{
                            //    orderDetail.IAFabric2Text_d = "";
                            //}
                            //if (orderDetail.IAFabric3_d = false || (orderDetail.IAFabric3_d == orderDetail.IAFabric3))
                            //{
                            //    orderDetail.IAFabric3Text_d = "";
                            //}
                            //if (orderDetail.IAFabric4_d = false || (orderDetail.IAFabric4_d == orderDetail.IAFabric4))
                            //{
                            //    orderDetail.IAFabric4Text_d = "";
                            //}


                            orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);
                            // orderDetail.OrderAccDetail = GetOrderAccDetail(OrderID);

                            orderDetailCollection.Add(orderDetail);
                        }
                    }
                }

                return orderDetailCollection.ToArray();
            }
        }
        // end code by sushil

        //code add by sushil for geeting costing acc detail 
        public List<OrderAccDetail> GetOrderAccDetail(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;
                cmdText = "sp_get_costingaccessoriesdetail";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();
                List<OrderAccDetail> orderAccDetails = new List<OrderAccDetail>();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderAccDetail orderAccDetail = new OrderAccDetail();
                        orderAccDetail.AccID = Convert.ToInt32(reader["AccessoryId"]);
                        orderAccDetail.AccItem = (Convert.ToString(reader["Item"]));
                        orderAccDetail.Quantity = Convert.ToDouble(reader["Quantity"]);
                        orderAccDetail.Rate = Convert.ToDouble(reader["Rate"]);
                        orderAccDetails.Add(orderAccDetail);
                    }
                }

                return orderAccDetails;
            }
        }



        //end code 

        public List<OrderDetailSizes> GetOrderDetailSize(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_size_get_order_detail_size";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<OrderDetailSizes> orderDetailSizeCollection = new List<OrderDetailSizes>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetailSizes orderDetailSize = new OrderDetailSizes();
                        orderDetailSize.OrderDetailID = Convert.ToInt32(reader["OrderDetailID"]);
                        orderDetailSize.Size = (reader["Size"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Size"]);

                        orderDetailSize.Quantity = Convert.ToInt32(reader["Quantity"]);
                        if (orderDetailSize.Quantity == 0)
                            orderDetailSize.QuantityString = "";
                        else orderDetailSize.QuantityString = Convert.ToString(reader["Quantity"]);

                        int RatioPack = reader.GetOrdinal("RatioPack");
                        int Ratio = reader.GetOrdinal("Ratio");
                        int Singles = reader.GetOrdinal("Singles");
                        if (reader.IsDBNull(RatioPack) == false)
                        {
                            orderDetailSize.RatioPack = Convert.ToInt32(reader["RatioPack"]);
                        }
                        else
                        {
                            orderDetailSize.RatioPack = 0;
                        }
                        if (orderDetailSize.RatioPack == 0)
                            orderDetailSize.RatioPackString = "";
                        else orderDetailSize.RatioPackString = Convert.ToString(reader["RatioPack"]);

                        if (reader.IsDBNull(Ratio) == false)
                        {
                            orderDetailSize.Ratio = Convert.ToInt32(reader["Ratio"]);
                        }
                        else
                        {
                            orderDetailSize.Ratio = 0;
                        }
                        if (orderDetailSize.Ratio == 0)
                            orderDetailSize.RatioString = "";
                        else orderDetailSize.RatioString = Convert.ToString(reader["Ratio"]);


                        if (reader.IsDBNull(Singles) == false)
                        {
                            orderDetailSize.Singles = Convert.ToInt32(reader["Singles"]);
                        }
                        else
                        {
                            orderDetailSize.Singles = 0;
                        }
                        if (orderDetailSize.Singles == 0)
                            orderDetailSize.SinglesString = "";
                        else orderDetailSize.SinglesString = Convert.ToString(reader["Singles"]);

                        //orderDetailSize.Singles = (orderDetailSize.Singles != DBNull.Value) ? Convert.ToInt32(reader["Singles"]) : 0; 
                        orderDetailSize.OrderDetailSizeID = Convert.ToInt32(reader["OrderDetailSizeID"]);

                        orderDetailSizeCollection.Add(orderDetailSize);
                    }
                }

                return orderDetailSizeCollection;
            }
        }

        // Update By Ravi kumar on 27/1/2015 For Limitation form
        public List<OrderLimitation> GetOrderLimitation(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_limitation_get_order_limitation_by_id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<OrderLimitation> orderLimitationCollection = new List<OrderLimitation>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderLimitation orderLimitation = new OrderLimitation();
                        orderLimitation.OrderID = Convert.ToInt32(reader["OrderID"]);
                        orderLimitation.FabricBulkETA = (reader["FabricBulkETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["FabricBulkETA"]);
                        orderLimitation.AccessoriesBulkETA = (reader["AccessoriesBulkETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["AccessoriesBulkETA"]);
                        orderLimitation.ProductionExDate = (reader["ProductionExDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["ProductionExDate"]);
                        orderLimitation.MerchandisingSealDate = (reader["MerchandisingSealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["MerchandisingSealDate"]);
                        orderLimitation.FabricComments = (reader["FabricComments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["FabricComments"]);
                        orderLimitation.AccessoriesComments = (reader["AccessoriesComments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["AccessoriesComments"]);
                        orderLimitation.ProductionComments = (reader["ProductionComments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ProductionComments"]);
                        orderLimitation.MerchandisingComments = (reader["MerchandisingComments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["MerchandisingComments"]);
                        orderLimitation.IkandiComments = (reader["IkandiComments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["IkandiComments"]);
                        orderLimitation.BulkApprovalTarget = (reader["BulkApprovalTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkApprovalTarget"]);
                        orderLimitation.FabricLabDipStrikeETA = (reader["FabricLabDipStrikeETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["FabricLabDipStrikeETA"]);
                        orderLimitation.FabricApprovedByMgr = (reader["FabricApprovedByMgr"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["FabricApprovedByMgr"]);
                        orderLimitation.FabricApprovedOn = (reader["FabricApprovedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["FabricApprovedOn"]);
                        orderLimitation.AccessoriesApprovedByMgr = (reader["AccessoriesApprovedByMgr"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["AccessoriesApprovedByMgr"]);
                        orderLimitation.AccessoriesApprovedOn = (reader["AccessoriesApprovedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["AccessoriesApprovedOn"]);
                        orderLimitation.ProductionApprovedByMgr = (reader["ProductionApprovedByMgr"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["ProductionApprovedByMgr"]);
                        orderLimitation.ProductionApprovedOn = (reader["ProductionApprovedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["ProductionApprovedOn"]);
                        orderLimitation.MerchandisingApprovedByMgr = (reader["MerchandisingApprovedByMgr"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["MerchandisingApprovedByMgr"]);
                        orderLimitation.MerchandisingApprovedOn = (reader["MerchandisingApprovedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["MerchandisingApprovedOn"]);
                        //orderLimitation.IADays = (reader["IADays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IADays"]);
                        orderLimitation.CalcFabric1Days = (reader["CalcFabric1Days"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CalcFabric1Days"]);
                        orderLimitation.CalcFabric2Days = (reader["CalcFabric2Days"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CalcFabric2Days"]);
                        orderLimitation.CalcFabric3Days = (reader["CalcFabric3Days"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CalcFabric3Days"]);
                        orderLimitation.CalcFabric4Days = (reader["CalcFabric4Days"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CalcFabric4Days"]);

                        orderLimitation.BasicCMT = (reader["BasicCMT"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["BasicCMT"]);
                        orderLimitation.BarrierDaysCMT = (reader["barrierdaysCMT"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["barrierdaysCMT"]);
                        orderLimitation.BasicBarrierDays = (reader["BasicBarrierDays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["BasicBarrierDays"]);
                        orderLimitation.CalcBarrierDays = (reader["CalcBarrierDays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CalcBarrierDays"]);

                        if (orderLimitation.BasicCMT == 0)
                        {
                            string[] strCMTValue = GetCMTbyOrderID(OrderID, 0);
                            if (strCMTValue.Length > 0)
                            {
                                orderLimitation.BasicCMT = Convert.ToInt32(strCMTValue[0]);
                                orderLimitation.BasicBarrierDays = Convert.ToInt32(strCMTValue[1]);
                            }

                        }

                        orderLimitationCollection.Add(orderLimitation);
                    }
                }

                return orderLimitationCollection;
            }

        }

        // End By Ravi kumar on 27/1/2015 For Limitation form
        public string[] GetCMTbyOrderID(int OrderID, int BarrierDay)
        {
            OrderLimitation objLimitation = new OrderLimitation();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "usp_Efficiency_CMT_Call_ForLimitation";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BARRIER_DAYS", SqlDbType.Int);
                    param.Value = BarrierDay;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            objLimitation.BasicCMT = (reader["CMT"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CMT"]);
                            objLimitation.BasicBarrierDays = (reader["BarrierDays"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["BarrierDays"]);

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] CMT = new string[] { Convert.ToString(objLimitation.BasicCMT), Convert.ToString(objLimitation.BasicBarrierDays) };
            return CMT;
        }
        // End Update By Ravi kumar on 27-1-15 For Limitation form

        public bool DeleteOrderDetail(OrderDetail orderDetail, SqlConnection cnx, SqlTransaction transaction)
        {
            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_delete_order_detail";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);

            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = orderDetail.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();



            return true;

        }
        public bool DeleteOrderDetailSizes_new(int OrderDetailSizeID, int OrderDetailID)
        {

            //SqlDataAdapter adapter = new SqlDataAdapter();

            //string cmdText = "sp_order_detail_size_delete_order_detail_size";

            //SqlCommand cmd = new SqlCommand(cmdText, cnx);
            //cmd.Transaction = transaction;
            //cmd.CommandType = CommandType.StoredProcedure;
            //cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            //SqlParameter param;

            //param = new SqlParameter("@OrderDetailSizeID", SqlDbType.Int);
            //param.Value = objOrderDetailSizes.OrderDetailSizeID;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            //param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            //param.Value = objOrderDetailSizes.OrderDetailID;
            //param.Direction = ParameterDirection.Input;
            //cmd.Parameters.Add(param);

            //cmd.ExecuteNonQuery();


            //return true;




            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_size_delete_order_detail_size";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderDetailSizeID", SqlDbType.Int);
                param.Value = OrderDetailSizeID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();

                return true;


            }
        }
        public bool DeleteOrderDetailSizes(OrderDetailSizes objOrderDetailSizes, SqlConnection cnx, SqlTransaction transaction)
        {

            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_order_detail_size_delete_order_detail_size";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@OrderDetailSizeID", SqlDbType.Int);
            param.Value = objOrderDetailSizes.OrderDetailSizeID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
            param.Value = objOrderDetailSizes.OrderDetailID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();


            return true;
        }

        public string GetMessage(int orderID)
        {

            string GetMessage = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                SqlDataReader reader;

                cmdText = "sp_orders_get_ErrorMessage";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = orderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        GetMessage = (reader["ErrorMsg"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ErrorMsg"]);

                    }
                }
                return GetMessage;

            }
        }
        public string GetNewSerialNumber(int clientId)
        {
            Order order = new Order();
            order.Style = new Style();
            order.Style.client = new Client();
            int NewCount;
            string NewSerialNumber = "";
            int iOrderExists;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                SqlDataReader reader;

                cmdText = "sp_orders_get_new_serial_number";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = clientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.Style.client.ClientCode = (reader["ClientCode"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ClientCode"]);
                        NewCount = (reader["NewCount"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["NewCount"]);
                        iOrderExists = (reader["ExistOrder"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["ExistOrder"]);
                        if (iOrderExists == 1)
                        {
                            NewSerialNumber = order.Style.client.ClientCode + " " + NewCount.ToString("000");
                        }
                        else
                        {
                            NewSerialNumber = order.Style.client.ClientCode + " " + NewCount.ToString("001");
                        }


                    }
                }
                return NewSerialNumber;

            }
        }
        public string GetNewDescription(int styleid)
        {
            Order order = new Order();
            order.Style = new Style();
            order.Style.client = new Client();

            string NewDescription = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;
                SqlDataReader reader;

                cmdText = "sp_orders_get_new_Description";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;



                param = new SqlParameter("@Styleid", SqlDbType.Int);
                param.Value = styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        NewDescription = (reader["NewDescription"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["NewDescription"]);
                        //NewCount = (reader["NewCount"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["NewCount"]);
                        //NewSerialNumber = order.Style.client.ClientCode + " " + NewCount.ToString("000");

                    }
                }
                return NewDescription;

            }
        }

        public int GetClientId(string styleNumber)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_styles_get_style_by_number";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = styleNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();

                return 1;


            }
        }

        public int GetStyleIdByStyleNumber(string StyleNumber)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_order_get_styleid_by_style_number";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = StyleNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = Convert.ToInt32(cmd.ExecuteScalar());

                cnx.Close();

            }
            return result;

        }

        public Order GetInfoByStyleNumber(string StyleNumber)
        {
            Order order = new Order();
            order.Style = new Style();
            order.Style.client = new Client();
            order.Style.cdept = new ClientDepartment();
            order.Costing = new Costing();
            order.OrderDetail = new OrderDetail();
            order.Print = new Print();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                //  cmdText = "sp_orders_get_info_by_style_number";// by yaten
                cmdText = "sp_orders_get_info_by_style_number_new";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = StyleNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();




                int result;
                bool success;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.Style.StyleID = Convert.ToInt32(reader["StyleID"]);
                        order.Costing.DepartmentID = (reader["DepartmentId"] != DBNull.Value)
                                                         ? Convert.ToInt32(reader["DepartmentId"])
                                                         : 0;
                        order.Costing.ParentDepartmentID = (reader["ParentDepartmentID"] != DBNull.Value)
                                                         ? Convert.ToInt32(reader["ParentDepartmentID"])
                                                         : 0;
                        order.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value)
                                                          ? string.Empty
                                                          : Convert.ToString(reader["SampleImageURL1"]);
                        order.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value)
                                                          ? string.Empty
                                                          : Convert.ToString(reader["SampleImageURL2"]);
                        order.Print.ImageUrl = (reader["ImageUrl"] == DBNull.Value)
                                                   ? string.Empty
                                                   : Convert.ToString(reader["ImageUrl"]);
                        order.Style.client.OfficialName = (reader["OfficialName"] == DBNull.Value)
                                                              ? string.Empty
                                                              : Convert.ToString(reader["OfficialName"]);
                        order.Style.client.Address = (reader["Address"] == DBNull.Value)
                                                         ? string.Empty
                                                         : order.Style.client.OfficialName +
                                                           Convert.ToString(reader["Address"]);
                        double PriceQuoted = (reader["PriceQuoted"] != DBNull.Value)
                                                 ? Convert.ToDouble(reader["PriceQuoted"])
                                                 : 0;
                        order.Costing.AgreedPrice = (reader["AgreedPrice"] == DBNull.Value)
                                                        ? 0
                                                        : Convert.ToDouble(reader["AgreedPrice"]);

                        if (order.Costing.AgreedPrice == 0)
                            order.Costing.AgreedPrice = PriceQuoted;

                        order.Costing.CostingID = (reader["CostingID"] != DBNull.Value)
                                                      ? Convert.ToInt32(reader["CostingID"])
                                                      : 0;
                        order.Costing.ConvertTo = (reader["ConvertTo"] != DBNull.Value)
                                                      ? Convert.ToInt32(reader["ConvertTo"])
                                                      : -1;
                        order.Costing.CurrencySign =
                            iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.Costing.ConvertTo);
                        order.Costing.ClientID = (reader["ClientID"] != DBNull.Value)
                                                     ? Convert.ToInt32(reader["ClientID"])
                                                     : 0;

                        string fabrics = (reader["Fabrics"] == DBNull.Value)
                                             ? string.Empty
                                             : Convert.ToString(reader["Fabrics"]);

                        if (fabrics.IndexOf(",") > -1)
                        {
                            string[] fabarray = fabrics.Split(new char[] { ',' });
                            if (fabarray.Length == 1)
                            {
                                order.OrderDetail.Fabric1 = fabarray[0];
                            }
                            else if (fabarray.Length == 2)
                            {
                                order.OrderDetail.Fabric1 = fabarray[0];
                                order.OrderDetail.Fabric2 = fabarray[1];
                            }
                            else if (fabarray.Length == 3)
                            {
                                order.OrderDetail.Fabric1 = fabarray[0];
                                order.OrderDetail.Fabric2 = fabarray[1];
                                order.OrderDetail.Fabric3 = fabarray[2];
                            }
                            else if (fabarray.Length == 4)
                            {
                                order.OrderDetail.Fabric1 = fabarray[0];
                                order.OrderDetail.Fabric2 = fabarray[1];
                                order.OrderDetail.Fabric3 = fabarray[2];
                                order.OrderDetail.Fabric4 = fabarray[3];
                            }
                        }
                        else
                        {
                            if (fabrics != "")
                            {
                                order.OrderDetail.Fabric1 = fabrics;
                            }
                        }

                        string PrintIds = (reader["PrintIds"] == DBNull.Value)
                                              ? string.Empty
                                              : Convert.ToString(reader["PrintIds"]);

                        if (PrintIds.IndexOf(",") > -1)
                        {
                            string[] PrintIdsarray = PrintIds.Split(new char[] { ',' });
                            if (PrintIdsarray.Length == 1)
                            {
                                var Fab1Det = PrintIdsarray[0].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) &&
                                    (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric1Details = PrintIdsarray[0];
                                }
                                //order.OrderDetail.Fabric1Details = "PRD:"+PrintIdsarray[0];
                                order.OrderDetail.Fabric2Details = string.Empty;
                                order.OrderDetail.Fabric3Details = string.Empty;
                                order.OrderDetail.Fabric4Details = string.Empty;
                            }
                            else if (PrintIdsarray.Length == 2)
                            {
                                var Fab1Det = PrintIdsarray[0].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) &&
                                    (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric1Details = PrintIdsarray[0];
                                }

                                var Fab2Det = PrintIdsarray[1].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) &&
                                    (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric2Details = "PRD:" + PrintIdsarray[1];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric2Details = PrintIdsarray[1];
                                }
                                //order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                //order.OrderDetail.Fabric2Details = "PRD:" + PrintIdsarray[1];
                                order.OrderDetail.Fabric3Details = string.Empty;
                                order.OrderDetail.Fabric4Details = string.Empty;
                            }
                            else if (PrintIdsarray.Length == 3)
                            {
                                var Fab1Det = PrintIdsarray[0].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) &&
                                    (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric1Details = PrintIdsarray[0];
                                }

                                var Fab2Det = PrintIdsarray[1].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) &&
                                    (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric2Details = "PRD:" + PrintIdsarray[1];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric2Details = PrintIdsarray[1];
                                }

                                var Fab3Det = PrintIdsarray[2].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) &&
                                    (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric3Details = "PRD:" + PrintIdsarray[2];
                                    success = false;
                                    result = 0;

                                }
                                else
                                {
                                    order.OrderDetail.Fabric3Details = PrintIdsarray[2];
                                }

                                //order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                //order.OrderDetail.Fabric2Details = "PRD:" + PrintIdsarray[1];
                                //order.OrderDetail.Fabric3Details = "PRD:" + PrintIdsarray[2];
                                order.OrderDetail.Fabric4Details = string.Empty;
                            }
                            else if (PrintIdsarray.Length == 4)
                            {
                                var Fab1Det = PrintIdsarray[0].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) &&
                                    (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric1Details = "PRD:" + PrintIdsarray[0];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric1Details = PrintIdsarray[0];
                                }

                                var Fab2Det = PrintIdsarray[1].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) &&
                                    (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric2Details = "PRD:" + PrintIdsarray[1];
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric2Details = PrintIdsarray[1];
                                }

                                var Fab3Det = PrintIdsarray[2].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) &&
                                    (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric3Details = "PRD:" + PrintIdsarray[2];
                                    success = false;
                                    result = 0;

                                }
                                else
                                {
                                    order.OrderDetail.Fabric3Details = PrintIdsarray[2];
                                }

                                var Fab4Det = PrintIdsarray[3].Trim().Split(' ');
                                if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) &&
                                    (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                                {
                                    order.OrderDetail.Fabric4Details = "PRD:" + PrintIdsarray[3];
                                    success = false;
                                    result = 0;

                                }
                                else
                                {
                                    order.OrderDetail.Fabric4Details = PrintIdsarray[3];
                                }
                            }
                        }
                        else
                        {
                            if (PrintIds != "")
                            {
                                success = Int32.TryParse(PrintIds, out result);
                                if (success.Equals(true))
                                {
                                    order.OrderDetail.Fabric1Details = "PRD:" + PrintIds;
                                    success = false;
                                    result = 0;
                                }
                                else
                                {
                                    order.OrderDetail.Fabric1Details = PrintIds;
                                }
                            }
                        }


                        #region PrintRefNo

                        string PrintRefNOs = (reader["PrintRefNos"] == DBNull.Value)
                                             ? string.Empty
                                             : Convert.ToString(reader["PrintRefNos"]);
                        order.OrderDetail.Fabric1Desc = string.Empty;
                        order.OrderDetail.Fabric2Desc = string.Empty;
                        order.OrderDetail.Fabric3Desc = string.Empty;
                        order.OrderDetail.Fabric4Desc = string.Empty;
                        if (PrintRefNOs.IndexOf(",") > -1)
                        {
                            string[] PrintRefNOsarray = PrintRefNOs.Split(new char[] { ',' });
                            if (PrintRefNOsarray.Length > 0)
                                order.OrderDetail.Fabric1Desc = PrintRefNOsarray[0].Trim();
                            if (PrintRefNOsarray.Length > 1)
                                order.OrderDetail.Fabric2Desc = PrintRefNOsarray[1].Trim();
                            if (PrintRefNOsarray.Length > 2)
                                order.OrderDetail.Fabric3Desc = PrintRefNOsarray[2].Trim();
                            if (PrintRefNOsarray.Length > 3)
                                order.OrderDetail.Fabric4Desc = PrintRefNOsarray[3].Trim();
                        }
                        else
                        {
                            order.OrderDetail.Fabric1Desc = PrintRefNOs;
                        }

                        #endregion

                    }

                }

                return order;
            }

        }


        public int GetCut_Avg(int OrderDetailsID, string CheckInlinecut)
        {
            MOOrderDetails MOOrderDetails = new MOOrderDetails();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_Cut_Average";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailsID", SqlDbType.VarChar);
                param.Value = OrderDetailsID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DateTime dtPatternCompletedate = (reader["PatternSampledate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["PatternSampledate"]);

                        DateTime dtCuttingSheetdate = (reader["CuttingSheetdate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["CuttingSheetdate"]);

                        bool bHOPPPMComplete = (reader["HOPPMCheckComplete"] == DBNull.Value) ? false : Convert.ToBoolean(reader["HOPPMCheckComplete"]);
                        int CutCheckAvg = Convert.ToInt32(reader["CutAvg"]);
                        if (CheckInlinecut == "2")
                        {
                            if (CutCheckAvg == 0 || dtCuttingSheetdate == DateTime.MinValue || dtPatternCompletedate == DateTime.MinValue || bHOPPPMComplete == false)
                                MOOrderDetails.CutAvg = 0;
                            else
                                MOOrderDetails.CutAvg = 1;
                        }
                        else
                        {
                            if (CutCheckAvg == 0 || dtPatternCompletedate == DateTime.MinValue || bHOPPPMComplete == false)
                                MOOrderDetails.CutAvg = 0;
                            else
                                MOOrderDetails.CutAvg = 1;
                        }


                    }
                }
                return MOOrderDetails.CutAvg;
            }

        }

        public double GetDirectRepeatCut_Avg(int Styleid, string FabricName, int countFabric, string PrintDetails, int orderDetailID)
        {
            MOOrderDetails MOOrderDetails = new MOOrderDetails();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_Get_DirectRepeat_Cut_Avg";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Styleid", SqlDbType.Int);
                param.Value = Styleid;
                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);
                param = new SqlParameter("@FabricName", SqlDbType.VarChar);
                param.Value = FabricName;
                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);
                param = new SqlParameter("@iCountFabric", SqlDbType.Int);
                param.Value = countFabric;
                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);
                param = new SqlParameter("@print", SqlDbType.VarChar);
                param.Value = PrintDetails;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = orderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        double DirectRepeat = (reader["CutAvg"] == DBNull.Value) ? 0.0 : Convert.ToDouble(reader["CutAvg"]);
                        MOOrderDetails.DirectRepeat = DirectRepeat;
                    }
                }
                return MOOrderDetails.DirectRepeat;
            }

        }
        public string GetAddressByClientId(int ClientId)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_get_client_address_by_clientID";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@ClientID", SqlDbType.VarChar);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.InvoiceLocation = (reader["Address"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Address"]);

                    }
                }
                return order.InvoiceLocation;
            }

        }

        public Order GetIkandiPriceByMode(string Mode, int CostingID, string status)
        {

            Order order = new Order();

            order.Costing = new Costing();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();



                SqlDataReader reader;

                SqlParameter param;

                SqlCommand cmd;

                string cmdText;



                cmdText = "sp_orders_get_ikandi_price_by_mode";

                cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                param = new SqlParameter("@Mode", SqlDbType.VarChar);

                param.Value = Mode;

                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);



                param = new SqlParameter("@CostingID", SqlDbType.Int);

                param.Value = CostingID;

                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);



                param = new SqlParameter("@Status", SqlDbType.VarChar);

                param.Value = status;

                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);



                reader = cmd.ExecuteReader();



                if (reader.HasRows)
                {

                    while (reader.Read())
                    {

                        order.Costing.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);



                    }

                }

            }

            return order;



        }


        public List<OrderDetail> GetSealerPendingOrders(int PageSize, int PageIndex, out int TotalRowCount, String SearchText, int ClientId, int DeptId)
        {
            ////System.Diagnostics.Debugger.Break();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_get_sealer_pending_orders";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter outParam;
                outParam = new SqlParameter("@Count", SqlDbType.Int);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                SqlParameter param;
                param = new SqlParameter("@PageSize", SqlDbType.Int);
                param.Value = PageSize;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PageIndex", SqlDbType.Int);
                param.Value = PageIndex;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SearchText", SqlDbType.VarChar);
                param.Value = SearchText;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Client", SqlDbType.Int);
                param.Value = ClientId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Department", SqlDbType.Int);
                param.Value = DeptId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                int result;

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetail orderDetail = new OrderDetail();
                        orderDetail.OrderDetailID = Convert.ToInt32(reader["OrderDetailID"]);
                        orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                        orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                        orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                        orderDetail.SealerRemarksBIPL = (reader["RemarksBIPL"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["RemarksBIPL"]);
                        orderDetail.SealerRemarksiKandi = (reader["RemarksIKandi"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["RemarksIKandi"]);
                        orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                        orderDetail.StitchingETA = (reader["StitchingETA"] != DBNull.Value) ? Convert.ToDateTime(reader["StitchingETA"]) : DateTime.MinValue;

                        orderDetail.ParentOrder = new Order();
                        orderDetail.ParentOrder.SerialNumber = (reader["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SerialNumber"]);
                        orderDetail.ParentOrder.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        orderDetail.ParentOrder.OrderDate = (reader["OrderDate"] != DBNull.Value) ? Convert.ToDateTime(reader["OrderDate"]) : DateTime.MinValue;

                        orderDetail.ParentOrder.Style = new Style();
                        orderDetail.ParentOrder.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        orderDetail.ParentOrder.Style.StyleID = Convert.ToInt32(reader["StyleID"]);
                        orderDetail.ParentOrder.Style.StyleCode = (reader["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(reader["StyleCode"]);

                        orderDetail.ParentOrder.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL1"]);
                        orderDetail.ParentOrder.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL2"]);
                        orderDetail.ParentOrder.Style.SampleImageURL3 = (reader["SampleImageURL3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL3"]);

                        orderDetail.ParentOrder.Style.client = new Client();
                        orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(reader["ClientID"]);

                        orderDetail.ParentOrder.Style.cdept = new ClientDepartment();
                        orderDetail.ParentOrder.Style.cdept.Name = (reader["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DepartmentName"]);
                        orderDetail.ParentOrder.Style.cdept.DeptID = (reader["ClientDepartmentID"] != DBNull.Value) ? Convert.ToInt32(reader["ClientDepartmentID"]) : 0;
                        orderDetail.ParentOrder.Style.cdept.Mon = (reader["Mon"] != DBNull.Value) ? Convert.ToInt32(reader["Mon"]) : 0;
                        orderDetail.ParentOrder.Style.cdept.Tue = (reader["Tue"] != DBNull.Value) ? Convert.ToInt32(reader["Tue"]) : 0;
                        orderDetail.ParentOrder.Style.cdept.Wed = (reader["Wed"] != DBNull.Value) ? Convert.ToInt32(reader["Wed"]) : 0;
                        orderDetail.ParentOrder.Style.cdept.Thu = (reader["Thu"] != DBNull.Value) ? Convert.ToInt32(reader["Thu"]) : 0;
                        orderDetail.ParentOrder.Style.cdept.Fri = (reader["Fri"] != DBNull.Value) ? Convert.ToInt32(reader["Fri"]) : 0;

                        orderDetail.ParentOrder.DepartmentName = (reader["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DepartmentName"]);
                        orderDetail.ParentOrder.Style.ClientName = (reader["Buyer"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Buyer"]);
                        orderDetail.ParentOrder.Style.StyleID = (reader["StyleID"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["StyleID"]);
                        orderDetail.ParentOrder.DepartmentID = (reader["ClientDepartmentID"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ClientDepartmentID"]);

                        orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;
                        orderDetail.STCAllocated = orderDetail.SealETA;
                        orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                        orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                        orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                        orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);

                        orderDetail.CCGSM1 = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                        orderDetail.CCGSM2 = (reader["Fabric12"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric12"]);
                        orderDetail.CCGSM3 = (reader["Fabric13"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric13"]);
                        orderDetail.CCGSM4 = (reader["Fabric14"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric14"]);
                        orderDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                        orderDetail.Fabric2Details = (reader["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Details"]);
                        orderDetail.Fabric3Details = (reader["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Details"]);
                        orderDetail.Fabric4Details = (reader["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Details"]);

                        var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                            result = 0;
                        }

                        var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                            result = 0;
                        }

                        var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                            result = 0;
                        }

                        var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                            result = 0;
                        }

                        orderDetail.ParentOrder.FabricInhouseHistory = new FabricInhouseHistory();
                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = (reader["PercentInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PercentInHouse1"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = (reader["PercentInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PercentInHouse2"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = (reader["PercentInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PercentInHouse3"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = (reader["PercentInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PercentInHouse4"]);

                        orderDetail.ParentOrder.FabricInhouseHistory.PercentDate1 = (reader["Date1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date1"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.PercentDate2 = (reader["Date2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date2"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.PercentDate3 = (reader["Date3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date3"]);
                        orderDetail.ParentOrder.FabricInhouseHistory.PercentDate4 = (reader["Date4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date4"]);

                        orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                        orderDetail.Mode = (reader["Mode"] == DBNull.Value) ? 0 : (Convert.ToInt32(reader["Mode"]));
                        orderDetail.ModeName = (reader["ModeName"] == DBNull.Value) ? string.Empty : (Convert.ToString(reader["ModeName"]));

                        orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;

                        orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);

                        orderDetail.ParentOrder.InlinePPMOrderContract = new InlinePPMOrderContract(); // to get top send target and top send actual
                        orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget = (reader["TopSentTarget"] == DBNull.Value) ? orderDetail.StitchingETA : Convert.ToDateTime(reader["TopSentTarget"]);
                        orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual = (reader["TopSentActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["TopSentActual"]);
                        orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval = (reader["TopActualApproval"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["TopActualApproval"]);
                        orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus = (reader["TopStatus"] == DBNull.Value) ? TopStatusType.UNKNOWN : (TopStatusType)Convert.ToInt32(reader["TopStatus"]);

                        orderDetail.ParentOrder.Fits = new Fits();
                        orderDetail.ParentOrder.Fits.StyleCode = (reader["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(reader["StyleCode"]);
                        orderDetail.ParentOrder.Fits.StyleCodeVersion = (reader["StyleCodeVersion"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleCode"]);
                        orderDetail.ParentOrder.Fits.IsStcApproved = (reader["StcApproved"] == DBNull.Value) ? false : Convert.ToBoolean(reader["StcApproved"]);
                        orderDetail.ParentOrder.Fits.SealDate = (reader["SealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["SealDate"]);
                        orderDetail.ParentOrder.Fits.SpecsUploadTargetDate = (reader["SpecsUploadTargetDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["SpecsUploadTargetDate"]);
                        orderDetail.ParentOrder.Fits.SpecsUploadDate = (reader["SpecsUploadDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["SpecsUploadDate"]);

                        orderDetail.ParentOrder.FitsTrack = new FitsTrack();
                        orderDetail.ParentOrder.FitsTrack.CommentsSentFor = (reader["CommentsSentFor"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CommentsSentFor"]);
                        orderDetail.ParentOrder.FitsTrack.PlanningFor = (reader["PlanningFor"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["PlanningFor"]);
                        orderDetail.ParentOrder.FitsTrack.fitRequestedOn = (reader["fitRequestedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["fitRequestedOn"]);
                        orderDetail.ParentOrder.FitsTrack.AckDate = (reader["AckDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["AckDate"]);
                        orderDetail.ParentOrder.FitsTrack.NextPlannedDate = (reader["NextPlannedDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["NextPlannedDate"]);

                        orderDetail.FitStatus = Constants.GetFitsStatus(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.IsStcApproved, orderDetail.ParentOrder.Fits.SealDate,
                        orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus,
                        orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                        orderDetail.FitStatusBgColor = Constants.GetFitsStatusColor(orderDetail.ExFactory, orderDetail.STCUnallocated, orderDetail.ParentOrder.OrderDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual,
                                               orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.SealDate, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.NextPlannedDate, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.Fits.IsStcApproved,
                                               orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                        orderDetailCollection.Add(orderDetail);
                    }
                }
                reader.Close();
                TotalRowCount = Convert.ToInt32(outParam.Value);
                return orderDetailCollection;
            }
        }

        public void UpdateSanjeevRemarks(OrderDetail orderDetails)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_order_detail_update_sanjeev_remarks";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = orderDetails.OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@SanjeevRemarks", SqlDbType.VarChar);
                //param.Value = orderDetails.SanjeevRemarks;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@MerchantNotes", SqlDbType.VarChar);
                //param.Value = orderDetails.MerchantNotes;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@MDA", SqlDbType.VarChar);
                param.Value = orderDetails.MDANumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExFactory", SqlDbType.DateTime);
                param.Value = orderDetails.ExFactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@WeekToEx", SqlDbType.Int);
                param.Value = orderDetails.WeekToEx;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@STCAllocated", SqlDbType.DateTime);
                param.Value = orderDetails.STCAllocated;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@STCUnallocated", SqlDbType.DateTime);
                param.Value = orderDetails.STCUnallocated;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@nlineCut", SqlDbType.DateTime);
                param.Value = orderDetails.InlineCut;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CuttingETA", SqlDbType.DateTime);
                param.Value = orderDetails.CuttingETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StitchingETA", SqlDbType.DateTime);
                param.Value = orderDetails.StitchingETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExFactoryPlanned", SqlDbType.DateTime);
                param.Value = orderDetails.ExFactoryPlanned;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApprovedToExFactory", SqlDbType.DateTime);
                param.Value = orderDetails.ApprovedToExFactory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PackingETA", SqlDbType.DateTime);
                param.Value = orderDetails.PackingETA;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BulkTarget", SqlDbType.DateTime);
                param.Value = orderDetails.BulkTarget;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LabDipTarget", SqlDbType.DateTime);
                param.Value = orderDetails.LabDipTarget;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BulkApprovalTarget", SqlDbType.DateTime);
                param.Value = orderDetails.BulkApprovalTarget;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderHistory", SqlDbType.VarChar);
                param.Value = orderDetails.OrderHistory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }
        //public void UpdateRemarks(int Id1, int Id2, string Remarks, string Type, string ApplicationModuleName)


        //  Update ExFactory Before Saveing MO
        //public void UpdateExfactory(OrderDetail orderDetails)
        //{
        //    using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //    {
        //        cnx.Open();

        //        SqlDataAdapter adapter = new SqlDataAdapter();

        //        string cmdText = "sp_update_exfactory_beforeMO";

        //        SqlCommand cmd = new SqlCommand(cmdText, cnx);

        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
        //        SqlParameter param;

        //        param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
        //        param.Value = orderDetails.OrderDetailID;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        param = new SqlParameter("@ExFactory", SqlDbType.DateTime);
        //        param.Value = orderDetails.ExFactory;
        //        param.Direction = ParameterDirection.Input;
        //        cmd.Parameters.Add(param);

        //        cmd.ExecuteNonQuery();

        //        cnx.Close();

        //    }
        //}
        public void UpdateRemarks(int Id1, int Id2, string Remarks, string Type, string ApplicationModuleName)
        {
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_manage_order_update_remarks";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@d1", SqlDbType.Int);
                    param.Value = Id1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@d2", SqlDbType.Int);
                    param.Value = Id2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Remarks", SqlDbType.VarChar);
                    param.Value = Remarks;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.VarChar);
                    param.Value = Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ApplicationModuleName", SqlDbType.VarChar);
                    param.Value = ApplicationModuleName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    cmd.ExecuteNonQuery();

                    cnx.Close();
                }
            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
            }
        }

        public bool IscheckShippingPermission(int DesID, int DeptID, int ColId)
        {
            bool bCheckPermission = false;
            DataSet dscheckpermission = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "sp_CheckShipping_Permission";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter paramIn;

                paramIn = new SqlParameter("@DesID", SqlDbType.Int);
                paramIn.Value = DesID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@DeptID", SqlDbType.Int);
                paramIn.Value = DeptID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CoIId", SqlDbType.Int);
                paramIn.Value = ColId;
                cmd.Parameters.Add(paramIn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dscheckpermission);
                if (dscheckpermission.Tables[0].Rows.Count > 0)
                    bCheckPermission = true;
                else
                    bCheckPermission = false;


            }
            return bCheckPermission;
        }

        public DataTable IscheckShippingPermissionExFactory(int DesID, int DeptID, int ColId)
        {
            //bool bCheckPermission = false;
            DataTable dtPermission = new DataTable();
            DataSet dscheckpermission = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "sp_CheckShipping_Permission";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter paramIn;

                paramIn = new SqlParameter("@DesID", SqlDbType.Int);
                paramIn.Value = DesID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@DeptID", SqlDbType.Int);
                paramIn.Value = DeptID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CoIId", SqlDbType.Int);
                paramIn.Value = ColId;
                cmd.Parameters.Add(paramIn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dscheckpermission);
                dtPermission = dscheckpermission.Tables[0];


            }
            return dtPermission;
        }
        // Add By Ravi kumar ON 2/2/2015 For MO Sanjeev Remark

        public void UpdateRemarksSanjeev(string Remarks, string Ids, string ExFactory, int IsPcDateChanged)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_manage_order_update_remarks_sanjeev";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Remarks", SqlDbType.VarChar, 5000);
                Remarks = Remarks.Replace("<", " ");
                Remarks = Remarks.Replace(">", " ");
                Remarks = Remarks.Replace("~", " ");
                param.Value = Remarks.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Id", SqlDbType.VarChar, 500);
                param.Value = Ids;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ExFactory", SqlDbType.VarChar);
                string strFactory = ExFactory;
                string[] strExFactory = strFactory.Split('(');

                param.Value = strExFactory[0];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsPcDateChanged", SqlDbType.Int);
                param.Value = IsPcDateChanged;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserName", SqlDbType.VarChar);
                param.Value = this.LoggedInUser.UserData.FullName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
                cnx.Close();
            }
        }


        // End By Ravi kumar ON 2/2/2015 For MO Sanjeev Remark



        public bool UpdateAccesoriesApprovedDate(int AccessoryWorkingDetailID, int OrderDetailsID, string ApprovedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_accessory_approved_date";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@AccessoryWorkingDetailID", SqlDbType.Int);
                paramIn.Value = AccessoryWorkingDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);
                ApprovedDate = ApprovedDate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime abc = Convert.ToDateTime(ApprovedDate, Provider);

                paramIn = new SqlParameter("@ApprovedDate", SqlDbType.DateTime);

                paramIn.Value = abc;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdateShipmentOfferDate(int OrderDetailsID, string Shipmentdate, string UserID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Shipment_OfferDate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);


                Shipmentdate = Shipmentdate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime PrdDate = Convert.ToDateTime(Shipmentdate, Provider);
                paramIn = new SqlParameter("@ShipmentOfferDate", SqlDbType.DateTime);
                paramIn.Value = PrdDate;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@UserID", SqlDbType.Int);
                paramIn.Value = Convert.ToInt32(UserID);
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }


        public bool UpdateCuttingSheetDate(int OrderID, int StyleId, string CuttingSheetDate, int orderDetails_ID, string field)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_CuttingSheet_Date";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                paramIn.Value = OrderID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleId", SqlDbType.Int);
                paramIn.Value = StyleId;
                cmd.Parameters.Add(paramIn);
                CuttingSheetDate = CuttingSheetDate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime CutDate = Convert.ToDateTime(CuttingSheetDate, Provider);

                paramIn = new SqlParameter("@CuttingSheetDate", SqlDbType.DateTime);
                paramIn.Value = CutDate;
                cmd.Parameters.Add(paramIn);
                paramIn = new SqlParameter("@orderDetailsID", SqlDbType.Int);
                paramIn.Value = orderDetails_ID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@field", SqlDbType.NVarChar);
                paramIn.Value = field;
                cmd.Parameters.Add(paramIn);
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public int InsertUpdatePackingDetails(int OrderDetailID, int Pcspacked, int Packingpercent, int PackingBalance)
        {
            int StitchingDetailID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_update_Packing_Details";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;




                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Pcspacked", SqlDbType.Int);
                paramIn.Value = Pcspacked;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Packingpercent", SqlDbType.Int);
                paramIn.Value = Packingpercent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PackingBalance", SqlDbType.Int);
                paramIn.Value = PackingBalance;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return StitchingDetailID;
        }
        public bool UpdatePCSStitch(int OrderDetailsID, int Allcut, int StitchPicesPercent, int StitchPicesBalance, int StitchToday)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Stitch";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                //paramIn = new SqlParameter("@StitchingDetailID", SqlDbType.Int);
                //paramIn.Value = StitchingDetailID;
                //cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsStitch", SqlDbType.Int);
                paramIn.Value = StitchToday;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StitchPicesPercent", SqlDbType.Int);
                paramIn.Value = StitchPicesPercent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StitchPicesBalance", SqlDbType.Int);
                paramIn.Value = StitchPicesBalance;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StitchToday", SqlDbType.Int);
                paramIn.Value = StitchToday;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdatePCSStitch_history(int OrderDetailID, int StitchToday)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_stitched_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = DateTime.Today;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsIssued", SqlDbType.Int);
                paramIn.Value = StitchToday;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdateCutIssued(int StyleId, int OrderID, int Quantity, int OrderDetailID, int CuttingSheetId, int CuttingDetailID, int PcsIssued, int CutPiecesPercent, int CutpiecesBallance, int TodayPcsIssued, int BalanceStitched)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_cutting_issued_detail";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@CuttingSheetId", SqlDbType.Int);
                paramIn.Value = CuttingSheetId;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsIssued", SqlDbType.Int);
                paramIn.Value = TodayPcsIssued;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CutPiecesPercent", SqlDbType.Int);
                paramIn.Value = CutPiecesPercent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CutpiecesBallance", SqlDbType.Int);
                paramIn.Value = CutpiecesBallance;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@BalanceStitched", SqlDbType.Int);
                paramIn.Value = BalanceStitched;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdateCutIssued_History(int OrderDetailID, int TodayPcsIssued)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_cutting_Issued_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = DateTime.Today;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsIssued", SqlDbType.Int);
                paramIn.Value = TodayPcsIssued;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public bool InsertCuttingDetails(int CuttingSheetID, int OrderDetailID, int PcsCut, int CutPercent, int CutBallence, int BCutIssued)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_cutting_detail";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@CuttingSheetID", SqlDbType.Int);
                paramIn.Value = CuttingSheetID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsCut", SqlDbType.Int);
                paramIn.Value = PcsCut;
                cmd.Parameters.Add(paramIn);



                paramIn = new SqlParameter("@CutPercent", SqlDbType.Int);
                paramIn.Value = CutPercent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CutBallence", SqlDbType.Int);
                paramIn.Value = CutBallence;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@BCutIssued", SqlDbType.Int);
                paramIn.Value = BCutIssued;
                cmd.Parameters.Add(paramIn);


                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }



        public bool UpdateCuttingDetails(int CuttingSheetID, int ID, int OrderDetailID, int PcsCut, int CutPercent, int CutBallence, int BCutIssued)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_update_cutting_detail";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@CuttingSheetID", SqlDbType.Int);
                paramIn.Value = CuttingSheetID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CuttingDetailID", SqlDbType.Int);
                paramIn.Value = ID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsCut", SqlDbType.Int);
                paramIn.Value = PcsCut;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@CutPercent", SqlDbType.Int);
                paramIn.Value = CutPercent;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@CutBallence", SqlDbType.Int);
                paramIn.Value = CutBallence;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@BCutIssued", SqlDbType.Int);
                paramIn.Value = BCutIssued;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdateProductionFileDate(int OrderID, int StyleId, string ProductionFileDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Pattern_Sample_Production_File";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                paramIn.Value = OrderID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleId", SqlDbType.Int);
                paramIn.Value = StyleId;
                cmd.Parameters.Add(paramIn);

                ProductionFileDate = ProductionFileDate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime PrdFileDate = Convert.ToDateTime(ProductionFileDate, Provider);

                paramIn = new SqlParameter("@ProductionFileDate", SqlDbType.DateTime);
                paramIn.Value = PrdFileDate;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Check", SqlDbType.Int);
                paramIn.Value = 1;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool InsertInHouseHistory(int OrderDetailID, int AccessoryWorkingDetailID, int Quantity, int PercentInHouse)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "insert_accessory_in_house_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@AccessoryWorkingDetailID", SqlDbType.Int);
                paramIn.Value = AccessoryWorkingDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Quantity", SqlDbType.Int);
                paramIn.Value = Quantity;
                cmd.Parameters.Add(paramIn);



                paramIn = new SqlParameter("@PercentInHouse", SqlDbType.Int);
                paramIn.Value = PercentInHouse;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdatePlanneddate(int OrderDetailsID, string Planneddate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Planneddate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);
                Planneddate = Planneddate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime PD = Convert.ToDateTime(Planneddate, Provider);
                paramIn = new SqlParameter("@Planneddate", SqlDbType.DateTime);
                paramIn.Value = PD;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public int InsertStitchingDetails(int OrderDetailID, int TotalPcsStitchedToday, int OverallPcsStitched, int PcsSent, int PcsReceived, int PcsPackedToday, int OverallPcsPacked, DateTime ExpectedFinishDate, bool IsStitchingComplete)
        {
            int StitchingDetailID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_stitching_details";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;
                SqlParameter outParam;

                outParam = new SqlParameter("@d", SqlDbType.Int);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@TotalPcsStitchedToday", SqlDbType.Int);
                paramIn.Value = TotalPcsStitchedToday;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OverallPcsStitched", SqlDbType.Int);
                paramIn.Value = OverallPcsStitched;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsSent", SqlDbType.Int);
                paramIn.Value = PcsSent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsReceived", SqlDbType.Int);
                paramIn.Value = PcsReceived;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsPackedToday", SqlDbType.Int);
                paramIn.Value = PcsPackedToday;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OverallPcsPacked", SqlDbType.Int);
                paramIn.Value = OverallPcsPacked;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@ExpectedFinishDate", SqlDbType.DateTime);
                paramIn.Value = ExpectedFinishDate;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@sStitchingComplete", SqlDbType.Bit);
                paramIn.Value = IsStitchingComplete;
                cmd.Parameters.Add(paramIn);


                cmd.ExecuteNonQuery();
                StitchingDetailID = Convert.ToInt32(outParam.Value);
                cnx.Close();

            }
            return StitchingDetailID;
        }
        public int UpdateStitchingDetails(int ID, int OrderDetailID, int PcsSent, int PcsReceived, int PcsPackedToday, int OverallPcsPacked)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_update_stitching_details";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@D", SqlDbType.Int);
                paramIn.Value = ID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsSent", SqlDbType.Int);
                paramIn.Value = PcsSent;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsReceived", SqlDbType.Int);
                paramIn.Value = PcsReceived;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsPackedToday", SqlDbType.Int);
                paramIn.Value = PcsPackedToday;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OverallPcsPacked", SqlDbType.Int);
                paramIn.Value = OverallPcsPacked;
                cmd.Parameters.Add(paramIn);

                //paramIn = new SqlParameter("@ProdRemarks", SqlDbType.VarChar);
                //paramIn.Value = StitchingDetail.ProdRemarks;
                //cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return 0;
        }
        public DataSet GetManageOrderSTCPopupDetails(int OrderID)
        {
            DataSet dsAccessoryPopupDetails = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_SAM_popup_details";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                    paramIn.Value = OrderID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsAccessoryPopupDetails);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsAccessoryPopupDetails;
        }
        public bool UpdateMDA(int OrderDetailsID, string MDA)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_MDA";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@MDA", SqlDbType.VarChar);
                paramIn.Value = MDA;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool IsCheckLinePlanStichStart(int LinePlanFrameID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                //--SqlDataAdapter adapter = new SqlDataAdapter();
                DataSet dscheck = new DataSet();
                string cmdText = "USP_GetStitching_LinePlanFrameId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@LinePlanFrameID", SqlDbType.Int);
                paramIn.Value = LinePlanFrameID;
                cmd.Parameters.Add(paramIn);
                //cmd.ExecuteNonQuery();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dscheck);
                bool Bcheck = Convert.ToBoolean(dscheck.Tables[0].Rows[0]["bCheck"]);
                cnx.Close();

            }
            return true;
        }
        // Update By Ravi kumar ON 17/12/2014 For MO pcd change on Ex Factory change
        public bool UpdateExFactory(int OrderDetailsID, string ExFactory, string Username)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Exfactory";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);
                ExFactory = ExFactory.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime Ex = Convert.ToDateTime(ExFactory, Provider);
                paramIn = new SqlParameter("@ExFactory", SqlDbType.DateTime);
                paramIn.Value = Ex;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsPcDateChanged", SqlDbType.Int);
                paramIn.Value = 0;
                cmd.Parameters.Add(paramIn);
                //added by abhisek
                paramIn = new SqlParameter("@Username", SqlDbType.VarChar);
                paramIn.Value = Username;
                cmd.Parameters.Add(paramIn);
                //End

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        // Added by shubhendu 02/03/2022
        public bool UpdateBiplPriceMO(int OrderDetailsID, float BiplPrice, int Userid, string flag)
        {
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_Update_Exfactory";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Direction = ParameterDirection.Input;
                    paramIn.Value = OrderDetailsID;
                    cmd.Parameters.Add(paramIn);



                    paramIn = new SqlParameter("@BiplPrice", SqlDbType.Float);
                    paramIn.Direction = ParameterDirection.Input;
                    paramIn.Value = BiplPrice;
                    cmd.Parameters.Add(paramIn);

                    //paramIn = new SqlParameter("@IsPcDateChanged", SqlDbType.Int);
                    //paramIn.Value = 0;
                    //cmd.Parameters.Add(paramIn);
                    //added by abhisek
                    paramIn = new SqlParameter("@Userid", SqlDbType.Int);
                    paramIn.Direction = ParameterDirection.Input;
                    paramIn.Value = Userid;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@Username", SqlDbType.VarChar);
                    paramIn.Direction = ParameterDirection.Input;
                    paramIn.Value = "";
                    cmd.Parameters.Add(paramIn);
                    paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                    paramIn.Direction = ParameterDirection.Input;
                    paramIn.Value = flag;
                    cmd.Parameters.Add(paramIn);
                    //End

                    cmd.ExecuteNonQuery();
                    cnx.Close();

                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public bool UpdateDC(int OrderDetailsID, string DC, string Username)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_DC";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);
                DC = DC.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime Ex = Convert.ToDateTime(DC, Provider);
                paramIn = new SqlParameter("@DC", SqlDbType.DateTime);
                paramIn.Value = Ex;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsPcDateChanged", SqlDbType.Int);
                paramIn.Value = 0;
                cmd.Parameters.Add(paramIn);
                //added by abhisek
                paramIn = new SqlParameter("@Username", SqlDbType.VarChar);
                paramIn.Value = Username;
                cmd.Parameters.Add(paramIn);
                //End

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        // End By Ravi kumar ON 17/12/2014 For MO pcd change on Ex Factory change
        // End By Ravi kumar ON 17/12/2014 For MO pcd change on Ex Factory change

        //Edited abhishek on 16/11/2015
        public bool UpdateCutAvg(int OrderDetailsID, double CutAvg, int CountFabric, int StyleId, string FabricName, string Print, int IsAll, string imagefile, string user, double CutWidth, String strComment = "")
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_CutAvg";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@CutAvg", SqlDbType.Float);
                paramIn.Value = CutAvg;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CountFabric", SqlDbType.Int);
                paramIn.Value = CountFabric;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleId", SqlDbType.Int);
                paramIn.Value = StyleId;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricName", SqlDbType.VarChar);
                paramIn.Value = FabricName;
                cmd.Parameters.Add(paramIn);

                //Added By Ashish on 5/1/2014
                paramIn = new SqlParameter("@PrintDetail", SqlDbType.VarChar);
                paramIn.Value = Print;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsAll", SqlDbType.Int);
                paramIn.Value = IsAll;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@imgFile", SqlDbType.VarChar);
                paramIn.Value = imagefile;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@UserName", SqlDbType.VarChar);
                paramIn.Value = user;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@CutAvgComment", SqlDbType.VarChar);
                paramIn.Value = strComment;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CutWidth", SqlDbType.Float);
                paramIn.Value = CutWidth;
                cmd.Parameters.Add(paramIn);


                //END
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        //end Abhishek

        // edit by surendra on 2-jne-2015
        public bool UpdatePlanningLine(int OrderDetaildidforline, int lValue, int StyleIdforLine, string Remarks)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_PlanningLine";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetaildidforline;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@PlanningLine", SqlDbType.Int);
                paramIn.Value = lValue;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@styleid", SqlDbType.Int);
                paramIn.Value = StyleIdforLine;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Remarks", SqlDbType.VarChar);
                paramIn.Value = Remarks;
                cmd.Parameters.Add(paramIn);




                //END
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        // end

        public bool UpdatePatternSampleDate(int OrderID, int StyleId, string PatternSampleDate, string field = "", int OrderDetailID = 0)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Update_Pattern_Sample_Production_File";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                paramIn.Value = OrderID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleId", SqlDbType.Int);
                paramIn.Value = StyleId;
                cmd.Parameters.Add(paramIn);
                PatternSampleDate = PatternSampleDate.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime PrdDate = Convert.ToDateTime(PatternSampleDate, Provider);
                paramIn = new SqlParameter("@ProductionFileDate", SqlDbType.DateTime);
                paramIn.Value = PrdDate;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Check", SqlDbType.Int);
                paramIn.Value = 2;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@field", SqlDbType.NVarChar);
                paramIn.Value = field;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public void SaveResolution1(string VarOwnerIdS, string varstatus1, string TargetDate, int Id1, int Id2, string Remarks, string Type, string ApplicationModuleName)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                // string cmdText = "sp_status_manage_order_update_remarks";
                string cmdText = "sp_status_manage_order_update_remarks_OwnerId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OwnerString", SqlDbType.VarChar);
                param.Value = VarOwnerIdS;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@status", SqlDbType.VarChar);
                param.Value = varstatus1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@target", SqlDbType.VarChar);
                param.Value = TargetDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@d1", SqlDbType.Int);
                param.Value = Id1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@d2", SqlDbType.Int);
                param.Value = Id2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Remarks", SqlDbType.VarChar);
                param.Value = Remarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ApplicationModuleName", SqlDbType.VarChar);
                param.Value = ApplicationModuleName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }


        public void UpdateikandiPrice(int OrderDetailID, double ikandiPrice, string history)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_manage_order_ikandi_update_ikandi_price";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@kandiPrice", SqlDbType.Float);
                    param.Value = ikandiPrice;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@History", SqlDbType.VarChar);
                    param.Value = history;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    cnx.Close();
                }

                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
        }
        public Order GetOrderAccesoriesId(int OrderID)
        {
            Order order = new Order();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_order_by_Id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@d", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        order.InvoiceLocation = (reader["InvoiceLocation"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["InvoiceLocation"]);
                        order.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleId"])); // this object should be filled from OrderController 
                        order.Style.client = new Client();
                        order.Style.cdept = new ClientDepartment();
                        order.Costing = new Costing();
                        order.OrderID = OrderID;
                        order.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        order.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        order.IsIkandiClient = (reader["IsIkandiClient"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["IsIkandiClient"]);
                        order.Style.client.Address = reader["Address"].ToString();
                        order.Style.client.CompanyName = (reader["CompanyName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CompanyName"]);
                        order.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        order.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        order.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        order.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        order.Style.cdept.Name = reader["DepartmentName"].ToString();
                        order.Comments = (reader["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments"]);
                        order.TotalQuantity = (reader["TotalQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity"]);
                        order.BulkETA = (reader["BulkETA"] == DBNull.Value || reader["BulkETA"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        order.AccountManagerName = reader["AccountManagerName"].ToString();
                        order.AccountManagerID = reader["AccountManagerID"] == DBNull.Value ? 0 : Convert.ToInt32(reader["AccountManagerID"]);
                        order.ApprovedByMerchandiserManager = reader["ApprovedByMerchandiserManager"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedByMerchandiserManager"]);
                        order.ApprovedBySalesBIPL = reader["ApprovedBySalesBIPL"] == DBNull.Value ? 0 : Convert.ToInt32(reader["ApprovedBySalesBIPL"]);
                        order.Style.client.CompanyName = reader["CompanyName"].ToString();
                        order.BiplPrice = (reader["BiplPrice"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice"]);
                        order.Costing.CostingID = (reader["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CostingId"]);
                        order.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
                        order.Costing.CurrencySign = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.Costing.ConvertTo);
                        order.Style.SampleImageURL1 = (reader["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL1"]);
                        order.Style.SampleImageURL2 = (reader["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SampleImageURL2"]);
                        order.StatusModeSequence = reader["StatusModeSequence"] == DBNull.Value ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                        order.History = (reader["History"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["History"]);
                        order.IsBiplAgreement = (reader["IsBiplAgreement"] == DBNull.Value) ? 2 : Convert.ToInt32(reader["IsBiplAgreement"]);
                        order.OrderDetailsID = (reader["OrderDetailsID"] == DBNull.Value) ? 2 : Convert.ToInt32(reader["OrderDetailsID"]);
                        //
                        order.MarchantNotes = (reader["merchantnotes"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["merchantnotes"]);
                        order.Remarks = (reader["Fabricremarks"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabricremarks"]);
                        order.TypeOfPacking = Convert.ToInt32(reader["TypeOfPacking"]);
                        order.ORDER_CONFIRMED_SALES_StatusID = Convert.ToInt32(reader["ORDER_CONFIRMED_SALES_StatusID"]);

                        order.OrderBreakdown = GetOrderAccesoriesFormNewby_orderId(OrderID);
                        order.OrderLimitation = GetOrderLimitation(OrderID);
                        order.OrderFabrichistroy = GetFabricHistroy(order.OrderID);
                        //manisha 28th March
                        //order.IsApproved = (reader["IsApproved"] == DBNull.Value) ? 1 : Convert.ToInt32(reader["IsApproved"]);

                        //order.StyleNumber_d = (reader["StyleNumber_d"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber_d"]);
                        //order.CompanyName_d = (reader["CompanyName_d"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["CompanyName_d"]);
                        //order.Description_d = (reader["Description_d"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description_d"]);
                        //order.Name_d = reader["DepartmentName_d"].ToString();
                        //order.Comments_d = (reader["Comments_d"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Comments_d"]);
                        //order.TotalQuantity_d = (reader["TotalQuantity_d"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["TotalQuantity_d"]);
                        //order.BulkETA_d = (reader["BulkETA_d"] == DBNull.Value || reader["BulkETA_d"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkETA"]);
                        //order.BiplPrice_d = (reader["BiplPrice_d"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["BiplPrice_d"]);
                        //order.ConvertTo_d = (reader["ConvertTo_d"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo_d"]);
                        //order.CurrencySign_d = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(order.ConvertTo_d);
                        //order.TypeOfPacking_d = Convert.ToInt32(reader["TypeOfPacking_d"]);
                        //order.TypeOfPackingName = (reader["TypeOfPackingName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["TypeOfPackingName"]);
                        //order.OrderBreakdown_d = GetOrderDetailById(OrderID);
                    }
                }
            }
            return order;
        }
        public List<OrderFabhistroy> GetFabricHistroy(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                //SqlDataReader reader;
                DataSet ds = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_manage_order_get_fabric_approval_status_For_Accesories";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                SqlDataAdapter adpter = new SqlDataAdapter(cmd);
                adpter.Fill(ds);

                List<OrderFabhistroy> orderDetailCollection = new List<OrderFabhistroy>();
                OrderFabhistroy orderDetail = new OrderFabhistroy();

                int Fab1histroy = 0;
                int Fab2histroy = 0;
                int Fab3histroy = 0;
                int Fab4histroy = 0;

                DateTime ActionDate1 = DateTime.MinValue;
                DateTime ActionDate2 = DateTime.MinValue;
                DateTime ActionDate3 = DateTime.MinValue;
                DateTime ActionDate4 = DateTime.MinValue;


                int Fab1Stage = 0;
                int Fab2Stage = 0;
                int Fab3Stage = 0;
                int Fab4Stage = 0;

                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataTable dtFabric1 = new DataTable();
                    DataTable dtFabric2 = new DataTable();
                    dtFabric1 = ds.Tables[0];
                    dtFabric2 = ds.Tables[1];

                    if (dtFabric1.Rows.Count > 0)
                    {

                        foreach (DataRow dr1 in dtFabric1.Rows)
                        {

                            Fab1histroy = (dr1["F1Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F1Status"]) : 0;
                            Fab2histroy = (dr1["F2Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F2Status"]) : 0;
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            Fab3histroy = (dr1["F3Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F3Status"]) : 0;
                            Fab4histroy = (dr1["F4Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F4Status"]) : 0;


                            Fab1Stage = (dr1["F1Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F1Stage"]) : 0;
                            Fab2Stage = (dr1["F2Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F2Stage"]) : 0;
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            Fab3Stage = (dr1["F3Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F3Stage"]) : 0;
                            Fab4Stage = (dr1["F4Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F4Stage"]) : 0;

                            ActionDate1 = (dr1["ActionDate1"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate1"]) : DateTime.MinValue;
                            ActionDate2 = (dr1["ActionDate2"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate2"]) : DateTime.MinValue;
                            ActionDate3 = (dr1["ActionDate3"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate3"]) : DateTime.MinValue;
                            ActionDate4 = (dr1["ActionDate4"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate4"]) : DateTime.MinValue;
                        }
                    }
                    if (dtFabric2.Rows.Count > 0)
                    {

                        foreach (DataRow dr2 in dtFabric2.Rows)
                        {
                            //OrderFabhistroy orderDetail = new OrderFabhistroy();
                            orderDetail.Fab1Precent = (dr2["Percentinhouse1"] != DBNull.Value) ? Convert.ToInt32(dr2["Percentinhouse1"]) : 0;
                            orderDetail.Fab2Precent = (dr2["Percentinhouse2"] != DBNull.Value) ? Convert.ToInt32(dr2["Percentinhouse2"]) : 0;
                            orderDetail.Fab3Precent = (dr2["Percentinhouse3"] != DBNull.Value) ? Convert.ToInt32(dr2["Percentinhouse3"]) : 0;
                            orderDetail.Fab4Precent = (dr2["Percentinhouse4"] != DBNull.Value) ? Convert.ToInt32(dr2["Percentinhouse4"]) : 0;

                        }
                    }

                    orderDetail.Fab1BulkStatus = Constants.GetFabricStatus(Fab1Stage, Fab1histroy, ActionDate1);
                    orderDetail.Fab2BulkStatus = Constants.GetFabricStatus(Fab2Stage, Fab2histroy, ActionDate2);
                    orderDetail.Fab3BulkStatus = Constants.GetFabricStatus(Fab3Stage, Fab3histroy, ActionDate3);
                    orderDetail.Fab4BulkStatus = Constants.GetFabricStatus(Fab4Stage, Fab4histroy, ActionDate4);
                    orderDetailCollection.Add(orderDetail);
                }


                return orderDetailCollection;
            }
        }
        public List<OrderDetail> GetOrderAccesoriesFormNewby_orderId(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_get_order_detail_by_orderId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        if (reader["Id"] != DBNull.Value && Convert.ToInt32(reader["Id"]) > 0)
                        {
                            OrderDetail orderDetail = new OrderDetail();
                            orderDetail.ParentOrder = new Order();
                            orderDetail.ParentOrder.Print = new Print();
                            orderDetail.ParentOrder.Costing = new Costing();

                            orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                            orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                            if (orderDetail.LineItemNumber == "")
                                orderDetail.LineItemNumber = "      ";

                            orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                            if (orderDetail.ContractNumber == "")
                                orderDetail.ContractNumber = "      ";
                            //orderDetail.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                            orderDetail.File1 = (reader["File1"] == DBNull.Value || reader["File1"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File1"]);
                            orderDetail.File2 = (reader["File2"] == DBNull.Value || reader["File2"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File2"]);
                            orderDetail.File3 = (reader["File3"] == DBNull.Value || reader["File3"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File3"]);
                            orderDetail.File4 = (reader["File4"] == DBNull.Value || reader["File4"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File4"]);
                            orderDetail.Fabric1Details = (reader["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1DetailsRef"]);
                            orderDetail.Fabric2Details = (reader["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2DetailsRef"]);
                            orderDetail.Fabric3Details = (reader["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3DetailsRef"]);
                            orderDetail.Fabric4Details = (reader["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4DetailsRef"]);
                            var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                result = 0;

                            }

                            var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                result = 0;
                            }



                            var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                result = 0;
                            }


                            var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                            if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                            {
                                orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                result = 0;
                            }

                            orderDetail.AccessoriesRemarks = (reader["AccessoriesRemarks"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["AccessoriesRemarks"]);
                            orderDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                            orderDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                            orderDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                            orderDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);
                            orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                            orderDetail.Mode = Convert.ToInt32(reader["Mode"]);
                            orderDetail.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Code"]);
                            orderDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);
                            orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                            // Edit by surendra on 29-Nov-2013
                            orderDetail.PCDDate = (reader["PCDDate"] != DBNull.Value) ? Convert.ToDateTime(reader["PCDDate"]) : DateTime.MinValue;
                            //End
                            orderDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                            orderDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                            orderDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                            orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                            orderDetail.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                            orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Quantity"]);
                            orderDetail.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                            orderDetail.Fabric2Quantity = (reader["Fabric2Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Quantity"]);
                            orderDetail.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                            orderDetail.Fabric3Quantity = (reader["Fabric3Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Quantity"]);
                            orderDetail.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                            orderDetail.Fabric4Quantity = (reader["Fabric4Quantity"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Quantity"]);
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.Status = (reader["Status"] == DBNull.Value) ? "" : Convert.ToString(reader["Status"]);
                            orderDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);
                            orderDetail.StatusModeSequence = (reader["StatusModeSequence"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeSequence"]);
                            orderDetail.BulkTarget = (reader["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkTarget"]) : DateTime.MinValue;
                            orderDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                            orderDetail.LabDipTarget = (reader["LabDipTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["LabDipTarget"]) : DateTime.MinValue;
                            orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] != DBNull.Value) ? Convert.ToDateTime(reader["BulkApprovalTarget"]) : DateTime.MinValue;
                            orderDetail.SealETA = (reader["SealETA"] != DBNull.Value) ? Convert.ToDateTime(reader["SealETA"]) : DateTime.MinValue;
                            orderDetail.ParentOrder.Print.ImageUrl = (reader["ImageUrl"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ImageUrl"]);
                            //orderDetail.ExFactoryColor = iKandi.BLL.CommonHelper.GetExFactoryColor(orderDetail.ExFactory, orderDetail.DC, orderDetail.Mode);
                            orderDetail.IsAirFabric1 = (reader["IsAirFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric1"]);
                            orderDetail.IsAirFabric2 = (reader["IsAirFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric2"]);
                            orderDetail.IsAirFabric3 = (reader["IsAirFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric3"]);
                            orderDetail.IsAirFabric4 = (reader["IsAirFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IsAirFabric4"]);

                            orderDetail.IAFabric1 = (reader["IAFabric1"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric1"]);
                            orderDetail.IAFabric2 = (reader["IAFabric2"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric2"]);
                            orderDetail.IAFabric3 = (reader["IAFabric3"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric3"]);
                            orderDetail.IAFabric4 = (reader["IAFabric4"] == DBNull.Value) ? false : Convert.ToBoolean(reader["IAFabric4"]);


                            /// Using new properties which was added in order.cs By Yatendra 
                            orderDetail.CCGSM1 = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                            orderDetail.CCGSM2 = (reader["Fabric21"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric21"]);
                            orderDetail.CCGSM3 = (reader["Fabric31"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric31"]);
                            orderDetail.CCGSM4 = (reader["Fabric41"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric41"]);


                            if (reader["Fab1QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab1QualityId"]) > 0)
                                orderDetail.Fabric1Origin = (reader["Fabric1Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric1Origin"]);

                            if (reader["Fab2QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab2QualityId"]) > 0)
                                orderDetail.Fabric2Origin = (reader["Fabric2Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric2Origin"]);

                            if (reader["Fab3QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab3QualityId"]) > 0)
                                orderDetail.Fabric3Origin = (reader["Fabric3Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric3Origin"]);

                            if (reader["Fab4QualityId"] != DBNull.Value && Convert.ToInt32(reader["Fab4QualityId"]) > 0)
                                orderDetail.Fabric4Origin = (reader["Fabric4Origin"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["Fabric4Origin"]);

                            /////////////////////////////////////////////////////////////////////////////////////////////


                            // orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);

                            //Added By Ashish on 11/4/2014
                            DataSet dscount = new DataSet();
                            dscount = GetSizeCont(orderDetail.OrderID);
                            if (dscount.Tables[0].Rows.Count > 0)
                            {
                                int OdId = Convert.ToInt32(dscount.Tables[0].Rows[0]["OrderDetailID"].ToString());
                                //int OrderCount = Convert.ToInt32(dscount.Tables[0].Rows[0]["OrderCount"].ToString());

                                orderDetail.OrderSizes = GetOrderDetailSizeById(orderDetail.OrderDetailID, OdId);
                            }
                            else
                            {
                                orderDetail.OrderSizes = GetOrderDetailSize(orderDetail.OrderDetailID);
                            }
                            //END
                            orderDetailCollection.Add(orderDetail);
                        }
                    }
                }

                return orderDetailCollection;
            }
        }


        // create function for getting repeat order's by sushil on date 7/10/2014
        public List<OrderDetail> Getrepeatorder(string styleno)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_getrepeatorder";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@styleno", SqlDbType.NVarChar);
                param.Value = styleno;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {

                        OrderDetail orderDetail = new OrderDetail();
                        orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                        if (orderDetail.LineItemNumber == "")
                            orderDetail.LineItemNumber = "      ";

                        orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                        if (orderDetail.ContractNumber == "")
                            orderDetail.ContractNumber = "      ";

                        orderDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);

                        var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                        {
                            orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                            result = 0;

                        }

                        orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                        orderDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                        orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                        orderDetail.CreatedOn = (reader["OrderDate"] != DBNull.Value) ? Convert.ToDateTime(reader["OrderDate"]) : DateTime.MinValue;
                        orderDetail.LineItemNumber_d = (reader["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SerialNumber"]);
                        orderDetailCollection.Add(orderDetail);

                    }
                }

                return orderDetailCollection;
            }
        }

        //

        public List<OrderDetail> GetManageOrderiKandiQuantityByMode(int Mode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_manage_order_ikandi_get_quantity_by_mode";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Mode", SqlDbType.Int);
                param.Value = Mode;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetail orderDetail = new OrderDetail();
                        orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                        orderDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                        orderDetail.OrderID = Convert.ToInt32(reader["OrderID"]);

                        orderDetail.ParentOrder = new Order();
                        orderDetail.ParentOrder.SerialNumber = (reader["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SerialNumber"]);

                        orderDetailCollection.Add(orderDetail);
                    }
                }

                return orderDetailCollection;
            }
        }
        public List<MOOrderDetails> GetOrdersBasicInfo(string searchText, string FabricName, string years, DateTime FromDate, DateTime ToDate, int ClientID, int DateType, int UserId, double StatusMode, double StatusModeSequence, int OrderBy1, int OrderBy2, int OrderBy3, int OrderBy4, string OrderDetailIds, int BuyingHouseId, int unintID, int desigId, int DeptId, int SalesView, string SessionId, int ClientDeptId, string DelayOrderDetailIds, int OrderType, int StartIndex, out int TotalCount, int AM, int IsUnshipped, int OutHouse, int ClientParentDeptId, int PageSize) //Gajendra Paging
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                int result;
                try
                {
                    string cmdText = "";
                    if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "Mat_Mig_PrepForLive") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New"))
                        cmdText = "sp_MO_Get_All_Details";
                    else
                        cmdText = "sp_orders_get_orders_basic_info";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    if (cnx.State == ConnectionState.Closed)
                        cnx.Open();

                    DataSet dsorderDetail = new DataSet();
                    SqlParameter param;

                    param = new SqlParameter("@searchText", SqlDbType.VarChar);
                    param.Value = searchText;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricName", SqlDbType.VarChar);
                    param.Value = FabricName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Years", SqlDbType.VarChar);
                    param.Value = years;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@FromDate", SqlDbType.DateTime);
                    if ((FromDate == DateTime.MinValue) || (FromDate == Convert.ToDateTime("01-01-1753")) || (FromDate == Convert.ToDateTime("01-01-1753 12:00:00")) || (FromDate == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = FromDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ToDate", SqlDbType.DateTime);
                    if ((ToDate == DateTime.MinValue) || (ToDate == Convert.ToDateTime("01-01-1753")) || (ToDate == Convert.ToDateTime("01-01-1753 12:00:00")) || (ToDate == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = ToDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = unintID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DateType", SqlDbType.Int);
                    param.Value = DateType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusMode", SqlDbType.Decimal);
                    param.Value = StatusMode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeSequence", SqlDbType.Decimal);
                    param.Value = StatusModeSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy1", SqlDbType.Int);
                    param.Value = OrderBy1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy2", SqlDbType.Int);
                    param.Value = OrderBy2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderBy3", SqlDbType.Int);
                    param.Value = OrderBy3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy4", SqlDbType.Int);
                    param.Value = OrderBy4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderDetailIds", SqlDbType.VarChar);
                    param.Value = OrderDetailIds;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BuyingHouseId", SqlDbType.Int);
                    param.Value = BuyingHouseId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesigId", SqlDbType.Int);
                    param.Value = desigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SalesView", SqlDbType.Int);
                    param.Value = SalesView;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SessionId", SqlDbType.NVarChar);
                    param.Value = SessionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDeptid", SqlDbType.Int);
                    param.Value = ClientDeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DelayOrderDetailIds", SqlDbType.VarChar);
                    param.Value = DelayOrderDetailIds;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //abhishek on 3/11/2016
                    param = new SqlParameter("@OrderTypes", SqlDbType.Int);
                    param.Value = OrderType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StartIndex", SqlDbType.Int);
                    param.Value = StartIndex;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PageSize", SqlDbType.Int);
                    param.Value = PageSize;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlParameter outParam;
                    outParam = new SqlParameter("@TotalCount", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    param = new SqlParameter("@AM", SqlDbType.Int);
                    param.Value = AM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsUnshipped", SqlDbType.Int);
                    param.Value = IsUnshipped;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OutHouse", SqlDbType.Int);
                    param.Value = OutHouse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ParentDeptID", SqlDbType.Int);
                    param.Value = ClientParentDeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    string Parameter = "";

                    foreach (SqlParameter par in cmd.Parameters)
                    {
                        if (par.SqlDbType == SqlDbType.VarChar || par.SqlDbType == SqlDbType.DateTime || par.SqlDbType == SqlDbType.NVarChar)
                            Parameter += par.ParameterName.ToString() + " ='" + par.Value + "' , ";
                        if (par.SqlDbType == SqlDbType.Bit)
                            Parameter += par.ParameterName.ToString() + " ='" + (Convert.ToBoolean(par.Value) == true ? "1," : "0,");
                        if (par.SqlDbType == SqlDbType.Int || par.SqlDbType == SqlDbType.Float || par.SqlDbType == SqlDbType.Decimal)
                            Parameter += par.ParameterName.ToString() + " =" + par.Value + " , ";
                    }

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    cnx.Close();
                    TotalCount = Convert.ToInt32(outParam.Value);


                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];

                        //DataTable dt1 = dsorderDetail.Tables[1];
                        //DataTable dt2 = dsorderDetail.Tables[1];
                        DataTable dtAccessory = dsorderDetail.Tables[1];
                        DataTable dtProduction = dsorderDetail.Tables[2];
                        DataTable dtMoPermission = dsorderDetail.Tables[3];
                        //DataTable dtAccessoryOld = dsorderDetail.Tables[4];
                        DataTable dtTotalQty = dsorderDetail.Tables[4];
                        DataTable dtFactory = dsorderDetail.Tables[5];//Gajendra 01-03-2016                      

                        MOOrderDetails.FactoryID = dtFactory.Rows.OfType<DataRow>().Select(dr => dr.Field<Int64>("UnitID")).ToList(); //Gajendra 01-03-2016

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                MOOrderDetails orderDetail = new MOOrderDetails();
                                orderDetail.OrderDetailID = Convert.ToInt32(dr["Id"]);
                                orderDetail.IsOldOrder = (dr["IsOldOrder"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsOldOrder"]);
                                orderDetail.LineItemNumber = (dr["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LineItemNumber"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.DesinationCode = (dr["CountryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CountryCode"]);
                                orderDetail.IsFinalCheck = (dr["FinalCheck"] == DBNull.Value) ? false : Convert.ToBoolean(dr["FinalCheck"]);
                                orderDetail.IsIkandiClient = (dr["IsIkandiClient"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsIkandiClient"]);
                                orderDetail.ModesIDByStyleID = (dr["ModesIDByStyleID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ModesIDByStyleID"]);
                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.FabricStages1 = (dr["FabricStages1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages1"]);
                                    orderDetail.FabricStages2 = (dr["FabricStages2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages2"]);
                                    orderDetail.FabricStages3 = (dr["FabricStages3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages3"]);
                                    orderDetail.FabricStages4 = (dr["FabricStages4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages4"]);
                                    orderDetail.FabricStages5 = (dr["FabricStages5"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages5"]);
                                    orderDetail.FabricStages6 = (dr["FabricStages6"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages6"]);

                                    orderDetail.SupplyTypeForFabric1 = (dr["FabTypeStage1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage1"]);
                                    orderDetail.SupplyTypeForFabric2 = (dr["FabTypeStage2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage2"]);
                                    orderDetail.SupplyTypeForFabric3 = (dr["FabTypeStage3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage3"]);
                                    orderDetail.SupplyTypeForFabric4 = (dr["FabTypeStage4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage4"]);
                                    orderDetail.SupplyTypeForFabric5 = (dr["FabTypeStage5"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage5"]);
                                    orderDetail.SupplyTypeForFabric6 = (dr["FabTypeStage6"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabTypeStage6"]);

                                    orderDetail.FabricStages1_ToolTip = (dr["FabricStages1_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages1_ToolTip"]);
                                    orderDetail.FabricStages2_ToolTip = (dr["FabricStages2_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages2_ToolTip"]);
                                    orderDetail.FabricStages3_ToolTip = (dr["FabricStages3_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages3_ToolTip"]);
                                    orderDetail.FabricStages4_ToolTip = (dr["FabricStages4_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages4_ToolTip"]);
                                    orderDetail.FabricStages5_ToolTip = (dr["FabricStages5_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages5_ToolTip"]);
                                    orderDetail.FabricStages6_ToolTip = (dr["FabricStages6_ToolTip"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricStages6_ToolTip"]);

                                    //abhishek 24 dec
                                    orderDetail.Fabric1StageSelect = (dr["Fabric1StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric1StageSelect"]);
                                    orderDetail.Fabric2StageSelect = (dr["Fabric2StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric2StageSelect"]);
                                    orderDetail.Fabric3StageSelect = (dr["Fabric3StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric3StageSelect"]);
                                    orderDetail.Fabric4StageSelect = (dr["Fabric4StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric4StageSelect"]);
                                    orderDetail.Fabric5StageSelect = (dr["Fabric5StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric5StageSelect"]);
                                    orderDetail.Fabric6StageSelect = (dr["Fabric6StageSelect"] == DBNull.Value) ? false : Convert.ToBoolean(dr["Fabric6StageSelect"]);

                                    //end

                                    orderDetail.QuantityAvl5 = "";
                                    orderDetail.QuantityAvl6 = "";
                                    //orderDetail.FinalOrderFabric5_k = "0k";
                                    //orderDetail.FinalOrderFabric6_k = "0k";
                                    //orderDetail.fab5CheckInHouse = 0;
                                    //orderDetail.fab6CheckInHouse = 0;
                                    //orderDetail.Fab5InHouseChecked_k = "0k";
                                    //orderDetail.Fab6InHouseChecked_k = "0k";
                                    orderDetail.Fabric5Required_ToolTip = (dr["Fabric5Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric5Required_ToolTip"]);
                                    orderDetail.Fabric6Required_ToolTip = (dr["Fabric6Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric6Required_ToolTip"]);

                                    orderDetail.Fabric5Required = (dr["Fabric5Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric5Required"]);
                                    orderDetail.Fabric6Required = (dr["Fabric6Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric6Required"]);

                                    orderDetail.FinalOrderFabric5 = (dr["Ordavg5"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg5"]);
                                    orderDetail.FinalOrderFabric6 = (dr["Ordavg6"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg6"]);
                                    orderDetail.CutWidth5 = (dr["CutWidth5"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth5"]);
                                    orderDetail.CutWidth6 = (dr["CutWidth6"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth6"]);
                                    orderDetail.FabQuality_ID1 = (dr["QualityID_1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_1"]);
                                    orderDetail.FabQuality_ID2 = (dr["QualityID_2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_2"]);
                                    orderDetail.FabQuality_ID3 = (dr["QualityID_3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_3"]);
                                    orderDetail.FabQuality_ID4 = (dr["QualityID_4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_4"]);
                                    orderDetail.FabQuality_ID5 = (dr["QualityID_5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_5"]);
                                    orderDetail.FabQuality_ID6 = (dr["QualityID_6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["QualityID_6"]);
                                    orderDetail.fabric5ETA = (dr["fabric5ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric5ETA"]) : DateTime.MinValue;
                                    orderDetail.fabric6ETA = (dr["fabric6ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric6ETA"]) : DateTime.MinValue;
                                    orderDetail.Fabric5ENDETA = (dr["Fabric5ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric5ENDETA"]) : DateTime.MinValue;
                                    orderDetail.Fabric6ENDETA = (dr["Fabric6ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric6ENDETA"]) : DateTime.MinValue;
                                    orderDetail.IntialAprd5 = (dr["IntialAprdFabric5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric5"]);
                                    orderDetail.IntialAprd6 = (dr["IntialAprdFabric6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric6"]);
                                    orderDetail.fab5CheckInHouse = (dr["FabricInh5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh5"]);
                                    orderDetail.fab6CheckInHouse = (dr["FabricInh6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh6"]);
                                }
                                orderDetail.Description = (dr["OrderDescription"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["OrderDescription"]);
                                orderDetail.File = (dr["File"] == DBNull.Value) ? "" : Convert.ToString(dr["File"]);
                                orderDetail.File2 = (dr["File2"] == DBNull.Value) ? "" : Convert.ToString(dr["File2"]);
                                orderDetail.File3 = (dr["File3"] == DBNull.Value) ? "" : Convert.ToString(dr["File3"]);
                                orderDetail.Quantity = Convert.ToInt32(dr["Quantity"]);
                                orderDetail.Fabric1Quantity = dr["Fabric1Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric1Quantity"]);
                                orderDetail.Fabric2Quantity = dr["Fabric2Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric2Quantity"]);
                                orderDetail.Fabric3Quantity = dr["Fabric3Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric3Quantity"]);
                                orderDetail.Fabric4Quantity = dr["Fabric4Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric4Quantity"]);
                                orderDetail.ContractStatus = dr["ContractholdStatus"] == DBNull.Value ? false : Convert.ToBoolean(dr["ContractholdStatus"]);

                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);

                                orderDetail.MDANumber = (dr["MDA"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["MDA"]);
                                orderDetail.ModeName = (dr["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Code"]);
                                //----------------------------------------------
                                orderDetail.iKandiPrice = Convert.ToDouble(dr["iKandiPrice"]);
                                orderDetail.ActualProfitMargin = (Convert.ToString(dr["ActualProfitMargin"]) == "0") ? string.Empty : Convert.ToString(dr["ActualProfitMargin"]);

                                orderDetail.AgreedPrice = Convert.ToDouble(dr["AgreedPrice"]);
                                orderDetail.ConversionRate = Convert.ToDouble(dr["ConversionRate"]);
                                double biplprice = Convert.ToDouble(dr["BIPLPrice"]);
                                double BIPL_RevenueBIPLPrice = Convert.ToDouble(dr["BIPL_RevenueBIPLPrice"]);
                                double BoutiqueP = 0.0;
                                if (BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity >= 1000000)
                                {
                                    BoutiqueP = ((BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity) / 100000);
                                    orderDetail.BoutiqueBusiness = Math.Round((BoutiqueP), 0, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    BoutiqueP = ((BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity) / 100000);
                                    orderDetail.BoutiqueBusiness = Math.Round((BoutiqueP), 1, MidpointRounding.AwayFromZero);
                                }


                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                //--------------------------------------------Weight cost value

                                orderDetail.WeigtShipCost = (dr["WeigtShipCost"] == DBNull.Value) ? Convert.ToDecimal(110) : Convert.ToDecimal(dr["WeigtShipCost"]);

                                //orderDetail.StitchingETA = (dr["StitchingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StitchingETA"]) : DateTime.MinValue;
                                // aa orderDetail.WeekToEx = Convert.ToInt32(dr["WeekToEx"]);
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                // edit by surendra on 14/10/2013
                                orderDetail.PCDDate = (dr["PCDDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PCDDate"]) : DateTime.MinValue;


                                orderDetail.STCtargetsDate = (dr["STCtargetsDate"] != DBNull.Value) ? Convert.ToDateTime(dr["STCtargetsDate"]) : DateTime.MinValue;

                                orderDetail.ProductionPlanningETA = (dr["ProductionPlanningETA"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionPlanningETA"]) : DateTime.MinValue;
                                // -----------------------------------fits module -------------------------------------------

                                orderDetail.HandOverTargetDate = (dr["HandOverTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverTargetDate"]) : DateTime.MinValue;
                                orderDetail.PatternReadyTargetDate = (dr["PatternReadyTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyTargetDate"]) : DateTime.MinValue;
                                orderDetail.SampleSentTargetDate = (dr["SampleSentTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentTargetDate"]) : DateTime.MinValue;
                                orderDetail.FitsCommentesTargetDate = (dr["FitsCommentesTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesTargetDate"]) : DateTime.MinValue;


                                orderDetail.HandOverActualDate = (dr["HandOverActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverActualDate"]) : DateTime.MinValue;
                                orderDetail.PatternReadyActualDate = (dr["PatternReadyActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyActualDate"]) : DateTime.MinValue;
                                orderDetail.SampleSentActualDate = (dr["SampleSentActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentActualDate"]) : DateTime.MinValue;
                                orderDetail.FitsCommentesActualDate = (dr["FitsCommentesActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesActualDate"]) : DateTime.MinValue;

                                orderDetail.HandOverETADate = (dr["HandOverETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverETADate"]) : DateTime.MinValue;
                                orderDetail.PatternReadyETADate = (dr["PatternReadyETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyETADate"]) : DateTime.MinValue;
                                orderDetail.SampleSentETADate = (dr["SampleSentETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentETADate"]) : DateTime.MinValue;
                                orderDetail.FitsCommentesETADate = (dr["FitsCommentesETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesETADate"]) : DateTime.MinValue;
                                //---------------------------------end------------------------
                                orderDetail.BulkAccsesoryTarget = (dr["BulkAccsesoryTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["BulkAccsesoryTarget"]) : DateTime.MinValue;

                                orderDetail.PatternSampleTarget = (dr["PatternSampleTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleTarget"]) : DateTime.MinValue;
                                orderDetail.CuttingTarget = (dr["CuttingTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingTarget"]) : DateTime.MinValue;
                                orderDetail.ProductionFileTarget = (dr["ProductionFileTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileTarget"]) : DateTime.MinValue;
                                orderDetail.PPSampleTgtDate = (dr["PPSampleTgtDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PPSampleTgtDate"]) : DateTime.MinValue;
                                orderDetail.HOPPMTargetETA = (dr["HOPPMTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMTargetETA"]) : DateTime.MinValue;
                                orderDetail.TOPTargetETA = (dr["TOPTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TOPTargetETA"]) : DateTime.MinValue;
                                orderDetail.TestReportTargetETA = (dr["TestReportTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportTargetETA"]) : DateTime.MinValue;
                                orderDetail.EXFactoryTargetETA = (dr["EXFactoryTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["EXFactoryTargetETA"]) : DateTime.MinValue;
                                orderDetail.PCDTargetETA = (dr["PCDTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PCDTargetETA"]) : DateTime.MinValue;

                                orderDetail.CADMaster = (dr["CADMaster"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CADMaster"]);

                                orderDetail.CdchartTargetDateETA = (dr["CdchartTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["CdchartTargetDate"]) : DateTime.MinValue;
                                orderDetail.CdchartActualDateETA = (dr["CDChartActual"] != DBNull.Value) ? Convert.ToDateTime(dr["CDChartActual"]) : DateTime.MinValue;
                                orderDetail.CdchartDateETA = (dr["CDChartETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CDChartETA"]) : DateTime.MinValue;

                                orderDetail.IsRepeat = Convert.ToBoolean(dr["IsRepeat"]);
                                orderDetail.IsRepeatWithChanges = (dr["IsRepeatWithChanges"] == DBNull.Value) ? false : Convert.ToBoolean(dr["IsRepeatWithChanges"]);

                                orderDetail.DelayTask = (dr["DelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DelayTask"]);
                                orderDetail.FabricDelayTask = (dr["FabricDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricDelayTask"]);
                                orderDetail.AccessoriesDelayTask = (dr["AccessoriesDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoriesDelayTask"]);
                                orderDetail.TechnicalDelayTask = (dr["TechnicalDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["TechnicalDelayTask"]);
                                orderDetail.ProductionDelayTask = (dr["ProductionDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ProductionDelayTask"]);

                                orderDetail.fab1CheckInHouse = (dr["FabricInh1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh1"]);
                                orderDetail.fab2CheckInHouse = (dr["FabricInh2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh2"]);
                                orderDetail.fab3CheckInHouse = (dr["FabricInh3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh3"]);
                                orderDetail.fab4CheckInHouse = (dr["FabricInh4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh4"]);
                                orderDetail.QualityControl_Prev_Status = (dr["QualityControl_Prev_Status"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["QualityControl_Prev_Status"]);
                                orderDetail.BIPLAgreementPending = (dr["BIPLAgreementPending"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["BIPLAgreementPending"]);
                                orderDetail.ExpectedDC = (dr["ExpectedDC"] != DBNull.Value) ? Convert.ToDateTime(dr["ExpectedDC"]) : DateTime.MinValue;
                                orderDetail.OrderType = (dr["OrderType"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderType"]);
                                //Added By Ravi kumar on 19-3-18 for Planned Date
                                orderDetail.StartDate = (dr["StartDate"] != DBNull.Value) ? Convert.ToDateTime(dr["StartDate"]) : DateTime.MinValue;
                                orderDetail.EndDate = (dr["EndDate"] != DBNull.Value) ? Convert.ToDateTime(dr["EndDate"]) : DateTime.MinValue;
                                orderDetail.PlanDate = (dr["PlanDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PlanDate"]) : DateTime.MinValue;
                                orderDetail.IsUnPlanned = (dr["IsUnPlanned"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsUnPlanned"]);
                                orderDetail.PlanType = (dr["PlanType"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PlanType"]);
                                orderDetail.IsPendingStitch = (dr["StitchPending"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StitchPending"]);
                                //End By Ravi kumar on 19-3-18 for Planned Date

                                double Fab1InChecked_ = 0;
                                double Fab2InChecked_ = 0;
                                double Fab3InChecked_ = 0;
                                double Fab4InChecked_ = 0;
                                double Fab5InChecked_ = 0;
                                double Fab6InChecked_ = 0;

                                if (dr["FabricInh1"] != DBNull.Value)
                                {
                                    Fab1InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh1"]).Replace(",", ""));

                                }
                                double Fabric1InHouseChecked_kd = (Fab1InChecked_ / 1000);
                                orderDetail.Fab1InHouseChecked_k = Math.Round((Fabric1InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                if (dr["FabricInh2"] != DBNull.Value)
                                {
                                    Fab2InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh2"]).Replace(",", ""));

                                }
                                double Fabric2InHouseChecked_kd = (Fab2InChecked_ / 1000);
                                orderDetail.Fab2InHouseChecked_k = Math.Round((Fabric2InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";


                                if (dr["FabricInh3"] != DBNull.Value)
                                {
                                    Fab3InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh3"]).Replace(",", ""));

                                }
                                double Fabric3InHouseChecked_kd = (Fab3InChecked_ / 1000);
                                orderDetail.Fab3InHouseChecked_k = Math.Round((Fabric3InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";


                                if (dr["FabricInh4"] != DBNull.Value)
                                {
                                    Fab4InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh4"]).Replace(",", ""));

                                }
                                double Fabric4InHouseChecked_kd = (Fab4InChecked_ / 1000);
                                orderDetail.Fab4InHouseChecked_k = Math.Round((Fabric4InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                orderDetail.PhotoShoot = (dr["PhotoShoot"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PhotoShoot"]);
                                orderDetail.IsPhotoShoot = (dr["IsPhotoShoot"] != DBNull.Value) ? Convert.ToDateTime(dr["IsPhotoShoot"]) : DateTime.MinValue;

                                orderDetail.STCDateAppTar = orderDetail.PCDDate.AddDays(-7);


                                orderDetail.HOPPMETA = (dr["HOPPMETA"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMETA"]) : DateTime.MinValue;
                                bool bCheckMO = false;
                                if (dr["HOPPMCheckComplete"] == DBNull.Value)
                                    bCheckMO = false;
                                else
                                    bCheckMO = Convert.ToBoolean(dr["HOPPMCheckComplete"]);

                                orderDetail.HOPPMActionactualDate = (dr["HOPPMActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMActualDate"]) : DateTime.MinValue;

                                orderDetail.fabric1ETA = (dr["fabric1ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric1ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric1ENDETA = (dr["Fabric1ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric1ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff1ETA = (dr["StrikeOff1ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff1ETA"]) : DateTime.MinValue;

                                orderDetail.IntialAprd1 = (dr["IntialAprdFabric1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric1"]);

                                orderDetail.fabric2ETA = (dr["fabric2ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric2ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric2ENDETA = (dr["Fabric2ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric2ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff2ETA = (dr["StrikeOff2ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff2ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd2 = (dr["IntialAprdFabric2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric2"]);
                                orderDetail.fabric3ETA = (dr["fabric3ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric3ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric3ENDETA = (dr["Fabric3ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric3ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff3ETA = (dr["StrikeOff3ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff3ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd3 = (dr["IntialAprdFabric3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric3"]);
                                orderDetail.fabric4ETA = (dr["fabric4ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric4ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric4ENDETA = (dr["Fabric4ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric4ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff4ETA = (dr["StrikeOff4ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff4ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd4 = (dr["IntialAprdFabric4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric4"]);
                                //END
                                orderDetail.FabricTrackingTarget1 = (dr["FabricTrackingTarget1"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget1"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget2 = (dr["FabricTrackingTarget2"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget2"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget3 = (dr["FabricTrackingTarget3"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget3"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget4 = (dr["FabricTrackingTarget4"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget4"]) : DateTime.MinValue;

                                //  orderDetail.LinesNo = Convert.ToInt32(dr["LinesNo"]);
                                // edit by surendra on 08-02-2016
                                orderDetail.CutAvgFile1 = (dr["CutAvgFile1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile1"]);
                                orderDetail.CutAvgFile2 = (dr["CutAvgFile2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile2"]);
                                orderDetail.CutAvgFile3 = (dr["CutAvgFile3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile3"]);
                                orderDetail.CutAvgFile4 = (dr["CutAvgFile4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile4"]);

                                //update by Ravi kumar on 13-9-18
                                orderDetail.QaUploadReport = (dr["QaUploadReport"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["QaUploadReport"]);
                                //orderDetail.First10PcsQAReport = (dr["First10PcsQAReport"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["First10PcsQAReport"]);

                                // end
                                #region Abhishek filed here
                                // Added by abhishek on 25/12/2015
                                orderDetail.TestReports = dr["TestReports"].ToString();
                                orderDetail.TestReportsDateActual = (dr["TestReportsActual"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportsActual"]) : DateTime.MinValue;
                                orderDetail.TestReportsDateETA = (dr["TestReportsETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportsETA"]) : DateTime.MinValue;
                                orderDetail.IsTestReportDone = Convert.ToInt32(dr["TestReportsCheckBox"]);
                                orderDetail.IsVaCompleted = dr["IsVAComplete"].ToString();
                                orderDetail.IsReScan = dr["IsRescan"].ToString();
                                orderDetail.DressPrice = (dr["DressPrice"] == DBNull.Value) ? -1 : Convert.ToDouble(dr["DressPrice"]);


                                orderDetail.IsCheck = (dr["IsICCheck"] == DBNull.Value) ? false : Convert.ToBoolean((dr["IsICCheck"]).ToString());
                                orderDetail.IsICCheckOnDate = (dr["IsICCheckOnDate"] == DBNull.Value) ? "" : (dr["IsICCheckOnDate"]).ToString();
                                orderDetail.OutHouseAll = (dr["OutHouseAllocate"] == DBNull.Value) ? "1" : (dr["OutHouseAllocate"]).ToString();
                                #endregion

                                // end
                                //added by abhishek on 31/3/2016
                                orderDetail.IsTestReportvisible = (dr["IsVisibleTestReport"] == DBNull.Value) ? "none" : (dr["IsVisibleTestReport"]).ToString();
                                orderDetail.IsCdchartVisible = (dr["IsVisibleCDchart"] == DBNull.Value) ? "none" : (dr["IsVisibleCDchart"]).ToString();
                                //end 
                                // Added by Ravi kumar on 28/12/2015
                                orderDetail.LinePlannigStartDate = (dr["LinePlannigStartDate"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LinePlannigStartDate"]);
                                orderDetail.IsLinePlannigStartDate = (dr["IsLinePlannigStartDate"] == DBNull.Value) ? "0" : Convert.ToString(dr["IsLinePlannigStartDate"]);

                                var samcomval = (dr["samval"].ToString()).Split(',');
                                if (samcomval.Length > 1)
                                {
                                    orderDetail.Samcap = samcomval[0];
                                    orderDetail.Samval = samcomval[1].ToString();
                                }
                                orderDetail.OBval = (dr["OB"].ToString());
                                //orderDetail.OBfile = (dr["OBfile"].ToString());
                                orderDetail.Avalmin = (dr["Avalmin"].ToString());
                                orderDetail.OrderedSam = (dr["OrderedSam"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderedSam"]);
                                orderDetail.STCSam = (dr["STCSam"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["STCSam"]);
                                orderDetail.STCETA = (dr["STCETA"] != DBNull.Value) ? Convert.ToDateTime(dr["STCETA"]) : DateTime.MinValue;
                                //Added By Ashish on 4/3/2015
                                orderDetail.FitsETA = (dr["FitsETA"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsETA"]) : DateTime.MinValue;

                                orderDetail.TOPETA = (dr["TOPETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TOPETA"]) : DateTime.MinValue;

                                orderDetail.PatternSampleDateETA = (dr["PatternSampleDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleDateETA"]) : DateTime.MinValue;

                                orderDetail.CuttingReceivedDateETA = (dr["CuttingReceivedDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingReceivedDateETA"]) : DateTime.MinValue;

                                orderDetail.ProductionFileDateETA = (dr["ProductionFileDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileDateETA"]) : DateTime.MinValue;
                                orderDetail.PPSampleETA = (dr["PPSampleETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PPSampleETA"]) : DateTime.MinValue;

                                orderDetail.PatternSampleDate = (dr["PatternSampleDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleDate"]) : DateTime.MinValue;
                                orderDetail.CuttingReceivedDate = (dr["CuttingReceivedDate"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingReceivedDate"]) : DateTime.MinValue;

                                orderDetail.ProductionFileDate = (dr["ProductionFileDate"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileDate"]) : DateTime.MinValue;
                                // Edit by surendra for Check packinglist path
                                //(dr["CutAvgFile1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile1"]);
                                orderDetail.PackingListUploadPath = (dr["PackingListUploadPath"].ToString() == "") ? string.Empty : Convert.ToString(dr["PackingListUploadPath"]);
                                orderDetail.ShipmentNo = (dr["ShipmentNo"].ToString() == "") ? string.Empty : Convert.ToString(dr["ShipmentNo"]);
                                orderDetail.InvoiceNo = (dr["InvoiceNo"].ToString() == "") ? string.Empty : Convert.ToString(dr["InvoiceNo"]);
                                orderDetail.BankRefNo = (dr["BankRefNo"].ToString() == "") ? string.Empty : Convert.ToString(dr["BankRefNo"]);
                                orderDetail.InvoiceUploadPath = (dr["InvoiceUploadPath"].ToString() == "") ? string.Empty : Convert.ToString(dr["InvoiceUploadPath"]);
                                orderDetail.PaymentDueDate = (dr["PaymentDueDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PaymentDueDate"]) : DateTime.MinValue;
                                orderDetail.TotalPayment = (dr["TotalPayment"].ToString() == "") ? string.Empty : Convert.ToString(dr["TotalPayment"]);
                                orderDetail.PendingPayment = (dr["PendingPayment"].ToString() == "") ? string.Empty : Convert.ToString(dr["PendingPayment"]);
                                orderDetail.PPSample_ContractStatus = (dr["PPStatus"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PPStatus"]);
                                // end
                                if (orderDetail.ModeName.ToUpper().IndexOf("D") > -1)
                                {
                                    orderDetail.Margin = (dr["FOBMargin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FOBMargin"]);
                                }
                                else
                                {
                                    orderDetail.Margin = (dr["Margin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Margin"]);
                                }
                                orderDetail.Margin = (dr["Margin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Margin"]);
                                int ClintDiscount = (dr["Discount"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Discount"]);

                                orderDetail.discount = Convert.ToDouble(orderDetail.iKandiPrice);

                                double IkandiBusiness = Convert.ToDouble(orderDetail.Quantity) * Convert.ToDouble(orderDetail.discount.ToString("N"));
                                double ikandiBussi = (IkandiBusiness / 1000);
                                orderDetail.Business = Math.Round((ikandiBussi), 2, MidpointRounding.AwayFromZero);
                                orderDetail.Convertto = (dr["ConvertTo"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ConvertTo"]);
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);

                                //new work start : Girish
                                orderDetail.CuttingStatus = Convert.ToInt32(dr["CuttingStatus"]);
                                orderDetail.IsThreadAverageOptionOnMOVisible = Convert.ToInt32(dr["IsThreadAverageOptionOnMOVisible"]);

                                //new work End : Girish


                                string SanjeevRemarks = dr["SanjeevRemarks"].ToString();
                                orderDetail.SanjeevRemarks = SanjeevRemarks;
                                orderDetail.STCUnallocated = (dr["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(dr["STCUnallocated"]) : DateTime.MinValue;
                                orderDetail.ProductionUnitId = (dr["UnitID"] != DBNull.Value) ? Convert.ToInt32(dr["UnitID"]) : 0;
                                if ((desigId == 9) || (desigId == 35) || (desigId == 38) || (desigId == 36))
                                {
                                    if (orderDetail.ProductionUnitId == 0)
                                    {
                                        continue;
                                    }
                                }
                                orderDetail.BulkTarget = (dr["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["BulkTarget"]) : DateTime.MinValue;

                                orderDetail.ParentOrder = new Order();
                                orderDetail.ParentOrder.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.ParentOrder.OrderDate = Convert.ToDateTime(dr["OrderDate"]);
                                orderDetail.ParentOrder.BiplPrice = (dr["BIPLPrice"] == DBNull.Value) ? -1 : Convert.ToDouble(dr["BIPLPrice"]);
                                orderDetail.ParentOrder.Comments = (dr["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Comments"]);
                                orderDetail.IsFact = (dr["IsFact"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["IsFact"]);
                                orderDetail.ParentOrder.Style = new Style();
                                orderDetail.ParentOrder.Style.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.ParentOrder.Style.StyleID = Convert.ToInt32(dr["StyleID"]);

                                orderDetail.ParentOrder.Style.SampleImageURL1 = (dr["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL1"]);
                                orderDetail.ParentOrder.Style.SampleImageURL2 = (dr["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL2"]);
                                orderDetail.ParentOrder.Style.SampleImageURL3 = (dr["SampleImageURL3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL3"]);
                                orderDetail.ParentOrder.Style.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);
                                orderDetail.ParentOrder.Style.sCodeVersion = (dr["sCodeVersion"] == DBNull.Value) ? "-1" : Convert.ToString(dr["sCodeVersion"]);
                                orderDetail.ParentOrder.Style.client = new Client();
                                orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(dr["ClientID"]);
                                orderDetail.ParentOrder.Style.client.IsMDARequired = (dr["IsMDARequired"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsMDARequired"]);

                                orderDetail.ParentOrder.Style.cdept = new ClientDepartment();
                                orderDetail.ParentOrder.Style.cdept.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                //updated by bharat 31-Dec-18 
                                orderDetail.ParentOrder.Style.cdept.Name = System.Text.RegularExpressions.Regex.Replace(orderDetail.ParentOrder.Style.cdept.Name, @"\s+", "");
                                orderDetail.ParentOrder.Style.cdept.Name = orderDetail.ParentOrder.Style.cdept.Name.Insert(orderDetail.ParentOrder.Style.cdept.Name.IndexOf('('), " ");
                                string[] strdpt = orderDetail.ParentOrder.Style.cdept.Name.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                                orderDetail.ParentOrder.Style.cdept.Name = strdpt[0] + " " + "<span style='font-weight:500 !important'>" + strdpt[1] + "</span>";
                                //end
                                orderDetail.ParentOrder.Style.cdept.DeptID = (dr["ClientDepartmentID"] != DBNull.Value) ? Convert.ToInt32(dr["ClientDepartmentID"]) : 0;

                                orderDetail.Unit = new ProductionUnit();
                                orderDetail.Unit.ProductionUnitId = (dr["ProductionUnitId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitID"]);
                                orderDetail.Unit.FactoryName = (dr["FactoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryName"]);
                                orderDetail.Unit.FactoryCode = (dr["FactoryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryCode"]);

                                orderDetail.ParentOrder.Costing = new Costing();
                                orderDetail.ParentOrder.Costing.CostingID = (dr["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CostingId"]);
                                orderDetail.ParentOrder.Costing.ConvertTo = (dr["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["ConvertTo"]);
                                orderDetail.ParentOrder.Costing.Weight = Convert.ToDecimal(dr["Weight"]);

                                orderDetail.ParentOrder.WorkflowInstanceDetail = new WorkflowInstanceDetail();
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusMode = (dr["StatusMode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StatusMode"]);
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeID = (dr["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StatusModeID"]);// Add this
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeSequence = (dr["Permission_Sequence"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Permission_Sequence"]);// Add this

                                orderDetail.ParentOrder.InlinePPMOrderContract = new InlinePPMOrderContract(); // to get top send target and top send actual
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget = (dr["TopSentTarget"] == DBNull.Value) ? orderDetail.StitchingETA : Convert.ToDateTime(dr["TopSentTarget"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual = (dr["TopSentActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopSentActual"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval = (dr["TopActualApproval"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopActualApproval"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus = (dr["TopStatus"] == DBNull.Value) ? TopStatusType.UNKNOWN : (TopStatusType)Convert.ToInt32(dr["TopStatus"]);

                                orderDetail.ParentOrder.Fits = new Fits();
                                orderDetail.ParentOrder.Fits.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);
                                orderDetail.ParentOrder.Fits.IsStcApproved = (dr["StcApproved"] == DBNull.Value) ? false : Convert.ToBoolean(dr["StcApproved"]);

                                orderDetail.ParentOrder.Fits.SealDate = (dr["SealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SealDate"]);

                                orderDetail.ParentOrder.Fits.SpecsUploadTargetDate = (dr["SpecsUploadTargetDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadTargetDate"]);
                                orderDetail.ParentOrder.Fits.SpecsUploadDate = (dr["SpecsUploadDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadDate"]);
                                orderDetail.ParentOrder.Fits.StyleCodeVersion = (dr["StyleCodeVersion"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleCodeVersion"]);
                                orderDetail.ParentOrder.FitsTrack = new FitsTrack();
                                orderDetail.ParentOrder.FitsTrack.CommentsSentFor = (dr["CommentsSentFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CommentsSentFor"]);
                                orderDetail.ParentOrder.FitsTrack.PlanningFor = (dr["PlanningFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["PlanningFor"]);
                                orderDetail.ParentOrder.FitsTrack.fitRequestedOn = (dr["fitRequestedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["fitRequestedOn"]);
                                orderDetail.ParentOrder.FitsTrack.AckDate = (dr["AckDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["AckDate"]);
                                orderDetail.ParentOrder.FitsTrack.NextPlannedDate = (dr["NextPlannedDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["NextPlannedDate"]);
                                //added by manisha
                                orderDetail.ParentOrder.FitsTrack.PlannedDispatchDate = (dr["plannedDispatchDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["plannedDispatchDate"]);
                                orderDetail.ParentOrder.Fits.Department = new ClientDepartment();
                                orderDetail.ParentOrder.Fits.Department.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Fits.Department.DeptID = (dr["ClientDepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ClientDepartmentID"]);
                                //end
                                // Add By Ravi kumar on 30-6-17
                                orderDetail.ParentOrder.Fits.Fitstatus_ManageOrder = (dr["Fitstatus_ManageOrder"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fitstatus_ManageOrder"]);
                                orderDetail.FitStatus = Constants.GetFitsStatusManageOrder(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.Fitstatus_ManageOrder);

                                //orderDetail.FitStatus = Constants.GetFitsStatus(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.IsStcApproved, orderDetail.ParentOrder.Fits.SealDate,
                                //    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus,
                                //    orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                                orderDetail.FitStatusBgColor = Constants.GetFitsStatusColor(orderDetail.ExFactory, orderDetail.STCUnallocated, orderDetail.ParentOrder.OrderDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual,
                                                    orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.SealDate, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.NextPlannedDate, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.Fits.IsStcApproved,
                                                    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);
                                if (orderDetail.FitStatusBgColor == "#00FF70")
                                {
                                    orderDetail.FitStatusBgColor = "#4f8f00";
                                }
                                if (orderDetail.FitStatusBgColor == "#FFFFFF")
                                {
                                    orderDetail.FitStatusBgColor = "#000000";
                                }

                                orderDetail.Fabric1Details = (dr["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1DetailsRef"]);
                                orderDetail.Fabric2Details = (dr["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2DetailsRef"]);
                                orderDetail.Fabric3Details = (dr["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3DetailsRef"]);
                                orderDetail.Fabric4Details = (dr["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4DetailsRef"]);


                                orderDetail.Fabric1Print = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.Fabric2Print = (dr["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2Details"]);
                                orderDetail.Fabric3Print = (dr["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3Details"]);
                                orderDetail.Fabric4Print = (dr["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4Details"]);
                                //
                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.Fabric5Details = (dr["Fabric5DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5DetailsRef"]);
                                    orderDetail.Fabric6Details = (dr["Fabric6DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6DetailsRef"]);
                                    orderDetail.Fabric5Print = (dr["Fabric5Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5Details"]);
                                    orderDetail.Fabric6Print = (dr["Fabric6Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6Details"]);
                                    orderDetail.Fabric5 = ReturnFabric((dr["Fabric5"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5"]));
                                    orderDetail.Fabric6 = ReturnFabric((dr["Fabric6"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6"]));

                                    orderDetail.Fabric5CCGSM = ReturnFabric((dr["Fabric5CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5CCGSM"]));
                                    orderDetail.Fabric6CCGSM = ReturnFabric((dr["Fabric6CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6CCGSM"]));

                                    orderDetail.FabricTrackingTarget5 = (dr["FabricTrackingTarget5"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget5"]) : DateTime.MinValue;
                                    orderDetail.FabricTrackingTarget6 = (dr["FabricTrackingTarget6"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget6"]) : DateTime.MinValue;
                                    orderDetail.Fabric5actionDate = (dr["FabricTracking5"]).ToString();
                                    orderDetail.Fabric6actionDate = (dr["FabricTracking6"]).ToString();
                                    orderDetail.StrikeOff5ETA = (dr["StrikeOff5ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff5ETA"]) : DateTime.MinValue;
                                    orderDetail.StrikeOff6ETA = (dr["StrikeOff6ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff6ETA"]) : DateTime.MinValue;
                                    if (dr["FabricInh5"] != DBNull.Value)
                                    {
                                        Fab5InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh5"]).Replace(",", ""));

                                    }
                                    double Fabric5InHouseChecked_kd = (Fab5InChecked_ / 1000);
                                    orderDetail.Fab5InHouseChecked_k = Math.Round((Fabric5InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                    if (dr["FabricInh6"] != DBNull.Value)
                                    {
                                        Fab6InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh6"]).Replace(",", ""));

                                    }
                                    double Fabric6InHouseChecked_kd = (Fab6InChecked_ / 1000);
                                    orderDetail.Fab6InHouseChecked_k = Math.Round((Fabric6InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                    orderDetail.Fabric_ModuleDatabase = "Testing_QA_FabricModule";
                                }
                                var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                    result = 0;
                                }

                                var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                    result = 0;
                                }

                                var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                    result = 0;
                                }

                                var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                    result = 0;
                                }
                                orderDetail.Fabric1 = ReturnFabric((dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]));
                                orderDetail.Fabric2 = ReturnFabric((dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]));
                                orderDetail.Fabric3 = ReturnFabric((dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]));
                                orderDetail.Fabric4 = ReturnFabric((dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]));

                                orderDetail.Fabric1CCGSM = ReturnFabric((dr["Fabric1CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1CCGSM"]));
                                orderDetail.Fabric2CCGSM = ReturnFabric((dr["Fabric2CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2CCGSM"]));
                                orderDetail.Fabric3CCGSM = ReturnFabric((dr["Fabric3CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3CCGSM"]));
                                orderDetail.Fabric4CCGSM = ReturnFabric((dr["Fabric4CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4CCGSM"]));

                                orderDetail.ParentOrder.FabricInhouseHistory = new FabricInhouseHistory();

                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = (dr["PercentInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = (dr["PercentInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = (dr["PercentInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = (dr["PercentInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse4"]);

                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate1 = (dr["Date1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate2 = (dr["Date2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate3 = (dr["Date3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate4 = (dr["Date4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date4"]);


                                //Added By Ashish
                                orderDetail.Fabric1OrderAverage = (dr["Fabric1OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric1OrderAverage"]);
                                orderDetail.OrdAvgDate1 = (dr["OrdAvgDate1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate1"]);
                                orderDetail.Fabric2OrderAverage = (dr["Fabric2OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric2OrderAverage"]);
                                orderDetail.OrdAvgDate2 = (dr["OrdAvgDate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate2"]);
                                orderDetail.Fabric3OrderAverage = (dr["Fabric3OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric3OrderAverage"]);
                                orderDetail.OrdAvgDate3 = (dr["OrdAvgDate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate3"]);
                                orderDetail.Fabric4OrderAverage = (dr["Fabric4OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric4OrderAverage"]);
                                orderDetail.OrdAvgDate4 = (dr["OrdAvgDate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate4"]);

                                orderDetail.Fabric1STCAverage = (dr["Fabric1STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric1STCAverage"]);
                                orderDetail.CutAverageDate1 = (dr["CutAverageDate1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate1"]);
                                orderDetail.Fabric2STCAverage = (dr["Fabric2STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric2STCAverage"]);
                                orderDetail.CutAverageDate2 = (dr["CutAverageDate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate2"]);
                                orderDetail.Fabric3STCAverage = (dr["Fabric3STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric3STCAverage"]);
                                orderDetail.CutAverageDate3 = (dr["CutAverageDate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate3"]);
                                orderDetail.Fabric4STCAverage = (dr["Fabric4STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric4STCAverage"]);
                                orderDetail.CutAverageDate4 = (dr["CutAverageDate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate4"]);
                                //
                                orderDetail.CutWidth1 = (dr["CutWidth1"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth1"]);
                                orderDetail.CutWidth2 = (dr["CutWidth2"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth2"]);
                                orderDetail.CutWidth3 = (dr["CutWidth3"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth3"]);
                                orderDetail.CutWidth4 = (dr["CutWidth4"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth4"]);



                                //

                                // shown kg/mtr from fabric working sheet
                                orderDetail.UnitOfAverage1 = (dr["UnitOfAverage1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage1"]);
                                orderDetail.UnitOfAverage2 = (dr["UnitOfAverage2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage2"]);
                                orderDetail.UnitOfAverage3 = (dr["UnitOfAverage3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage3"]);
                                orderDetail.UnitOfAverage4 = (dr["UnitOfAverage4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage4"]);
                                //--------------------------Logic Apply For the latest Avg---------------------------------------------------------------------------
                                string summary1Caption = "";
                                string summary2Caption = "";
                                string summary3Caption = "";
                                string summary4Caption = "";
                                string summary5Caption = "";
                                string summary6Caption = "";
                                orderDetail.TotalSummary1 = SummaryAvg(orderDetail.Fabric1STCAverage, orderDetail.Fabric1OrderAverage, orderDetail.Quantity, ref summary1Caption, orderDetail.UnitOfAverage1);
                                orderDetail.TotalSummary2 = SummaryAvg(orderDetail.Fabric2STCAverage, orderDetail.Fabric2OrderAverage, orderDetail.Quantity, ref summary2Caption, orderDetail.UnitOfAverage2);
                                orderDetail.TotalSummary3 = SummaryAvg(orderDetail.Fabric3STCAverage, orderDetail.Fabric3OrderAverage, orderDetail.Quantity, ref summary3Caption, orderDetail.UnitOfAverage3);
                                orderDetail.TotalSummary4 = SummaryAvg(orderDetail.Fabric4STCAverage, orderDetail.Fabric4OrderAverage, orderDetail.Quantity, ref summary4Caption, orderDetail.UnitOfAverage4);

                                orderDetail.Caption1 = summary1Caption;
                                orderDetail.Caption2 = summary2Caption;
                                orderDetail.Caption3 = summary3Caption;
                                orderDetail.Caption4 = summary4Caption;
                                orderDetail.Fabric1STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate1, orderDetail.OrdAvgDate1, orderDetail.Fabric1STCAverage, orderDetail.Fabric1OrderAverage);
                                orderDetail.Fabric2STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate2, orderDetail.OrdAvgDate2, orderDetail.Fabric2STCAverage, orderDetail.Fabric2OrderAverage);
                                orderDetail.Fabric3STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate3, orderDetail.OrdAvgDate3, orderDetail.Fabric3STCAverage, orderDetail.Fabric3OrderAverage);
                                orderDetail.Fabric4STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate4, orderDetail.OrdAvgDate4, orderDetail.Fabric4STCAverage, orderDetail.Fabric4OrderAverage);

                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.Fabric5STCAverage = (dr["Fabric5STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric5STCAverage"]);
                                    orderDetail.Fabric6STCAverage = (dr["Fabric6STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric6STCAverage"]);
                                    orderDetail.Fabric5OrderAverage = (dr["Fabric5OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric5OrderAverage"]);
                                    orderDetail.Fabric6OrderAverage = (dr["Fabric6OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric6OrderAverage"]);
                                    orderDetail.OrdAvgDate5 = (dr["OrdAvgDate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate5"]);
                                    orderDetail.OrdAvgDate6 = (dr["OrdAvgDate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate6"]);
                                    orderDetail.CutAverageDate5 = (dr["CutAverageDate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate5"]);
                                    orderDetail.CutAverageDate6 = (dr["CutAverageDate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate6"]);
                                    orderDetail.UnitOfAverage5 = (dr["UnitOfAverage5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage5"]);
                                    orderDetail.UnitOfAverage6 = (dr["UnitOfAverage6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage6"]);
                                    orderDetail.TotalSummary5 = SummaryAvg(orderDetail.Fabric5STCAverage, orderDetail.Fabric5OrderAverage, orderDetail.Quantity, ref summary5Caption, orderDetail.UnitOfAverage5);
                                    orderDetail.TotalSummary6 = SummaryAvg(orderDetail.Fabric6STCAverage, orderDetail.Fabric6OrderAverage, orderDetail.Quantity, ref summary6Caption, orderDetail.UnitOfAverage6);
                                    orderDetail.Caption5 = summary5Caption;
                                    orderDetail.Caption6 = summary6Caption;
                                    orderDetail.Fabric5STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate5, orderDetail.OrdAvgDate5, orderDetail.Fabric5STCAverage, orderDetail.Fabric5OrderAverage);
                                    orderDetail.Fabric6STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate6, orderDetail.OrdAvgDate6, orderDetail.Fabric6STCAverage, orderDetail.Fabric6OrderAverage);


                                }
                                //Add By Ravi kumar on 19/2/15 For Ship Check box
                                orderDetail.IsShiped = (dr["IsShiped"] == DBNull.Value) ? false : Convert.ToBoolean(dr["IsShiped"]);
                                // Added By Ashish on 12/3/15 For IsShpped Date
                                orderDetail.IsShipedDate = (dr["IsShipedOn"] != DBNull.Value) ? Convert.ToDateTime(dr["IsShipedOn"]) : DateTime.MinValue;
                                // updated  By sushil on 26/3/2015
                                orderDetail.IsFitsPending = (dr["FitsPending"] == DBNull.Value) ? false : Convert.ToBoolean(dr["FitsPending"]);

                                //END  updated  By sushil on 26/3/2015
                                //-------------------------End-------------------------------------------------------------------------------------------------------

                                orderDetail.ShippedQty = (dr["shippedqty"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["shippedqty"]);
                                orderDetail.Finish_80 = (dr["Finish_80"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Finish_80"]);

                                string strGetTotalQTY = "orderid =" + orderDetail.OrderID;
                                DataRow[] drGetTotalQTY;
                                drGetTotalQTY = dtTotalQty.Select(strGetTotalQTY);
                                int TotalQTY = Convert.ToInt32(drGetTotalQTY[0].ItemArray[0]);

                                //Added By Ashish on 1/9/2014
                                int iFinalOrderFabric1 = (dr["FinalOrderFabric1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinalOrderFabric1"]);
                                int FabricGreige = (dr["Fabric1Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric1Greige"]);
                                int MOPercentadd1 = (dr["MOPercentadd1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd1"]);

                                string QuantityAvl1 = "";
                                QuantityAvl1 = (dr["QuantityAvl1"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl1"]);

                                orderDetail.FinalOrderFabric1 = (dr["Ordavg1"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg1"]);

                                orderDetail.Fabric1Required_ToolTip = (dr["Fabric1Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric1Required_ToolTip"]);
                                orderDetail.Fabric1Required = (dr["Fabric1Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric1Required"]);
                                // Made changes in the inhouse % logic now based on actual required quantity for all 6 fabric on dated 19th jan 23 by RSB
                                if ((orderDetail.Fabric1STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric1Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl1.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric1Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric1STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric1OrderAverage != 0) && (orderDetail.Quantity != 0) && orderDetail.Fabric1STCAverage == 0 && (Convert.ToDecimal(orderDetail.Fabric1Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl1.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric1Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric1OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = 0;

                                int FabricGreige2 = (dr["Fabric2Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric2Greige"]);
                                int MOPercentadd2 = (dr["MOPercentadd2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd2"]);

                                string QuantityAvl2 = "";
                                QuantityAvl2 = (dr["QuantityAvl2"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl2"]);

                                orderDetail.FinalOrderFabric2 = (dr["Ordavg2"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg2"]);

                                orderDetail.Fabric2Required_ToolTip = (dr["Fabric2Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric2Required_ToolTip"]);
                                orderDetail.Fabric2Required = (dr["Fabric2Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric2Required"]);

                                if ((orderDetail.Fabric2STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric2Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl2.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric2Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric2STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric2OrderAverage != 0) && (orderDetail.Quantity != 0) && (orderDetail.Fabric2STCAverage == 0) && (Convert.ToDecimal(orderDetail.Fabric2Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl2.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric2Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric2OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = 0;

                                int iFinalOrderFabric3 = (dr["FinalOrderFabric3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinalOrderFabric3"]);
                                int FabricGreige3 = (dr["Fabric3Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric3Greige"]);
                                int MOPercentadd3 = (dr["MOPercentadd3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd3"]);

                                string QuantityAvl3 = "";
                                QuantityAvl3 = (dr["QuantityAvl3"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl3"]);

                                orderDetail.FinalOrderFabric3 = (dr["Ordavg3"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg3"]);


                                orderDetail.Fabric3Required_ToolTip = (dr["Fabric3Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric3Required_ToolTip"]);
                                orderDetail.Fabric3Required = (dr["Fabric3Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric3Required"]);

                                if ((orderDetail.Fabric3STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric3Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl3.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric3Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric3STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric3OrderAverage != 0) && (orderDetail.Quantity != 0) && (orderDetail.Fabric3STCAverage == 0) && (Convert.ToDecimal(orderDetail.Fabric3Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl3.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric3Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric3OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = 0;


                                int FabricGreige4 = (dr["Fabric4Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric4Greige"]);
                                int MOPercentadd4 = (dr["MOPercentadd4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd4"]);

                                string QuantityAvl4 = "";
                                QuantityAvl4 = (dr["QuantityAvl4"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl4"]);

                                orderDetail.FinalOrderFabric4 = (dr["Ordavg4"] == DBNull.Value) ? "0" : Convert.ToString(dr["Ordavg4"]);

                                orderDetail.Fabric4Required_ToolTip = (dr["Fabric4Required_ToolTip"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric4Required_ToolTip"]);
                                orderDetail.Fabric4Required = (dr["Fabric4Required"] == DBNull.Value) ? "0" : Convert.ToString(dr["Fabric4Required"]);

                                if ((orderDetail.Fabric4STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric4Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl4.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric4Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric4STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric4OrderAverage != 0) && (orderDetail.Quantity != 0) && (orderDetail.Fabric4STCAverage == 0) && (Convert.ToDecimal(orderDetail.Fabric4Required) != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl4.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric4Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric4OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = 0;

                                orderDetail.QuantityAvl1 = (dr["QuantityAvl1"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl1"]);

                                orderDetail.QuantityAvl2 = (dr["QuantityAvl2"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl2"]);
                                orderDetail.QuantityAvl3 = (dr["QuantityAvl3"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl3"]);
                                orderDetail.QuantityAvl4 = (dr["QuantityAvl4"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl4"]);


                                double QuantityAvl1_ = 0;
                                double QuantityAvl2__ = 0;
                                double QuantityAvl3__ = 0;
                                double QuantityAvl4__ = 0;
                                double QuantityAvl5__ = 0;
                                double QuantityAvl6__ = 0;

                                if (dr["QuantityAvl1"] != DBNull.Value)
                                {
                                    QuantityAvl1_ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl1"]).Replace(",", ""));

                                }
                                double FinalOrderFabric1_kd = (QuantityAvl1_ / 1000);
                                orderDetail.FinalOrderFabric1_k = Math.Round((FinalOrderFabric1_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k"; ;

                                if (dr["QuantityAvl2"] != DBNull.Value)
                                {
                                    QuantityAvl2__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl2"]).Replace(",", ""));

                                    double FinalOrderFabric2_kd = (QuantityAvl2__ / 1000);
                                    orderDetail.FinalOrderFabric2_k = Math.Round((FinalOrderFabric2_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                }

                                if (dr["QuantityAvl3"] != DBNull.Value)
                                {
                                    QuantityAvl3__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl3"]).Replace(",", ""));

                                    double FinalOrderFabric3_kd = (QuantityAvl3__ / 1000);
                                    orderDetail.FinalOrderFabric3_k = Math.Round((FinalOrderFabric3_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                }

                                if (dr["QuantityAvl4"] != DBNull.Value)
                                {
                                    QuantityAvl4__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl4"]).Replace(",", ""));

                                    double FinalOrderFabric4_kd = (QuantityAvl4__ / 1000);
                                    orderDetail.FinalOrderFabric4_k = Math.Round((FinalOrderFabric4_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                }
                                orderDetail.TotalPenalty = (dr["TotalPenalty"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["TotalPenalty"]);
                                orderDetail.PenaltyPercentAge = (dr["PenaltyPercentAge"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["PenaltyPercentAge"]);
                                orderDetail.IsRiskTask = IsRiskDone(orderDetail.ParentOrder.Style.StyleID, "IsRiskDone", orderDetail.OrderID);
                                orderDetail.IsOBCreate = IsOBCreate(orderDetail.ParentOrder.Style.StyleID, "IsOBCreate");
                                orderDetail.IsFinalizeOB = IsFinalizeOB(orderDetail.ParentOrder.Style.StyleID, "FinalizeOB");
                                orderDetail.IsLinePlan = (dr["IsLinePlan"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsLinePlan"]);
                                orderDetail.LineCount = (dr["LineCount"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["LineCount"]);

                                orderDetail.Accessories = new List<MOOrderDetails.AccessoriesDetails>();
                                orderDetail.ApprovedDate = new List<MOOrderDetails.AccessoriesApprovedDate>();

                                string strNewPercent = "OrderDetailID =" + orderDetail.OrderDetailID;
                                //DataRow[] drAccPercent = dtAccessoryOld.Select(strNewPercent);
                                orderDetail.ParentOrder.FabricApprovalDetails = new FabricApprovalDetails();
                                orderDetail.ParentOrder.FabricApprovalDetails.F5BulkStatus = (dr["FabricTracking1"].ToString() == "") ? string.Empty : dr["FabricTracking1"].ToString().Remove((dr["FabricTracking1"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F6BulkStatus = (dr["FabricTracking2"].ToString() == "") ? string.Empty : dr["FabricTracking2"].ToString().Remove((dr["FabricTracking2"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F7BulkStatus = (dr["FabricTracking3"].ToString() == "") ? string.Empty : dr["FabricTracking3"].ToString().Remove((dr["FabricTracking3"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F8BulkStatus = (dr["FabricTracking4"].ToString() == "") ? string.Empty : dr["FabricTracking4"].ToString().Remove((dr["FabricTracking4"]).ToString().Length - 13);

                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.ParentOrder.FabricApprovalDetails.F9BulkStatus = (dr["FabricTracking5"].ToString() == "") ? string.Empty : dr["FabricTracking5"].ToString().Remove((dr["FabricTracking5"]).ToString().Length - 13);
                                    orderDetail.ParentOrder.FabricApprovalDetails.F10BulkStatus = (dr["FabricTracking6"].ToString() == "") ? string.Empty : dr["FabricTracking6"].ToString().Remove((dr["FabricTracking6"]).ToString().Length - 13);
                                    if (dr["QuantityAvl5"] != DBNull.Value)
                                    {
                                        QuantityAvl5__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl5"]).Replace(",", ""));

                                        double FinalOrderFabric5_kd = (QuantityAvl5__ / 1000);
                                        orderDetail.FinalOrderFabric5_k = Math.Round((FinalOrderFabric5_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                    }
                                    if (dr["QuantityAvl6"] != DBNull.Value)
                                    {
                                        QuantityAvl6__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl6"]).Replace(",", ""));

                                        double FinalOrderFabric6_kd = (QuantityAvl6__ / 1000);
                                        orderDetail.FinalOrderFabric6_k = Math.Round((FinalOrderFabric6_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                    }
                                    string QuantityAvl5 = "";
                                    QuantityAvl5 = (dr["QuantityAvl5"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl5"]);
                                    if ((orderDetail.Fabric5STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric5Required) != 0))
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric5Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl5.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric5Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric5STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                    else if ((orderDetail.Fabric5OrderAverage != 0) && (orderDetail.Quantity != 0) && (orderDetail.Fabric5STCAverage == 0) && (Convert.ToDecimal(orderDetail.Fabric5Required) != 0))
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric5Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl5.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric5Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric5OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                    else
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric5Percent = 0;

                                    string QuantityAvl6 = "";
                                    QuantityAvl6 = (dr["QuantityAvl6"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl6"]);
                                    if ((orderDetail.Fabric6STCAverage != 0) && (orderDetail.Quantity != 0) && (Convert.ToDecimal(orderDetail.Fabric6Required) != 0))
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric6Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl6.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric6Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric6STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                    else if ((orderDetail.Fabric6OrderAverage != 0) && (orderDetail.Quantity != 0) && (orderDetail.Fabric6STCAverage == 0) && (Convert.ToDecimal(orderDetail.Fabric6Required) != 0))
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric6Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl6.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric6Required)) * 100)); //Convert.ToDecimal(orderDetail.Fabric6OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                    else
                                        orderDetail.ParentOrder.FabricInhouseHistory.Fabric6Percent = 0;

                                }
                                orderDetail.Fabric1actionDate = (dr["FabricTracking1"]).ToString();
                                orderDetail.Fabric2actionDate = (dr["FabricTracking2"]).ToString();
                                orderDetail.Fabric3actionDate = (dr["FabricTracking3"]).ToString();
                                orderDetail.Fabric4actionDate = (dr["FabricTracking4"]).ToString();
                                orderDetail.TotalcutQtyforCTSL = dr["TotalcutQtyforCTSL"] == DBNull.Value ? "0" : dr["TotalcutQtyforCTSL"].ToString();
                                orderDetail.QCNarration = dr["QCNarration"] == DBNull.Value ? " " : dr["QCNarration"].ToString();

                                if (orderDetail.QCNarration.ToLower().Contains("inln"))
                                    orderDetail.InspectionID = "1";
                                if (orderDetail.QCNarration.ToLower().Contains("mid"))
                                    orderDetail.InspectionID = "2";
                                if (orderDetail.QCNarration.ToLower().Contains("fnl"))
                                    orderDetail.InspectionID = "3";
                                if (orderDetail.QCNarration.ToLower().Contains("onln"))
                                    orderDetail.InspectionID = "4";

                                int SizeQuantity = (dr["SizeQuantity"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["SizeQuantity"]);

                                string strSize = "OrderDetailID =" + orderDetail.OrderDetailID;
                                //DataRow[] DataRows2;
                                //DataRows2 = dt2.Select(strSize);

                                //foreach (DataRow dr2 in DataRows2)
                                //{
                                //    int quantity = (dr2["TotalQuantity"] != DBNull.Value) ? Convert.ToInt32(dr2["TotalQuantity"]) : 0;
                                if (SizeQuantity > 0)
                                    orderDetail.IsSizeFilledUp = true;
                                else
                                    orderDetail.IsSizeFilledUp = false;
                                //}

                                int Qty = Convert.ToInt32(dr["Quantity"]);
                                string OdId1 = "OrderDetailID =" + orderDetail.OrderDetailID;

                                DataRow[] DrProduction;
                                DrProduction = dtProduction.Select(OdId1);
                                if (DrProduction.Length > 0)
                                {
                                    orderDetail.Production = GetProductionTable(DrProduction.CopyToDataTable());
                                }

                                string str = "DesignationID=" + desigId;
                                //string str1 = "DepartmentID=" + DeptId;
                                DataRow[] DataRow;
                                DataRow = dtMoPermission.Select(str);
                                //Added By Ashish on 4/3/2014
                                iKandi.Common.MOOrderDetails.AccQualityRead = false;
                                iKandi.Common.MOOrderDetails.AccQualityWrite = false;
                                iKandi.Common.MOOrderDetails.AccApprovedOnRead = false;
                                iKandi.Common.MOOrderDetails.AccApprovedOnWrite = false;
                                iKandi.Common.MOOrderDetails.AccAvilableOnRead = false;
                                iKandi.Common.MOOrderDetails.AccAvilableOnWrite = false;
                                iKandi.Common.MOOrderDetails.AccTotalRead = false;
                                iKandi.Common.MOOrderDetails.AccTotalWrite = false;
                                iKandi.Common.MOOrderDetails.AccRemarkRead = false;
                                iKandi.Common.MOOrderDetails.AccRemarkWrite = false;
                                iKandi.Common.MOOrderDetails.AccRecdRead = false;
                                iKandi.Common.MOOrderDetails.AccRecdWrite = false;
                                iKandi.Common.MOOrderDetails.AccessoriesETARead = false;
                                iKandi.Common.MOOrderDetails.AccessoriesETAWrite = false;
                                //END

                                //Gajendra Prod Permission 01-03-2016
                                MOOrderDetails.PCutTodayWrite = false;
                                MOOrderDetails.PCutReadyTodayWrite = false;
                                MOOrderDetails.PStitchTodayWrite = false;
                                MOOrderDetails.PFinishTodayWrite = false;
                                MOOrderDetails.PVATodayWrite = false;
                                MOOrderDetails.PCutTotalWrite = false;
                                MOOrderDetails.PCutReadyTotalWrite = false;
                                MOOrderDetails.PStitchTotalWrite = false;
                                MOOrderDetails.PFinishTotalWrite = false;
                                MOOrderDetails.PVATotalWrite = false;


                                foreach (DataRow dr8 in DataRow)
                                {
                                    //Permission prmSection = new Permission();

                                    MOOrderDetails odPeemissionColumn = new MOOrderDetails();
                                    string strPermission = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                    string ColumnName = (dr8["MoColumnName"] == DBNull.Value) ? string.Empty : dr8["MoColumnName"].ToString();
                                    //if() 
                                    orderDetail.SectionName = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                    int CoulmeID = Convert.ToInt32((dr8["CoulmeID"] == DBNull.Value) ? string.Empty : dr8["CoulmeID"]);

                                    odPeemissionColumn.ColumnName = (dr8["MoColumnName"] == DBNull.Value) ? string.Empty : dr8["MoColumnName"].ToString();
                                    switch (strPermission)
                                    {
                                        case "Basic Info section":
                                            iKandi.Common.Permission.BasicSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 1)
                                            {
                                                //orderDetail.bOrderDate = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.bSerialNo = true;
                                                orderDetail.bSerialNowrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 2)
                                            {
                                                //orderDetail.bSerialNo = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.bStylelNo = true;
                                                orderDetail.bStyleNowrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 3)
                                            {
                                                orderDetail.bLineNo = true;
                                                orderDetail.bLinewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 4)
                                            {
                                                orderDetail.bContractNo = true;
                                                orderDetail.bContractwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 5)
                                            {
                                                orderDetail.bBIPLPrice = true;
                                                orderDetail.bBIPLPricewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 6)
                                            {
                                                orderDetail.bIKANDIPriceGrossRead = true;
                                                orderDetail.bIKANDIPriceGrosswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 7)
                                            {
                                                orderDetail.bIKANDIPriceRead = true;
                                                orderDetail.bIKANDIPricewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 8)
                                            {
                                                orderDetail.bMarginRead = true;
                                                orderDetail.bMarginwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //if (CoulmeID == "Ikandi Business")
                                            //{
                                            //    orderDetail.bBusinessRead = true;
                                            //    orderDetail.bBusinesswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            //}
                                            if (CoulmeID == 50)
                                            {
                                                orderDetail.bBusinessDescriptionRead = true;
                                                orderDetail.bBusinessDescriptionwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 51)
                                            {
                                                orderDetail.bDepartmentRead = true;
                                                orderDetail.bDepartmentwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 10)
                                            {
                                                orderDetail.bOrderDateRead = true;
                                                orderDetail.bOrderDatewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 18)
                                            {
                                                orderDetail.bBasicInfoRemarkRead = true;
                                                orderDetail.bBasicInfoRemarkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //Added By Ashish on 28/3/2015
                                            if (CoulmeID == 115)
                                            {
                                                orderDetail.bPriceVAriationRead = true;
                                                orderDetail.bPriceVAriationkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 116)
                                            {
                                                orderDetail.bPOPendingRead = true;
                                                orderDetail.bPOPendingkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            //added by abhishek on 19/1/2016
                                            if (CoulmeID == 124)
                                            {

                                                orderDetail.PhotoShotWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //end by abhishek on 19/1/2016

                                            //added by Surendra sharma on 09-03-2018..----
                                            if (CoulmeID == 124)
                                            {

                                                orderDetail.PhotoShotWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 135)
                                            {
                                                orderDetail.bCostingWeight = true;
                                                orderDetail.bCostingWeight_Permission = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);

                                            }
                                            // Added by shubhendu on 03/03/2022 for biplPrice Update
                                            if (CoulmeID == 142)
                                            {
                                                orderDetail.MO_BIPL_PRICE_UPDATE = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //-------------------End--------------------
                                            break;

                                        case "Fabric Section":
                                            iKandi.Common.Permission.StyleSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 19)
                                            {
                                                orderDetail.FBIHDateRead = true;
                                                orderDetail.FBIHDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //if (CoulmeID == "Dept Date")
                                            //{
                                            //    orderDetail.FDeptDateRead = true;
                                            //    orderDetail.FDeptDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            //}
                                            if (CoulmeID == 21)
                                            {
                                                orderDetail.FQualityRead = true;
                                                orderDetail.FQualityWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 22)
                                            {
                                                orderDetail.FOrdRead = true;
                                                orderDetail.FOrdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 23)
                                            {
                                                orderDetail.FRecdRead = true;
                                                orderDetail.FRecdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 24)
                                            {
                                                orderDetail.FFabricRemarkRead = true;
                                                orderDetail.FFabricRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            // Added By ashish on 6/3/2014
                                            if (CoulmeID == 53)
                                            {
                                                orderDetail.FFabricTrackingRead = true;
                                                orderDetail.FFabricTrackingWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 56)
                                            {
                                                orderDetail.FPerInhouseRead = true;
                                                orderDetail.FPerInhouseWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 57)
                                            {
                                                orderDetail.FFabTotalRead = true;
                                                orderDetail.FFabTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 61)
                                            {
                                                orderDetail.FFabStartETARead = true;
                                                orderDetail.FFabStartETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 62)
                                            {
                                                orderDetail.FFabEndETARead = true;
                                                orderDetail.FFabEndETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 105)
                                            {
                                                orderDetail.FFabSummaryRead = true;
                                                orderDetail.FFabSummaryWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //END
                                            break;


                                        case "Accessories Section":
                                            iKandi.Common.Permission.AccessoriesSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 25)
                                            {
                                                iKandi.Common.MOOrderDetails.AccQualityRead = true;
                                                iKandi.Common.MOOrderDetails.AccQualityWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);

                                            }
                                            if (CoulmeID == 26)
                                            {
                                                iKandi.Common.MOOrderDetails.AccApprovedOnRead = true;
                                                iKandi.Common.MOOrderDetails.AccApprovedOnWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 27)
                                            {
                                                iKandi.Common.MOOrderDetails.AccRecdRead = true;
                                                iKandi.Common.MOOrderDetails.AccRecdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 29)
                                            {
                                                iKandi.Common.MOOrderDetails.AccAvilableOnRead = true;
                                                iKandi.Common.MOOrderDetails.AccAvilableOnWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 28)
                                            {
                                                iKandi.Common.MOOrderDetails.AccTotalRead = true;
                                                iKandi.Common.MOOrderDetails.AccTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 49)
                                            {
                                                iKandi.Common.MOOrderDetails.AccRemarkRead = true;
                                                iKandi.Common.MOOrderDetails.AccRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 63)
                                            {
                                                iKandi.Common.MOOrderDetails.AccessoriesETARead = true;
                                                iKandi.Common.MOOrderDetails.AccessoriesETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //
                                            break;
                                        case "Fits Section":
                                            iKandi.Common.Permission.AccessoriesSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 30)
                                            {
                                                orderDetail.FitsStcRead = true;
                                                orderDetail.FitsStcWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 34)
                                            {
                                                orderDetail.FitsStatusRead = true;
                                                orderDetail.FitsStatusWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 35)
                                            {
                                                orderDetail.FitsPCDRead = true;
                                                orderDetail.FitsPCDWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }



                                            if (CoulmeID == 38)
                                            {
                                                orderDetail.FitsLineRead = true;
                                                orderDetail.FitsLineWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 39)
                                            {
                                                orderDetail.FitsDaysRead = true;
                                                orderDetail.FitsDaysWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 43)
                                            {
                                                orderDetail.FitsRemarkRead = true;
                                                orderDetail.FitsRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 66)
                                            {
                                                orderDetail.FitsPatternRead = true;
                                                orderDetail.FitsPatternkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 67)
                                            {
                                                orderDetail.FitsCuttingkRead = true;
                                                orderDetail.FitsCuttingkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 68)
                                            {
                                                orderDetail.FitsProdFileRead = true;
                                                orderDetail.FitsProdFileWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 69)
                                            {
                                                orderDetail.FitsHOPPMRead = true;
                                                orderDetail.FitsHOPPMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 70)
                                            {
                                                orderDetail.FitsTOPSentRead = true;
                                                orderDetail.FitsTOPSentWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //
                                            if (CoulmeID == 71)
                                            {
                                                orderDetail.FitsSTCETARead = true;
                                                orderDetail.FitsSTCETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 72)
                                            {
                                                orderDetail.FitsPatternETARead = true;
                                                orderDetail.FitsPatternETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 73)
                                            {
                                                orderDetail.FitsCuttingETARead = true;
                                                orderDetail.FitsCuttingETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 74)
                                            {
                                                orderDetail.FitsProdFileETARead = true;
                                                orderDetail.FitsProdFileETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 75)
                                            {
                                                orderDetail.FitsHOPPMETARead = true;
                                                orderDetail.FitsHOPPMETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 76)
                                            {
                                                orderDetail.FitsTOPSentETARead = true;
                                                orderDetail.FitsTOPSentETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 91)
                                            {
                                                orderDetail.FitsStcTargetDateRead = true;
                                                orderDetail.FitsStcTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 92)
                                            {
                                                orderDetail.FitsStcActualDateRead = true;
                                                orderDetail.FitsStcActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 93)
                                            {
                                                orderDetail.FitsPatternTargetDateRead = true;
                                                orderDetail.FitsPatternTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 94)
                                            {
                                                orderDetail.FitsPatternActualDateRead = true;
                                                orderDetail.FitsPatternActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 95)
                                            {
                                                orderDetail.FitsCuttingTargetDateRead = true;
                                                orderDetail.FitsCuttingTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 96)
                                            {
                                                orderDetail.FitsCuttingActualDateRead = true;
                                                orderDetail.FitsCuttingActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 97)
                                            {
                                                orderDetail.FitsProdTargetDateRead = true;
                                                orderDetail.FitsProdTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 98)
                                            {
                                                orderDetail.FitsProdActualDateRead = true;
                                                orderDetail.FitsProdActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 99)
                                            {
                                                orderDetail.FitsHOPPMTargetDateRead = true;
                                                orderDetail.FitsHOPPMTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 100)
                                            {
                                                orderDetail.FitsHOPPMActualDateRead = true;
                                                orderDetail.FitsHOPPMActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 101)
                                            {
                                                orderDetail.FitsTopSentTargetDateRead = true;
                                                orderDetail.FitsTopSentMTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 102)
                                            {
                                                orderDetail.FitsTopSentMActualDateRead = true;
                                                orderDetail.FitsTopSentMActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 103)
                                            {
                                                orderDetail.FitsLKMRead = true;
                                                orderDetail.FitsLKMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 104)
                                            {
                                                orderDetail.FitsOBRead = true;
                                                orderDetail.FitsOBWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 117)
                                            {
                                                orderDetail.FitsETADateRead = true;
                                                orderDetail.FitsETADateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 118)
                                            {
                                                orderDetail.FitsCostingSAMRead = true;
                                                orderDetail.FitsCostingSAMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Abhishek on 28/3/2016
                                            if (CoulmeID == 129)
                                            {

                                                orderDetail.CDCharWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 130) //TODO: need to change for testReport 
                                            {

                                                orderDetail.TestReportWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 131)
                                            {
                                                orderDetail.PeekFileUploadRead = true;
                                                orderDetail.PeekFileUploadWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            break;

                                        case "Production Section":
                                            iKandi.Common.Permission.ProductionSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 44)
                                            {
                                                orderDetail.PUnitRead = true;
                                                orderDetail.PUnitWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 45)
                                            {
                                                orderDetail.PTotalRead = true;
                                                orderDetail.PTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 46)
                                            {
                                                orderDetail.POverallRead = true;
                                                orderDetail.POverallWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 47)
                                            {
                                                orderDetail.PBalanceRead = true;
                                                orderDetail.PBalanceWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 48)
                                            {
                                                orderDetail.PProductionRemarkRead = true;
                                                orderDetail.PProductionsRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            // Add By Ravi kumar on 23/2/2015 for Shipped permission
                                            if (CoulmeID == 60)
                                            {
                                                orderDetail.IsShipedRead = true;
                                                orderDetail.IsShipedWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            #region Gajendra Production Permission 01-03-2016
                                            if (CoulmeID == 77)
                                            {
                                                MOOrderDetails.PCutTodayRead = true;
                                                MOOrderDetails.PCutTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 78)
                                            {
                                                MOOrderDetails.PCutReadyTodayRead = true;
                                                MOOrderDetails.PCutReadyTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 79)
                                            {
                                                MOOrderDetails.PStitchTodayRead = true;
                                                MOOrderDetails.PStitchTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 80)
                                            {
                                                MOOrderDetails.PFinishTodayRead = true;
                                                MOOrderDetails.PFinishTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 81)
                                            {
                                                MOOrderDetails.PVATodayRead = true;
                                                MOOrderDetails.PVATodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 82)
                                            {
                                                MOOrderDetails.PCutTotalRead = true;
                                                MOOrderDetails.PCutTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 83)
                                            {
                                                MOOrderDetails.PCutReadyTotalRead = true;
                                                MOOrderDetails.PCutReadyTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 84)
                                            {
                                                MOOrderDetails.PStitchTotalRead = true;
                                                MOOrderDetails.PStitchTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 85)
                                            {
                                                MOOrderDetails.PFinishTotalRead = true;
                                                MOOrderDetails.PFinishTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 86)
                                            {
                                                MOOrderDetails.PVATotalRead = true;
                                                MOOrderDetails.PVATotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 87)
                                            {
                                                orderDetail.PlblCMTActRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCMTActWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 88)
                                            {
                                                orderDetail.PlblCMTTgtRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCMTTgtWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 89)
                                            {
                                                orderDetail.PlblCostedRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCostedWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 90)
                                            {
                                                orderDetail.PlblProfitLossRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblProfitLossWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 126)
                                            {
                                                orderDetail.PlblActualEffRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblActualEffWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 127)
                                            {
                                                orderDetail.PlblTargetEffRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblTargetEffWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 128)
                                            {
                                                orderDetail.PlblBERead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblBEWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            #endregion
                                            if (CoulmeID == 13)
                                            {
                                                orderDetail.bExFactoryRead = true;
                                                orderDetail.bExFactorywrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 16)
                                            {
                                                orderDetail.bModeRead = true;
                                                orderDetail.bModewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 32)
                                            {
                                                orderDetail.FitsPlannedDateRead = true;
                                                orderDetail.FitsPlannedDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 15)
                                            {
                                                orderDetail.bDCDateRead = true;
                                                orderDetail.bDCDatewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 17)
                                            {
                                                orderDetail.bMDARead = true;
                                                orderDetail.bMDAwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 11)
                                            {
                                                orderDetail.bQuantityRead = true;
                                                orderDetail.bQuantitywrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Added By Ashish on 7/4/2015
                                            if (CoulmeID == 12)
                                            {
                                                orderDetail.bStatusRead = true;
                                                orderDetail.bStatuswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 123)
                                            {
                                                orderDetail.bLineAllocationRead = true;
                                                orderDetail.bLineAllocationwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 125)
                                            {
                                                orderDetail.ReadReallocationLink = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.ReadWriteReallocationLink = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]); ;

                                            }
                                            if (CoulmeID == 131)
                                            {
                                                orderDetail.ProductionPlanRead = true;
                                                orderDetail.ProductionPlanWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 132)
                                            {
                                                orderDetail.PackingListRead = true;
                                                orderDetail.PackingListWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            // ------------------Shipiing Module Permission in MO BY Surendra------------------------
                                            if (CoulmeID == 133)
                                            {
                                                orderDetail.PackingListImageRead = true;
                                                orderDetail.PackingListImageWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 134)
                                            {
                                                orderDetail.ShipmentNoRead = true;
                                                orderDetail.ShipmentNoWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 132)
                                            {
                                                orderDetail.OutHouseAllocationRead = true;
                                                orderDetail.OutHouseAllocationWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 136)
                                            {
                                                orderDetail.bPlanedForDate = true;
                                                // orderDetail.bPlanedForDate_Permission = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 137)
                                            {
                                                orderDetail.bPlanedInputDate = true;
                                                orderDetail.bPlanedInputDate_Permission = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 138)
                                            {
                                                orderDetail.bPlanedDropDown = true;
                                                orderDetail.bPlanedDropDown_Permission = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 139)
                                            {
                                                orderDetail.bSharingMode_Change = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 140)
                                            {
                                                orderDetail.IsContractHoldWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //added by shubhendu for bipl Price change 3/03/2022

                                            //-----------------------------------End----------------------------------------------------------------------------------------
                                            break;

                                    }
                                    //END
                                }

                                //Added By Ashish
                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    DataRow[] drAccess = dtAccessory.Select("Orderdetailid =" + orderDetail.OrderDetailID);
                                    //DataRow[] drTotalQuantity = dsorderDetail.Tables[4].Select("OrderID =" + orderDetail.OrderID);

                                    if (drAccess.Length > 0)
                                    {
                                        orderDetail.Accessories = GetAccessoriesDetailsTable(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                    }
                                }
                                //else
                                //{                                   
                                //    DataRow[] drAccPercent = dtAccessoryOld.Select(strNewPercent);

                                //    DataRow[] drAccess = dtAccessory.Select("OrderID =" + orderDetail.OrderID);
                                //    DataRow[] drTotalQuantity = dsorderDetail.Tables[5].Select("OrderID =" + orderDetail.OrderID);                                   
                                //    if (drAccess.Length > 0)
                                //    {
                                //        if (drAccPercent.Length > 0)
                                //        {
                                //            orderDetail.Accessories = GetAccessoriesDetailsTableOld(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, drAccPercent.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                //        }
                                //        else
                                //        {
                                //            orderDetail.Accessories = GetAccessoriesDetailsTableForNoPercent(drAccess.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                //        }

                                //    }
                                //}
                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    TotalCount = 0; //Gajendra Paging
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }
        public List<MOOrderDetails> GetOrdersBasicInfoForPrint(string searchText, string FabricName, string years, DateTime FromDate, DateTime ToDate, int ClientID, int DateType, int UserId, int StatusMode, int StatusModeSequence, int OrderBy1, int OrderBy2, int OrderBy3, int OrderBy4, string OrderDetailIds, int BuyingHouseId, int unintID, int desigId, int DeptId, int SalesView, string SessionId, int ClientDeptId, string DelayOrderDetailIds, int OrderType, int IsUnShipped) //Gajendra Paging
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                int result;
                try
                {
                    string cmdText = "sp_orders_get_orders_basic_info_forprint";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    DataSet dsorderDetail = new DataSet();
                    SqlParameter param;

                    param = new SqlParameter("@searchText", SqlDbType.VarChar);
                    param.Value = searchText;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Years", SqlDbType.VarChar);
                    param.Value = years;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@FromDate", SqlDbType.DateTime);
                    if ((FromDate == DateTime.MinValue) || (FromDate == Convert.ToDateTime("1753-01-01")) || (FromDate == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = FromDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ToDate", SqlDbType.DateTime);
                    if ((ToDate == DateTime.MinValue) || (ToDate == Convert.ToDateTime("1753-01-01")) || (ToDate == Convert.ToDateTime("1900-01-01")))
                    {
                        param.Value = DBNull.Value;
                    }
                    else
                    {
                        param.Value = ToDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    // Edit by surendra on 20 may 2013
                    param = new SqlParameter("@UnitId", SqlDbType.Int);
                    param.Value = unintID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DateType", SqlDbType.Int);
                    param.Value = DateType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusMode", SqlDbType.Int);
                    param.Value = StatusMode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeSequence", SqlDbType.Int);
                    param.Value = StatusModeSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy1", SqlDbType.Int);
                    param.Value = OrderBy1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy2", SqlDbType.Int);
                    param.Value = OrderBy2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderBy3", SqlDbType.Int);
                    param.Value = OrderBy3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy4", SqlDbType.Int);
                    param.Value = OrderBy4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderDetailIds", SqlDbType.VarChar);
                    param.Value = OrderDetailIds;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@BuyingHouseId", SqlDbType.Int);
                    param.Value = BuyingHouseId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesigId", SqlDbType.Int);
                    param.Value = desigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SalesView", SqlDbType.Int);
                    param.Value = SalesView;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SessionId", SqlDbType.NVarChar);
                    param.Value = SessionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDeptid", SqlDbType.Int);
                    param.Value = ClientDeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DelayOrderDetailIds", SqlDbType.VarChar);
                    param.Value = DelayOrderDetailIds;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //abhishek on 3/11/2016
                    param = new SqlParameter("@OrderTypes", SqlDbType.Int);
                    param.Value = OrderType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsUnshipped", SqlDbType.Int);
                    param.Value = IsUnShipped;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);
                    //TotalCount = Convert.ToInt32(outParam.Value);


                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        DataTable dt2 = dsorderDetail.Tables[2];
                        DataTable dt4 = dsorderDetail.Tables[4];
                        DataTable dt9 = dsorderDetail.Tables[5];
                        DataTable dt10 = dsorderDetail.Tables[6];
                        DataTable dt11 = dsorderDetail.Tables[7];
                        DataTable dtFactory = dsorderDetail.Tables[10];//Gajendra 01-03-2016                     

                        MOOrderDetails.FactoryID = dtFactory.Rows.OfType<DataRow>().Select(dr => dr.Field<Int64>("UnitID")).ToList(); //Gajendra 01-03-2016

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                MOOrderDetails orderDetail = new MOOrderDetails();
                                orderDetail.OrderDetailID = Convert.ToInt32(dr["Id"]);
                                orderDetail.LineItemNumber = (dr["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LineItemNumber"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.IsFinalCheck = (dr["FinalCheck"] == DBNull.Value) ? false : Convert.ToBoolean(dr["FinalCheck"]);
                                orderDetail.IsIkandiClient = (dr["IsIkandiClient"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsIkandiClient"]);

                                orderDetail.Description = (dr["OrderDescription"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["OrderDescription"]);
                                orderDetail.Quantity = Convert.ToInt32(dr["Quantity"]);
                                orderDetail.Fabric1Quantity = dr["Fabric1Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric1Quantity"]);
                                orderDetail.Fabric2Quantity = dr["Fabric2Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric2Quantity"]);
                                orderDetail.Fabric3Quantity = dr["Fabric3Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric3Quantity"]);
                                orderDetail.Fabric4Quantity = dr["Fabric4Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric4Quantity"]);
                                orderDetail.ContractStatus = dr["ContractStatus"] == DBNull.Value ? false : Convert.ToBoolean(dr["ContractStatus"]);

                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);

                                orderDetail.MDANumber = (dr["MDA"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["MDA"]);
                                orderDetail.ModeName = (dr["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Code"]);
                                //----------------------------------------------
                                orderDetail.iKandiPrice = Convert.ToDouble(dr["iKandiPrice"]);
                                orderDetail.ActualProfitMargin = (Convert.ToString(dr["ActualProfitMargin"]) == "0") ? string.Empty : Convert.ToString(dr["ActualProfitMargin"]);

                                orderDetail.AgreedPrice = Convert.ToDouble(dr["AgreedPrice"]);
                                orderDetail.ConversionRate = Convert.ToDouble(dr["ConversionRate"]);
                                double biplprice = Convert.ToDouble(dr["BIPLPrice"]);
                                double BIPL_RevenueBIPLPrice = Convert.ToDouble(dr["BIPL_RevenueBIPLPrice"]);
                                double BoutiqueP = 0.0;

                                if (BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity >= 1000000)
                                {
                                    BoutiqueP = ((BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity) / 100000);
                                    orderDetail.BoutiqueBusiness = Math.Round((BoutiqueP), 0, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    BoutiqueP = ((BIPL_RevenueBIPLPrice * orderDetail.ConversionRate * orderDetail.Quantity) / 100000);
                                    orderDetail.BoutiqueBusiness = Math.Round((BoutiqueP), 1, MidpointRounding.AwayFromZero);
                                }

                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;

                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.PCDDate = (dr["PCDDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PCDDate"]) : DateTime.MinValue;


                                orderDetail.STCtargetsDate = (dr["STCtargetsDate"] != DBNull.Value) ? Convert.ToDateTime(dr["STCtargetsDate"]) : DateTime.MinValue;

                                // -----------------------------------fits module
                                orderDetail.HandOverTargetDate = (dr["HandOverTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverTargetDate"]) : DateTime.MinValue;
                                orderDetail.HandOverActualDate = (dr["HandOverActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverActualDate"]) : DateTime.MinValue;
                                orderDetail.HandOverETADate = (dr["HandOverETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["HandOverETADate"]) : DateTime.MinValue;

                                orderDetail.PatternReadyActualDate = (dr["PatternReadyActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyActualDate"]) : DateTime.MinValue;
                                orderDetail.PatternReadyTargetDate = (dr["PatternReadyTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyTargetDate"]) : DateTime.MinValue;
                                orderDetail.PatternReadyETADate = (dr["PatternReadyETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternReadyETADate"]) : DateTime.MinValue;

                                orderDetail.SampleSentTargetDate = (dr["SampleSentTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentTargetDate"]) : DateTime.MinValue;
                                orderDetail.SampleSentActualDate = (dr["SampleSentActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentActualDate"]) : DateTime.MinValue;
                                orderDetail.SampleSentETADate = (dr["SampleSentETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["SampleSentETADate"]) : DateTime.MinValue;

                                orderDetail.FitsCommentesTargetDate = (dr["FitsCommentesTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesTargetDate"]) : DateTime.MinValue;
                                orderDetail.FitsCommentesActualDate = (dr["FitsCommentesActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesActualDate"]) : DateTime.MinValue;
                                orderDetail.FitsCommentesETADate = (dr["FitsCommentesETADate"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsCommentesETADate"]) : DateTime.MinValue;

                                orderDetail.CADMaster = (dr["CADMaster"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CADMaster"]);

                                //---------------------------------end------------------------
                                orderDetail.BulkAccsesoryTarget = (dr["BulkAccsesoryTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["BulkAccsesoryTarget"]) : DateTime.MinValue;

                                orderDetail.PatternSampleTarget = (dr["PatternSampleTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleTarget"]) : DateTime.MinValue;
                                orderDetail.CuttingTarget = (dr["CuttingTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingTarget"]) : DateTime.MinValue;
                                orderDetail.ProductionFileTarget = (dr["ProductionFileTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileTarget"]) : DateTime.MinValue;
                                orderDetail.HOPPMTargetETA = (dr["HOPPMTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMTargetETA"]) : DateTime.MinValue;
                                orderDetail.TOPTargetETA = (dr["TOPTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TOPTargetETA"]) : DateTime.MinValue;
                                orderDetail.TestReportTargetETA = (dr["TestReportTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportTargetETA"]) : DateTime.MinValue;
                                orderDetail.EXFactoryTargetETA = (dr["EXFactoryTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["EXFactoryTargetETA"]) : DateTime.MinValue;
                                orderDetail.PCDTargetETA = (dr["PCDTargetETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PCDTargetETA"]) : DateTime.MinValue;
                                orderDetail.CdchartTargetDateETA = (dr["CdchartTargetDate"] != DBNull.Value) ? Convert.ToDateTime(dr["CdchartTargetDate"]) : DateTime.MinValue;
                                orderDetail.CdchartActualDateETA = (dr["CDChartActual"] != DBNull.Value) ? Convert.ToDateTime(dr["CDChartActual"]) : DateTime.MinValue;
                                orderDetail.CdchartDateETA = (dr["CDChartETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CDChartETA"]) : DateTime.MinValue;

                                orderDetail.IsRepeat = Convert.ToBoolean(dr["IsRepeat"]);
                                orderDetail.IsRepeatWithChanges = (dr["IsRepeatWithChanges"] == DBNull.Value) ? false : Convert.ToBoolean(dr["IsRepeatWithChanges"]);

                                orderDetail.DelayTask = (dr["DelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DelayTask"]);
                                orderDetail.FabricDelayTask = (dr["FabricDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FabricDelayTask"]);
                                orderDetail.AccessoriesDelayTask = (dr["AccessoriesDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoriesDelayTask"]);
                                orderDetail.TechnicalDelayTask = (dr["TechnicalDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["TechnicalDelayTask"]);
                                orderDetail.ProductionDelayTask = (dr["ProductionDelayTask"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ProductionDelayTask"]);

                                orderDetail.fab1CheckInHouse = (dr["FabricInh1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh1"]);
                                orderDetail.fab2CheckInHouse = (dr["FabricInh2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh2"]);
                                orderDetail.fab3CheckInHouse = (dr["FabricInh3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh3"]);
                                orderDetail.fab4CheckInHouse = (dr["FabricInh4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInh4"]);
                                orderDetail.QualityControl_Prev_Status = (dr["QualityControl_Prev_Status"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["QualityControl_Prev_Status"]);


                                double Fab1InChecked_ = 0;
                                double Fab2InChecked_ = 0;
                                double Fab3InChecked_ = 0;
                                double Fab4InChecked_ = 0;

                                if (dr["FabricInh1"] != DBNull.Value)
                                {
                                    Fab1InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh1"]).Replace(",", ""));

                                }
                                double Fabric1InHouseChecked_kd = (Fab1InChecked_ / 1000);
                                orderDetail.Fab1InHouseChecked_k = Math.Round((Fabric1InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                if (dr["FabricInh2"] != DBNull.Value)
                                {
                                    Fab2InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh2"]).Replace(",", ""));

                                }
                                double Fabric2InHouseChecked_kd = (Fab2InChecked_ / 1000);
                                orderDetail.Fab2InHouseChecked_k = Math.Round((Fabric2InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";


                                if (dr["FabricInh3"] != DBNull.Value)
                                {
                                    Fab3InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh3"]).Replace(",", ""));

                                }
                                double Fabric3InHouseChecked_kd = (Fab3InChecked_ / 1000);
                                orderDetail.Fab3InHouseChecked_k = Math.Round((Fabric3InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";


                                if (dr["FabricInh4"] != DBNull.Value)
                                {
                                    Fab4InChecked_ = Convert.ToDouble(Convert.ToString(dr["FabricInh4"]).Replace(",", ""));

                                }
                                double Fabric4InHouseChecked_kd = (Fab4InChecked_ / 1000);
                                orderDetail.Fab4InHouseChecked_k = Math.Round((Fabric4InHouseChecked_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                orderDetail.PhotoShoot = (dr["PhotoShoot"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PhotoShoot"]);
                                orderDetail.IsPhotoShoot = (dr["IsPhotoShoot"] != DBNull.Value) ? Convert.ToDateTime(dr["IsPhotoShoot"]) : DateTime.MinValue;
                                //End by abhishek on 19/1/2015
                                orderDetail.STCDateAppTar = orderDetail.PCDDate.AddDays(-7);

                                orderDetail.HOPPMETA = (dr["HOPPMETA"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMETA"]) : DateTime.MinValue;
                                bool bCheckMO = false;
                                if (dr["HOPPMCheckComplete"] == DBNull.Value)
                                    bCheckMO = false;
                                else
                                    bCheckMO = Convert.ToBoolean(dr["HOPPMCheckComplete"]);

                                orderDetail.HOPPMActionactualDate = (dr["HOPPMActualDate"] != DBNull.Value) ? Convert.ToDateTime(dr["HOPPMActualDate"]) : DateTime.MinValue;


                                orderDetail.fabric1ETA = (dr["fabric1ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric1ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric1ENDETA = (dr["Fabric1ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric1ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff1ETA = (dr["StrikeOff1ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff1ETA"]) : DateTime.MinValue;

                                orderDetail.IntialAprd1 = (dr["IntialAprdFabric1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric1"]);

                                orderDetail.fabric2ETA = (dr["fabric2ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric2ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric2ENDETA = (dr["Fabric2ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric2ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff2ETA = (dr["StrikeOff2ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff2ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd2 = (dr["IntialAprdFabric2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric2"]);
                                orderDetail.fabric3ETA = (dr["fabric3ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric3ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric3ENDETA = (dr["Fabric3ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric3ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff3ETA = (dr["StrikeOff3ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff3ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd3 = (dr["IntialAprdFabric3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric3"]);
                                orderDetail.fabric4ETA = (dr["fabric4ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["fabric4ETA"]) : DateTime.MinValue;
                                orderDetail.Fabric4ENDETA = (dr["Fabric4ENDETA"] != DBNull.Value) ? Convert.ToDateTime(dr["Fabric4ENDETA"]) : DateTime.MinValue;
                                orderDetail.StrikeOff4ETA = (dr["StrikeOff4ETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StrikeOff4ETA"]) : DateTime.MinValue;
                                orderDetail.IntialAprd4 = (dr["IntialAprdFabric4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IntialAprdFabric4"]);

                                orderDetail.FabricTrackingTarget1 = (dr["FabricTrackingTarget1"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget1"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget2 = (dr["FabricTrackingTarget2"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget2"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget3 = (dr["FabricTrackingTarget3"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget3"]) : DateTime.MinValue;
                                orderDetail.FabricTrackingTarget4 = (dr["FabricTrackingTarget4"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricTrackingTarget4"]) : DateTime.MinValue;

                                orderDetail.CutAvgFile1 = (dr["CutAvgFile1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile1"]);
                                orderDetail.CutAvgFile2 = (dr["CutAvgFile2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile2"]);
                                orderDetail.CutAvgFile3 = (dr["CutAvgFile3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile3"]);
                                orderDetail.CutAvgFile4 = (dr["CutAvgFile4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CutAvgFile4"]);


                                // end
                                #region Abhishek filed here
                                // Added by abhishek on 25/12/2015
                                orderDetail.TestReports = dr["TestReports"].ToString();
                                orderDetail.TestReportsDateActual = (dr["TestReportsActual"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportsActual"]) : DateTime.MinValue;
                                orderDetail.TestReportsDateETA = (dr["TestReportsETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TestReportsETA"]) : DateTime.MinValue;
                                orderDetail.IsTestReportDone = Convert.ToInt32(dr["TestReportsCheckBox"]);
                                orderDetail.IsVaCompleted = dr["IsVAComplete"].ToString();
                                orderDetail.IsReScan = dr["IsRescan"].ToString();
                                orderDetail.DressPrice = (dr["DressPrice"] == DBNull.Value) ? -1 : Convert.ToDouble(dr["DressPrice"]);

                                orderDetail.IsCheck = (dr["IsICCheck"] == DBNull.Value) ? false : Convert.ToBoolean((dr["IsICCheck"]).ToString());
                                orderDetail.IsICCheckOnDate = (dr["IsICCheckOnDate"] == DBNull.Value) ? "" : (dr["IsICCheckOnDate"]).ToString();
                                #endregion

                                // end
                                //added by abhishek on 31/3/2016
                                orderDetail.IsTestReportvisible = (dr["IsVisibleTestReport"] == DBNull.Value) ? "none" : (dr["IsVisibleTestReport"]).ToString();
                                orderDetail.IsCdchartVisible = (dr["IsVisibleCDchart"] == DBNull.Value) ? "none" : (dr["IsVisibleCDchart"]).ToString();
                                //end 
                                // Added by Ravi kumar on 28/12/2015
                                orderDetail.LinePlannigStartDate = (dr["LinePlannigStartDate"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LinePlannigStartDate"]);

                                var samcomval = (dr["samval"].ToString()).Split(',');
                                if (samcomval.Length > 1)
                                {
                                    orderDetail.Samcap = samcomval[0];

                                    orderDetail.Samval = samcomval[1].ToString();
                                }
                                orderDetail.OBval = (dr["OB"].ToString());
                                //orderDetail.OBfile = (dr["OBfile"].ToString());
                                orderDetail.Avalmin = (dr["Avalmin"].ToString());
                                orderDetail.OrderedSam = (dr["OrderedSam"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderedSam"]);
                                orderDetail.STCSam = (dr["STCSam"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["STCSam"]);
                                orderDetail.STCETA = (dr["STCETA"] != DBNull.Value) ? Convert.ToDateTime(dr["STCETA"]) : DateTime.MinValue;
                                //Added By Ashish on 4/3/2015
                                orderDetail.FitsETA = (dr["FitsETA"] != DBNull.Value) ? Convert.ToDateTime(dr["FitsETA"]) : DateTime.MinValue;

                                orderDetail.TOPETA = (dr["TOPETA"] != DBNull.Value) ? Convert.ToDateTime(dr["TOPETA"]) : DateTime.MinValue;

                                orderDetail.PatternSampleDateETA = (dr["PatternSampleDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleDateETA"]) : DateTime.MinValue;

                                orderDetail.CuttingReceivedDateETA = (dr["CuttingReceivedDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingReceivedDateETA"]) : DateTime.MinValue;

                                orderDetail.ProductionFileDateETA = (dr["ProductionFileDateETA"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileDateETA"]) : DateTime.MinValue;
                                orderDetail.PatternSampleDate = (dr["PatternSampleDate"] != DBNull.Value) ? Convert.ToDateTime(dr["PatternSampleDate"]) : DateTime.MinValue;
                                orderDetail.CuttingReceivedDate = (dr["CuttingReceivedDate"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingReceivedDate"]) : DateTime.MinValue;

                                orderDetail.ProductionFileDate = (dr["ProductionFileDate"] != DBNull.Value) ? Convert.ToDateTime(dr["ProductionFileDate"]) : DateTime.MinValue;

                                if (orderDetail.ModeName.ToUpper().IndexOf("D") > -1)
                                {
                                    orderDetail.Margin = (dr["FOBMargin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FOBMargin"]);
                                }
                                else
                                {
                                    orderDetail.Margin = (dr["Margin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Margin"]);
                                }
                                orderDetail.Margin = (dr["Margin"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Margin"]);
                                int ClintDiscount = (dr["Discount"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Discount"]);
                                orderDetail.discount = Convert.ToDouble(orderDetail.iKandiPrice);
                                double IkandiBusiness = Convert.ToDouble(orderDetail.Quantity) * Convert.ToDouble(orderDetail.discount.ToString("N"));
                                double ikandiBussi = (IkandiBusiness / 1000);
                                orderDetail.Business = Math.Round((ikandiBussi), 2, MidpointRounding.AwayFromZero);
                                orderDetail.Convertto = (dr["ConvertTo"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ConvertTo"]);
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);

                                string SanjeevRemarks = dr["SanjeevRemarks"].ToString();
                                orderDetail.SanjeevRemarks = SanjeevRemarks;
                                orderDetail.STCUnallocated = (dr["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(dr["STCUnallocated"]) : DateTime.MinValue;
                                orderDetail.ProductionUnitId = (dr["UnitID"] != DBNull.Value) ? Convert.ToInt32(dr["UnitID"]) : 0;
                                if ((desigId == 9) || (desigId == 35) || (desigId == 38) || (desigId == 36))
                                {
                                    if (orderDetail.ProductionUnitId == 0)
                                    {
                                        continue;
                                    }
                                }
                                orderDetail.BulkTarget = (dr["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["BulkTarget"]) : DateTime.MinValue;

                                orderDetail.ParentOrder = new Order();
                                orderDetail.ParentOrder.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.ParentOrder.OrderDate = Convert.ToDateTime(dr["OrderDate"]);
                                orderDetail.ParentOrder.BiplPrice = (dr["BIPLPrice"] == DBNull.Value) ? -1 : Convert.ToDouble(dr["BIPLPrice"]);
                                orderDetail.ParentOrder.Comments = (dr["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Comments"]);
                                orderDetail.IsFact = (dr["IsFact"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["IsFact"]);
                                orderDetail.ParentOrder.Style = new Style();
                                orderDetail.ParentOrder.Style.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.ParentOrder.Style.StyleID = Convert.ToInt32(dr["StyleID"]);
                                //adapter.Fill(dsorderDetail);
                                orderDetail.ParentOrder.Style.SampleImageURL1 = (dr["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL1"]);
                                orderDetail.ParentOrder.Style.SampleImageURL2 = (dr["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL2"]);
                                orderDetail.ParentOrder.Style.SampleImageURL3 = (dr["SampleImageURL3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL3"]);
                                orderDetail.ParentOrder.Style.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);
                                orderDetail.ParentOrder.Style.sCodeVersion = (dr["sCodeVersion"] == DBNull.Value) ? "-1" : Convert.ToString(dr["sCodeVersion"]);
                                orderDetail.ParentOrder.Style.client = new Client();
                                orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(dr["ClientID"]);
                                orderDetail.ParentOrder.Style.client.IsMDARequired = (dr["IsMDARequired"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsMDARequired"]);

                                orderDetail.ParentOrder.Style.cdept = new ClientDepartment();
                                orderDetail.ParentOrder.Style.cdept.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Style.cdept.DeptID = (dr["ClientDepartmentID"] != DBNull.Value) ? Convert.ToInt32(dr["ClientDepartmentID"]) : 0;

                                orderDetail.Unit = new ProductionUnit();
                                orderDetail.Unit.ProductionUnitId = (dr["ProductionUnitId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitID"]);
                                orderDetail.Unit.FactoryName = (dr["FactoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryName"]);
                                orderDetail.Unit.FactoryCode = (dr["FactoryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryCode"]);

                                orderDetail.ParentOrder.Costing = new Costing();
                                orderDetail.ParentOrder.Costing.CostingID = (dr["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CostingId"]);
                                orderDetail.ParentOrder.Costing.ConvertTo = (dr["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["ConvertTo"]);

                                orderDetail.ParentOrder.WorkflowInstanceDetail = new WorkflowInstanceDetail();
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusMode = (dr["StatusMode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StatusMode"]);
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeID = (dr["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StatusModeID"]);// Add this
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeSequence = (dr["Permission_Sequence"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Permission_Sequence"]);// Add this


                                orderDetail.ParentOrder.InlinePPMOrderContract = new InlinePPMOrderContract(); // to get top send target and top send actual
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget = (dr["TopSentTarget"] == DBNull.Value) ? orderDetail.StitchingETA : Convert.ToDateTime(dr["TopSentTarget"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual = (dr["TopSentActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopSentActual"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval = (dr["TopActualApproval"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopActualApproval"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus = (dr["TopStatus"] == DBNull.Value) ? TopStatusType.UNKNOWN : (TopStatusType)Convert.ToInt32(dr["TopStatus"]);

                                orderDetail.ParentOrder.Fits = new Fits();
                                orderDetail.ParentOrder.Fits.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);
                                orderDetail.ParentOrder.Fits.IsStcApproved = (dr["StcApproved"] == DBNull.Value) ? false : Convert.ToBoolean(dr["StcApproved"]);

                                orderDetail.ParentOrder.Fits.SealDate = (dr["SealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SealDate"]);

                                orderDetail.ParentOrder.Fits.SpecsUploadTargetDate = (dr["SpecsUploadTargetDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadTargetDate"]);
                                orderDetail.ParentOrder.Fits.SpecsUploadDate = (dr["SpecsUploadDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadDate"]);
                                orderDetail.ParentOrder.Fits.StyleCodeVersion = (dr["StyleCodeVersion"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleCodeVersion"]);
                                orderDetail.ParentOrder.FitsTrack = new FitsTrack();
                                orderDetail.ParentOrder.FitsTrack.CommentsSentFor = (dr["CommentsSentFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CommentsSentFor"]);
                                orderDetail.ParentOrder.FitsTrack.PlanningFor = (dr["PlanningFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["PlanningFor"]);
                                orderDetail.ParentOrder.FitsTrack.fitRequestedOn = (dr["fitRequestedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["fitRequestedOn"]);
                                orderDetail.ParentOrder.FitsTrack.AckDate = (dr["AckDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["AckDate"]);
                                orderDetail.ParentOrder.FitsTrack.NextPlannedDate = (dr["NextPlannedDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["NextPlannedDate"]);

                                orderDetail.ParentOrder.FitsTrack.PlannedDispatchDate = (dr["plannedDispatchDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["plannedDispatchDate"]);
                                orderDetail.ParentOrder.Fits.Department = new ClientDepartment();
                                orderDetail.ParentOrder.Fits.Department.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Fits.Department.DeptID = (dr["ClientDepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ClientDepartmentID"]);

                                orderDetail.ParentOrder.Fits.Fitstatus_ManageOrder = (dr["Fitstatus_ManageOrder"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fitstatus_ManageOrder"]);
                                orderDetail.FitStatus = Constants.GetFitsStatusManageOrder(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.Fitstatus_ManageOrder);

                                //orderDetail.FitStatus = Constants.GetFitsStatus(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.IsStcApproved, orderDetail.ParentOrder.Fits.SealDate,
                                //    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus,
                                //    orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                                orderDetail.FitStatusBgColor = Constants.GetFitsStatusColor(orderDetail.ExFactory, orderDetail.STCUnallocated, orderDetail.ParentOrder.OrderDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual,
                                                    orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.SealDate, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.NextPlannedDate, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.Fits.IsStcApproved,
                                                    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);
                                if (orderDetail.FitStatusBgColor == "#00FF70")
                                {
                                    orderDetail.FitStatusBgColor = "#4f8f00";
                                }
                                if (orderDetail.FitStatusBgColor == "#FFFFFF")
                                {
                                    orderDetail.FitStatusBgColor = "#000000";
                                }

                                orderDetail.Fabric1Details = (dr["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1DetailsRef"]);
                                orderDetail.Fabric2Details = (dr["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2DetailsRef"]);
                                orderDetail.Fabric3Details = (dr["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3DetailsRef"]);
                                orderDetail.Fabric4Details = (dr["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4DetailsRef"]);

                                orderDetail.Fabric1Print = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.Fabric2Print = (dr["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2Details"]);
                                orderDetail.Fabric3Print = (dr["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3Details"]);
                                orderDetail.Fabric4Print = (dr["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4Details"]);
                                //

                                var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                    result = 0;
                                }

                                var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                    result = 0;
                                }

                                var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                    result = 0;
                                }

                                var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                    result = 0;
                                }
                                orderDetail.Fabric1 = ReturnFabric((dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]));
                                orderDetail.Fabric2 = ReturnFabric((dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]));
                                orderDetail.Fabric3 = ReturnFabric((dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]));
                                orderDetail.Fabric4 = ReturnFabric((dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]));

                                orderDetail.Fabric1CCGSM = ReturnFabric((dr["Fabric1CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1CCGSM"]));
                                orderDetail.Fabric2CCGSM = ReturnFabric((dr["Fabric2CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2CCGSM"]));
                                orderDetail.Fabric3CCGSM = ReturnFabric((dr["Fabric3CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3CCGSM"]));
                                orderDetail.Fabric4CCGSM = ReturnFabric((dr["Fabric4CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4CCGSM"]));

                                orderDetail.ParentOrder.FabricInhouseHistory = new FabricInhouseHistory();

                                //orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = (dr["PercentInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse1"]);
                                //orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = (dr["PercentInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse2"]);
                                //orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = (dr["PercentInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse3"]);
                                //orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = (dr["PercentInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse4"]);

                                string QuantityAvl_1 = (dr["QuantityAvl1"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl1"]);

                                string QuantityAvl_2 = (dr["QuantityAvl2"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl2"]);
                                string QuantityAvl_3 = (dr["QuantityAvl3"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl3"]);
                                string QuantityAvl_4 = (dr["QuantityAvl4"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl4"]);

                                orderDetail.Fabric1STCAverage = (dr["Fabric1STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric1STCAverage"]);
                                orderDetail.CutAverageDate1 = (dr["CutAverageDate1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate1"]);
                                orderDetail.Fabric2STCAverage = (dr["Fabric2STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric2STCAverage"]);
                                orderDetail.CutAverageDate2 = (dr["CutAverageDate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate2"]);
                                orderDetail.Fabric3STCAverage = (dr["Fabric3STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric3STCAverage"]);
                                orderDetail.CutAverageDate3 = (dr["CutAverageDate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate3"]);
                                orderDetail.Fabric4STCAverage = (dr["Fabric4STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric4STCAverage"]);
                                orderDetail.CutAverageDate4 = (dr["CutAverageDate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate4"]);


                                if ((orderDetail.Fabric1STCAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_1.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric1Required_ToolTip)) * 100)); //Convert.ToDecimal(orderDetail.Fabric1STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric1OrderAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_1.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric1Required_ToolTip)) * 100)); //Convert.ToDecimal(orderDetail.Fabric1OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = 0;

                                if ((orderDetail.Fabric2STCAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_2.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric2STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric2OrderAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_2.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric2OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = 0;

                                if ((orderDetail.Fabric3STCAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_3.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric3STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric3OrderAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_3.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric3OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = 0;

                                if ((orderDetail.Fabric4STCAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_4.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric4STCAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else if ((orderDetail.Fabric4OrderAverage != 0) && (orderDetail.Quantity != 0))
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = Convert.ToInt32(((Convert.ToDecimal(QuantityAvl_4.Replace(",", "")) / Convert.ToDecimal(orderDetail.Fabric4OrderAverage) * 100)) / Convert.ToDecimal(orderDetail.Quantity));
                                else
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = 0;

                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate1 = (dr["Date1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate2 = (dr["Date2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate3 = (dr["Date3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate4 = (dr["Date4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date4"]);

                                //Added By Ashish
                                orderDetail.Fabric1OrderAverage = (dr["Fabric1OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric1OrderAverage"]);
                                orderDetail.OrdAvgDate1 = (dr["OrdAvgDate1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate1"]);
                                orderDetail.Fabric2OrderAverage = (dr["Fabric2OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric2OrderAverage"]);
                                orderDetail.OrdAvgDate2 = (dr["OrdAvgDate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate2"]);
                                orderDetail.Fabric3OrderAverage = (dr["Fabric3OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric3OrderAverage"]);
                                orderDetail.OrdAvgDate3 = (dr["OrdAvgDate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate3"]);
                                orderDetail.Fabric4OrderAverage = (dr["Fabric4OrderAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric4OrderAverage"]);
                                orderDetail.OrdAvgDate4 = (dr["OrdAvgDate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["OrdAvgDate4"]);

                                orderDetail.Fabric1STCAverage = (dr["Fabric1STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric1STCAverage"]);
                                orderDetail.CutAverageDate1 = (dr["CutAverageDate1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate1"]);
                                orderDetail.Fabric2STCAverage = (dr["Fabric2STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric2STCAverage"]);
                                orderDetail.CutAverageDate2 = (dr["CutAverageDate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate2"]);
                                orderDetail.Fabric3STCAverage = (dr["Fabric3STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric3STCAverage"]);
                                orderDetail.CutAverageDate3 = (dr["CutAverageDate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate3"]);
                                orderDetail.Fabric4STCAverage = (dr["Fabric4STCAverage"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["Fabric4STCAverage"]);
                                orderDetail.CutAverageDate4 = (dr["CutAverageDate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutAverageDate4"]);
                                //
                                orderDetail.CutWidth1 = (dr["CutWidth1"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth1"]);
                                orderDetail.CutWidth2 = (dr["CutWidth2"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth2"]);
                                orderDetail.CutWidth3 = (dr["CutWidth3"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth3"]);
                                orderDetail.CutWidth4 = (dr["CutWidth4"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["CutWidth4"]);
                                //

                                // shown kg/mtr from fabric working sheet
                                orderDetail.UnitOfAverage1 = (dr["UnitOfAverage1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage1"]);
                                orderDetail.UnitOfAverage2 = (dr["UnitOfAverage2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage2"]);
                                orderDetail.UnitOfAverage3 = (dr["UnitOfAverage3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage3"]);
                                orderDetail.UnitOfAverage4 = (dr["UnitOfAverage4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitOfAverage4"]);
                                //--------------------------Logic Apply For the latest Avg---------------------------------------------------------------------------
                                string summary1Caption = "";
                                string summary2Caption = "";
                                string summary3Caption = "";
                                string summary4Caption = "";
                                orderDetail.TotalSummary1 = SummaryAvg(orderDetail.Fabric1STCAverage, orderDetail.Fabric1OrderAverage, orderDetail.Quantity, ref summary1Caption, orderDetail.UnitOfAverage1);
                                orderDetail.TotalSummary2 = SummaryAvg(orderDetail.Fabric2STCAverage, orderDetail.Fabric2OrderAverage, orderDetail.Quantity, ref summary2Caption, orderDetail.UnitOfAverage2);
                                orderDetail.TotalSummary3 = SummaryAvg(orderDetail.Fabric3STCAverage, orderDetail.Fabric3OrderAverage, orderDetail.Quantity, ref summary3Caption, orderDetail.UnitOfAverage3);
                                orderDetail.TotalSummary4 = SummaryAvg(orderDetail.Fabric4STCAverage, orderDetail.Fabric4OrderAverage, orderDetail.Quantity, ref summary4Caption, orderDetail.UnitOfAverage4);
                                orderDetail.Caption1 = summary1Caption;
                                orderDetail.Caption2 = summary2Caption;
                                orderDetail.Caption3 = summary3Caption;
                                orderDetail.Caption4 = summary4Caption;
                                orderDetail.Fabric1STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate1, orderDetail.OrdAvgDate1, orderDetail.Fabric1STCAverage, orderDetail.Fabric1OrderAverage);
                                orderDetail.Fabric2STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate2, orderDetail.OrdAvgDate2, orderDetail.Fabric2STCAverage, orderDetail.Fabric2OrderAverage);
                                orderDetail.Fabric3STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate3, orderDetail.OrdAvgDate3, orderDetail.Fabric3STCAverage, orderDetail.Fabric3OrderAverage);
                                orderDetail.Fabric4STCAverage = FindLatestOrdAvg(orderDetail.CutAverageDate4, orderDetail.OrdAvgDate4, orderDetail.Fabric4STCAverage, orderDetail.Fabric4OrderAverage);

                                //Add By Ravi kumar on 19/2/15 For Ship Check box
                                orderDetail.IsShiped = (dr["IsShiped"] == DBNull.Value) ? false : Convert.ToBoolean(dr["IsShiped"]);
                                // Added By Ashish on 12/3/15 For IsShpped Date
                                orderDetail.IsShipedDate = (dr["IsShipedOn"] != DBNull.Value) ? Convert.ToDateTime(dr["IsShipedOn"]) : DateTime.MinValue;
                                // updated  By sushil on 26/3/2015
                                orderDetail.IsFitsPending = (dr["FitsPending"] == DBNull.Value) ? false : Convert.ToBoolean(dr["FitsPending"]);

                                //END  updated  By sushil on 26/3/2015
                                //-------------------------End-------------------------------------------------------------------------------------------------------

                                orderDetail.ShippedQty = (dr["shippedqty"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["shippedqty"]);
                                orderDetail.Finish_80 = (dr["Finish_80"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Finish_80"]);

                                string strGetTotalQTY = "orderid =" + orderDetail.OrderID;
                                DataRow[] drGetTotalQTY;
                                drGetTotalQTY = dt11.Select(strGetTotalQTY);
                                int TotalQTY = Convert.ToInt32(drGetTotalQTY[0].ItemArray[0]);

                                //Added By Ashish on 1/9/2014
                                int iFinalOrderFabric1 = (dr["FinalOrderFabric1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinalOrderFabric1"]);
                                int FabricGreige = (dr["Fabric1Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric1Greige"]);
                                int MOPercentadd1 = (dr["MOPercentadd1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd1"]);

                                string QuantityAvl1 = "";
                                QuantityAvl1 = (dr["QuantityAvl1"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl1"]);
                                int FabricGreige2 = (dr["Fabric2Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric2Greige"]);
                                int MOPercentadd2 = (dr["MOPercentadd2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd2"]);
                                string QuantityAvl2 = "";
                                QuantityAvl2 = (dr["QuantityAvl2"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl2"]);

                                if (orderDetail.FinalOrderFabric2 != "0" && orderDetail.FinalOrderFabric2 != null)
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = Convert.ToInt32(Convert.ToDecimal(QuantityAvl2.Replace(",", "")) * 100 / Convert.ToDecimal(orderDetail.FinalOrderFabric2.Replace(",", "")));

                                int iFinalOrderFabric3 = (dr["FinalOrderFabric3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinalOrderFabric3"]);
                                int FabricGreige3 = (dr["Fabric3Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric3Greige"]);
                                int MOPercentadd3 = (dr["MOPercentadd3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd3"]);

                                string QuantityAvl3 = "";
                                QuantityAvl3 = (dr["QuantityAvl3"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl3"]);

                                if (orderDetail.FinalOrderFabric3 != "0" && orderDetail.FinalOrderFabric3 != null)
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = Convert.ToInt32(Convert.ToDecimal(QuantityAvl3.Replace(",", "")) * 100 / Convert.ToDecimal(orderDetail.FinalOrderFabric3.Replace(",", "")));


                                int FabricGreige4 = (dr["Fabric4Greige"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Fabric4Greige"]);
                                int MOPercentadd4 = (dr["MOPercentadd4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["MOPercentadd4"]);

                                string QuantityAvl4 = "";
                                QuantityAvl4 = (dr["QuantityAvl4"] == DBNull.Value) ? "0" : Convert.ToString(dr["QuantityAvl4"]);




                                if (orderDetail.FinalOrderFabric4 != "0" && orderDetail.FinalOrderFabric4 != null)
                                    orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = Convert.ToInt32(Convert.ToDecimal(QuantityAvl4.Replace(",", "")) * 100 / Convert.ToDecimal(orderDetail.FinalOrderFabric4.Replace(",", "")));

                                //End


                                orderDetail.QuantityAvl1 = (dr["QuantityAvl1"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl1"]);

                                orderDetail.QuantityAvl2 = (dr["QuantityAvl2"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl2"]);
                                orderDetail.QuantityAvl3 = (dr["QuantityAvl3"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl3"]);
                                orderDetail.QuantityAvl4 = (dr["QuantityAvl4"] == DBNull.Value) ? "" : Convert.ToString(dr["QuantityAvl4"]);

                                double QuantityAvl1_ = 0;
                                double QuantityAvl2__ = 0;
                                double QuantityAvl3__ = 0;
                                double QuantityAvl4__ = 0;

                                if (dr["QuantityAvl1"] != DBNull.Value)
                                {
                                    QuantityAvl1_ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl1"]).Replace(",", ""));

                                }
                                double FinalOrderFabric1_kd = (QuantityAvl1_ / 1000);
                                orderDetail.FinalOrderFabric1_k = Math.Round((FinalOrderFabric1_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k"; ;

                                if (dr["QuantityAvl2"] != DBNull.Value)
                                {
                                    QuantityAvl2__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl2"]).Replace(",", ""));

                                    double FinalOrderFabric2_kd = (QuantityAvl2__ / 1000);
                                    orderDetail.FinalOrderFabric2_k = Math.Round((FinalOrderFabric2_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k";

                                }

                                if (dr["QuantityAvl3"] != DBNull.Value)
                                {
                                    QuantityAvl3__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl3"]).Replace(",", ""));

                                    double FinalOrderFabric3_kd = (QuantityAvl3__ / 1000);
                                    orderDetail.FinalOrderFabric3_k = Math.Round((FinalOrderFabric3_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k"; ;

                                }

                                if (dr["QuantityAvl4"] != DBNull.Value)
                                {
                                    QuantityAvl4__ = Convert.ToDouble(Convert.ToString(dr["QuantityAvl4"]).Replace(",", ""));

                                    double FinalOrderFabric4_kd = (QuantityAvl4__ / 1000);
                                    orderDetail.FinalOrderFabric4_k = Math.Round((FinalOrderFabric4_kd), 1, MidpointRounding.AwayFromZero).ToString() + "k"; ;

                                }

                                orderDetail.TotalPenalty = (dr["TotalPenalty"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["TotalPenalty"]);
                                orderDetail.PenaltyPercentAge = (dr["PenaltyPercentAge"] == DBNull.Value) ? 0 : Convert.ToDouble(dr["PenaltyPercentAge"]);

                                orderDetail.IsRiskTask = IsRiskDone(orderDetail.ParentOrder.Style.StyleID, "IsRiskDone", orderDetail.OrderID);
                                orderDetail.IsOBCreate = IsOBCreate(orderDetail.ParentOrder.Style.StyleID, "IsOBCreate");
                                orderDetail.IsFinalizeOB = IsFinalizeOB(orderDetail.ParentOrder.Style.StyleID, "FinalizeOB");
                                orderDetail.IsLinePlan = (dr["IsLinePlan"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsLinePlan"]);
                                orderDetail.LineCount = (dr["LineCount"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["LineCount"]);

                                orderDetail.Accessories = new List<MOOrderDetails.AccessoriesDetails>();
                                orderDetail.ApprovedDate = new List<MOOrderDetails.AccessoriesApprovedDate>();

                                string strNewPercent = "OrderDetailID =" + orderDetail.OrderDetailID;
                                //DataRow[] drAccPercent = dt10.Select(strNewPercent);
                                orderDetail.ParentOrder.FabricApprovalDetails = new FabricApprovalDetails();
                                orderDetail.ParentOrder.FabricApprovalDetails.F5BulkStatus = (dr["FabricTracking1"].ToString() == "") ? string.Empty : dr["FabricTracking1"].ToString().Remove((dr["FabricTracking1"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F6BulkStatus = (dr["FabricTracking2"].ToString() == "") ? string.Empty : dr["FabricTracking2"].ToString().Remove((dr["FabricTracking2"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F7BulkStatus = (dr["FabricTracking3"].ToString() == "") ? string.Empty : dr["FabricTracking3"].ToString().Remove((dr["FabricTracking3"]).ToString().Length - 13);
                                orderDetail.ParentOrder.FabricApprovalDetails.F8BulkStatus = (dr["FabricTracking4"].ToString() == "") ? string.Empty : dr["FabricTracking4"].ToString().Remove((dr["FabricTracking4"]).ToString().Length - 13);

                                orderDetail.Fabric1actionDate = (dr["FabricTracking1"]).ToString();
                                orderDetail.Fabric2actionDate = (dr["FabricTracking2"]).ToString();
                                orderDetail.Fabric3actionDate = (dr["FabricTracking3"]).ToString();
                                orderDetail.Fabric4actionDate = (dr["FabricTracking4"]).ToString();
                                orderDetail.TotalcutQtyforCTSL = dr["TotalcutQtyforCTSL"] == DBNull.Value ? "0" : dr["TotalcutQtyforCTSL"].ToString();
                                orderDetail.QCNarration = dr["QCNarration"] == DBNull.Value ? " " : dr["QCNarration"].ToString();

                                if (orderDetail.QCNarration.ToLower().Contains("inln"))
                                    orderDetail.InspectionID = "1";
                                if (orderDetail.QCNarration.ToLower().Contains("mid"))
                                    orderDetail.InspectionID = "2";
                                if (orderDetail.QCNarration.ToLower().Contains("fnl"))
                                    orderDetail.InspectionID = "3";
                                if (orderDetail.QCNarration.ToLower().Contains("onln"))
                                    orderDetail.InspectionID = "4";


                                string strSize = "OrderDetailID =" + orderDetail.OrderDetailID;
                                DataRow[] DataRows2;
                                DataRows2 = dt2.Select(strSize);

                                foreach (DataRow dr2 in DataRows2)
                                {
                                    int quantity = (dr2["TotalQuantity"] != DBNull.Value) ? Convert.ToInt32(dr2["TotalQuantity"]) : 0;
                                    if (quantity > 0)
                                    {
                                        orderDetail.IsSizeFilledUp = true;
                                    }
                                    else
                                        orderDetail.IsSizeFilledUp = false;
                                }

                                int Qty = Convert.ToInt32(dr["Quantity"]);
                                string OdId1 = "OrderDetailID =" + orderDetail.OrderDetailID;

                                DataRow[] DrProduction;
                                DrProduction = dt4.Select(OdId1);
                                if (DrProduction.Length > 0)
                                {
                                    orderDetail.Production = GetProductionTable(DrProduction.CopyToDataTable());
                                }

                                string str = "DesignationID=" + desigId;
                                //string str1 = "DepartmentID=" + DeptId;
                                DataRow[] DataRow;
                                DataRow = dt9.Select(str);
                                //Added By Ashish on 4/3/2014
                                iKandi.Common.MOOrderDetails.AccQualityRead = false;
                                iKandi.Common.MOOrderDetails.AccQualityWrite = false;
                                iKandi.Common.MOOrderDetails.AccApprovedOnRead = false;
                                iKandi.Common.MOOrderDetails.AccApprovedOnWrite = false;
                                iKandi.Common.MOOrderDetails.AccAvilableOnRead = false;
                                iKandi.Common.MOOrderDetails.AccAvilableOnWrite = false;
                                iKandi.Common.MOOrderDetails.AccTotalRead = false;
                                iKandi.Common.MOOrderDetails.AccTotalWrite = false;
                                iKandi.Common.MOOrderDetails.AccRemarkRead = false;
                                iKandi.Common.MOOrderDetails.AccRemarkWrite = false;
                                iKandi.Common.MOOrderDetails.AccRecdRead = false;
                                iKandi.Common.MOOrderDetails.AccRecdWrite = false;
                                iKandi.Common.MOOrderDetails.AccessoriesETARead = false;
                                iKandi.Common.MOOrderDetails.AccessoriesETAWrite = false;

                                MOOrderDetails.PCutTodayWrite = false;
                                MOOrderDetails.PCutReadyTodayWrite = false;
                                MOOrderDetails.PStitchTodayWrite = false;
                                MOOrderDetails.PFinishTodayWrite = false;
                                MOOrderDetails.PVATodayWrite = false;
                                MOOrderDetails.PCutTotalWrite = false;
                                MOOrderDetails.PCutReadyTotalWrite = false;
                                MOOrderDetails.PStitchTotalWrite = false;
                                MOOrderDetails.PFinishTotalWrite = false;
                                MOOrderDetails.PVATotalWrite = false;

                                foreach (DataRow dr8 in DataRow)
                                {
                                    //Permission prmSection = new Permission();

                                    MOOrderDetails odPeemissionColumn = new MOOrderDetails();
                                    string strPermission = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                    string ColumnName = (dr8["MoColumnName"] == DBNull.Value) ? string.Empty : dr8["MoColumnName"].ToString();
                                    //if() 
                                    orderDetail.SectionName = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                    int CoulmeID = Convert.ToInt32((dr8["CoulmeID"] == DBNull.Value) ? string.Empty : dr8["CoulmeID"]);

                                    odPeemissionColumn.ColumnName = (dr8["MoColumnName"] == DBNull.Value) ? string.Empty : dr8["MoColumnName"].ToString();
                                    switch (strPermission)
                                    {
                                        case "Basic Info section":
                                            iKandi.Common.Permission.BasicSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 1)
                                            {
                                                //orderDetail.bOrderDate = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.bSerialNo = true;
                                                orderDetail.bSerialNowrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 2)
                                            {
                                                //orderDetail.bSerialNo = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.bStylelNo = true;
                                                orderDetail.bStyleNowrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 3)
                                            {
                                                orderDetail.bLineNo = true;
                                                orderDetail.bLinewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 4)
                                            {
                                                orderDetail.bContractNo = true;
                                                orderDetail.bContractwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 5)
                                            {
                                                orderDetail.bBIPLPrice = true;
                                                orderDetail.bBIPLPricewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 6)
                                            {
                                                orderDetail.bIKANDIPriceGrossRead = true;
                                                orderDetail.bIKANDIPriceGrosswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 7)
                                            {
                                                orderDetail.bIKANDIPriceRead = true;
                                                orderDetail.bIKANDIPricewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 8)
                                            {
                                                orderDetail.bMarginRead = true;
                                                orderDetail.bMarginwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //if (CoulmeID == "Ikandi Business")
                                            //{
                                            //    orderDetail.bBusinessRead = true;
                                            //    orderDetail.bBusinesswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            //}
                                            if (CoulmeID == 50)
                                            {
                                                orderDetail.bBusinessDescriptionRead = true;
                                                orderDetail.bBusinessDescriptionwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 51)
                                            {
                                                orderDetail.bDepartmentRead = true;
                                                orderDetail.bDepartmentwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 10)
                                            {
                                                orderDetail.bOrderDateRead = true;
                                                orderDetail.bOrderDatewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 18)
                                            {
                                                orderDetail.bBasicInfoRemarkRead = true;
                                                orderDetail.bBasicInfoRemarkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //Added By Ashish on 28/3/2015
                                            if (CoulmeID == 115)
                                            {
                                                orderDetail.bPriceVAriationRead = true;
                                                orderDetail.bPriceVAriationkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 116)
                                            {
                                                orderDetail.bPOPendingRead = true;
                                                orderDetail.bPOPendingkwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            //added by Surendra Sharma on 09-03-2018....
                                            if (CoulmeID == 135)
                                            {
                                                orderDetail.bCostingWeight = true;
                                                orderDetail.bCostingWeight_Permission = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //-----------------End-----------------
                                            break;

                                        case "Fabric Section":
                                            iKandi.Common.Permission.StyleSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 19)
                                            {
                                                orderDetail.FBIHDateRead = true;
                                                orderDetail.FBIHDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //if (CoulmeID == "Dept Date")
                                            //{
                                            //    orderDetail.FDeptDateRead = true;
                                            //    orderDetail.FDeptDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            //}
                                            if (CoulmeID == 21)
                                            {
                                                orderDetail.FQualityRead = true;
                                                orderDetail.FQualityWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 22)
                                            {
                                                orderDetail.FOrdRead = true;
                                                orderDetail.FOrdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 23)
                                            {
                                                orderDetail.FRecdRead = true;
                                                orderDetail.FRecdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 24)
                                            {
                                                orderDetail.FFabricRemarkRead = true;
                                                orderDetail.FFabricRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            // Added By ashish on 6/3/2014
                                            if (CoulmeID == 53)
                                            {
                                                orderDetail.FFabricTrackingRead = true;
                                                orderDetail.FFabricTrackingWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 56)
                                            {
                                                orderDetail.FPerInhouseRead = true;
                                                orderDetail.FPerInhouseWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 57)
                                            {
                                                orderDetail.FFabTotalRead = true;
                                                orderDetail.FFabTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 61)
                                            {
                                                orderDetail.FFabStartETARead = true;
                                                orderDetail.FFabStartETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 62)
                                            {
                                                orderDetail.FFabEndETARead = true;
                                                orderDetail.FFabEndETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 105)
                                            {
                                                orderDetail.FFabSummaryRead = true;
                                                orderDetail.FFabSummaryWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //END
                                            break;


                                        case "Accessories Section":
                                            iKandi.Common.Permission.AccessoriesSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 25)
                                            {
                                                iKandi.Common.MOOrderDetails.AccQualityRead = true;
                                                iKandi.Common.MOOrderDetails.AccQualityWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);

                                            }
                                            if (CoulmeID == 26)
                                            {
                                                iKandi.Common.MOOrderDetails.AccApprovedOnRead = true;
                                                iKandi.Common.MOOrderDetails.AccApprovedOnWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 27)
                                            {
                                                iKandi.Common.MOOrderDetails.AccRecdRead = true;
                                                iKandi.Common.MOOrderDetails.AccRecdWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 29)
                                            {
                                                iKandi.Common.MOOrderDetails.AccAvilableOnRead = true;
                                                iKandi.Common.MOOrderDetails.AccAvilableOnWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 28)
                                            {
                                                iKandi.Common.MOOrderDetails.AccTotalRead = true;
                                                iKandi.Common.MOOrderDetails.AccTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 49)
                                            {
                                                iKandi.Common.MOOrderDetails.AccRemarkRead = true;
                                                iKandi.Common.MOOrderDetails.AccRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 63)
                                            {
                                                iKandi.Common.MOOrderDetails.AccessoriesETARead = true;
                                                iKandi.Common.MOOrderDetails.AccessoriesETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //
                                            break;
                                        case "Fits Section":
                                            iKandi.Common.Permission.AccessoriesSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 30)
                                            {
                                                orderDetail.FitsStcRead = true;
                                                orderDetail.FitsStcWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 34)
                                            {
                                                orderDetail.FitsStatusRead = true;
                                                orderDetail.FitsStatusWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 35)
                                            {
                                                orderDetail.FitsPCDRead = true;
                                                orderDetail.FitsPCDWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }



                                            if (CoulmeID == 38)
                                            {
                                                orderDetail.FitsLineRead = true;
                                                orderDetail.FitsLineWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 39)
                                            {
                                                orderDetail.FitsDaysRead = true;
                                                orderDetail.FitsDaysWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 43)
                                            {
                                                orderDetail.FitsRemarkRead = true;
                                                orderDetail.FitsRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            //Added By Ashish on 23/3/2015
                                            if (CoulmeID == 66)
                                            {
                                                orderDetail.FitsPatternRead = true;
                                                orderDetail.FitsPatternkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 67)
                                            {
                                                orderDetail.FitsCuttingkRead = true;
                                                orderDetail.FitsCuttingkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 68)
                                            {
                                                orderDetail.FitsProdFileRead = true;
                                                orderDetail.FitsProdFileWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 69)
                                            {
                                                orderDetail.FitsHOPPMRead = true;
                                                orderDetail.FitsHOPPMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 70)
                                            {
                                                orderDetail.FitsTOPSentRead = true;
                                                orderDetail.FitsTOPSentWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //
                                            if (CoulmeID == 71)
                                            {
                                                orderDetail.FitsSTCETARead = true;
                                                orderDetail.FitsSTCETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 72)
                                            {
                                                orderDetail.FitsPatternETARead = true;
                                                orderDetail.FitsPatternETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 73)
                                            {
                                                orderDetail.FitsCuttingETARead = true;
                                                orderDetail.FitsCuttingETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 74)
                                            {
                                                orderDetail.FitsProdFileETARead = true;
                                                orderDetail.FitsProdFileETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 75)
                                            {
                                                orderDetail.FitsHOPPMETARead = true;
                                                orderDetail.FitsHOPPMETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 76)
                                            {
                                                orderDetail.FitsTOPSentETARead = true;
                                                orderDetail.FitsTOPSentETAWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 91)
                                            {
                                                orderDetail.FitsStcTargetDateRead = true;
                                                orderDetail.FitsStcTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 92)
                                            {
                                                orderDetail.FitsStcActualDateRead = true;
                                                orderDetail.FitsStcActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 93)
                                            {
                                                orderDetail.FitsPatternTargetDateRead = true;
                                                orderDetail.FitsPatternTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 94)
                                            {
                                                orderDetail.FitsPatternActualDateRead = true;
                                                orderDetail.FitsPatternActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 95)
                                            {
                                                orderDetail.FitsCuttingTargetDateRead = true;
                                                orderDetail.FitsCuttingTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 96)
                                            {
                                                orderDetail.FitsCuttingActualDateRead = true;
                                                orderDetail.FitsCuttingActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 97)
                                            {
                                                orderDetail.FitsProdTargetDateRead = true;
                                                orderDetail.FitsProdTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 98)
                                            {
                                                orderDetail.FitsProdActualDateRead = true;
                                                orderDetail.FitsProdActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 99)
                                            {
                                                orderDetail.FitsHOPPMTargetDateRead = true;
                                                orderDetail.FitsHOPPMTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 100)
                                            {
                                                orderDetail.FitsHOPPMActualDateRead = true;
                                                orderDetail.FitsHOPPMActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 101)
                                            {
                                                orderDetail.FitsTopSentTargetDateRead = true;
                                                orderDetail.FitsTopSentMTargetDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 102)
                                            {
                                                orderDetail.FitsTopSentMActualDateRead = true;
                                                orderDetail.FitsTopSentMActualDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 103)
                                            {
                                                orderDetail.FitsLKMRead = true;
                                                orderDetail.FitsLKMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 104)
                                            {
                                                orderDetail.FitsOBRead = true;
                                                orderDetail.FitsOBWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 117)
                                            {
                                                orderDetail.FitsETADateRead = true;
                                                orderDetail.FitsETADateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 118)
                                            {
                                                orderDetail.FitsCostingSAMRead = true;
                                                orderDetail.FitsCostingSAMWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Abhishek on 28/3/2016
                                            if (CoulmeID == 129)
                                            {

                                                orderDetail.CDCharWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 130) //TODO: need to change for testReport 
                                            {

                                                orderDetail.TestReportWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 131)
                                            {
                                                orderDetail.PeekFileUploadRead = true;
                                                orderDetail.PeekFileUploadWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            //END
                                            break;

                                        case "Production Section":
                                            iKandi.Common.Permission.ProductionSection = (dr8["Section"] == DBNull.Value) ? string.Empty : dr8["Section"].ToString();
                                            if (CoulmeID == 44)
                                            {
                                                orderDetail.PUnitRead = true;
                                                orderDetail.PUnitWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 45)
                                            {
                                                orderDetail.PTotalRead = true;
                                                orderDetail.PTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 46)
                                            {
                                                orderDetail.POverallRead = true;
                                                orderDetail.POverallWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 47)
                                            {
                                                orderDetail.PBalanceRead = true;
                                                orderDetail.PBalanceWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 48)
                                            {
                                                orderDetail.PProductionRemarkRead = true;
                                                orderDetail.PProductionsRemarkWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            // Add By Ravi kumar on 23/2/2015 for Shipped permission
                                            if (CoulmeID == 60)
                                            {
                                                orderDetail.IsShipedRead = true;
                                                orderDetail.IsShipedWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            #region Gajendra Production Permission 01-03-2016
                                            if (CoulmeID == 77)
                                            {
                                                MOOrderDetails.PCutTodayRead = true;
                                                MOOrderDetails.PCutTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 78)
                                            {
                                                MOOrderDetails.PCutReadyTodayRead = true;
                                                MOOrderDetails.PCutReadyTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 79)
                                            {
                                                MOOrderDetails.PStitchTodayRead = true;
                                                MOOrderDetails.PStitchTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 80)
                                            {
                                                MOOrderDetails.PFinishTodayRead = true;
                                                MOOrderDetails.PFinishTodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 81)
                                            {
                                                MOOrderDetails.PVATodayRead = true;
                                                MOOrderDetails.PVATodayWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 82)
                                            {
                                                MOOrderDetails.PCutTotalRead = true;
                                                MOOrderDetails.PCutTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 83)
                                            {
                                                MOOrderDetails.PCutReadyTotalRead = true;
                                                MOOrderDetails.PCutReadyTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 84)
                                            {
                                                MOOrderDetails.PStitchTotalRead = true;
                                                MOOrderDetails.PStitchTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 85)
                                            {
                                                MOOrderDetails.PFinishTotalRead = true;
                                                MOOrderDetails.PFinishTotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 86)
                                            {
                                                MOOrderDetails.PVATotalRead = true;
                                                MOOrderDetails.PVATotalWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 87)
                                            {
                                                orderDetail.PlblCMTActRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCMTActWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 88)
                                            {
                                                orderDetail.PlblCMTTgtRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCMTTgtWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 89)
                                            {
                                                orderDetail.PlblCostedRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblCostedWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 90)
                                            {
                                                orderDetail.PlblProfitLossRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblProfitLossWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 126)
                                            {
                                                orderDetail.PlblActualEffRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblActualEffWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 127)
                                            {
                                                orderDetail.PlblTargetEffRead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblTargetEffWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 128)
                                            {
                                                orderDetail.PlblBERead = (dr8["PermisionWrite"] == DBNull.Value && dr8["PermisionRead"] == DBNull.Value) ? false : (Convert.ToBoolean(dr8["PermisionWrite"]) || Convert.ToBoolean(dr8["PermisionRead"]));
                                                //orderDetail.PlblBEWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            #endregion
                                            if (CoulmeID == 13)
                                            {
                                                orderDetail.bExFactoryRead = true;
                                                orderDetail.bExFactorywrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 16)
                                            {
                                                orderDetail.bModeRead = true;
                                                orderDetail.bModewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 32)
                                            {
                                                orderDetail.FitsPlannedDateRead = true;
                                                orderDetail.FitsPlannedDateWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            if (CoulmeID == 15)
                                            {
                                                orderDetail.bDCDateRead = true;
                                                orderDetail.bDCDatewrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 17)
                                            {
                                                orderDetail.bMDARead = true;
                                                orderDetail.bMDAwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 11)
                                            {
                                                orderDetail.bQuantityRead = true;
                                                orderDetail.bQuantitywrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }

                                            //Added By Ashish on 7/4/2015
                                            if (CoulmeID == 12)
                                            {
                                                orderDetail.bStatusRead = true;
                                                orderDetail.bStatuswrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 123)
                                            {
                                                orderDetail.bLineAllocationRead = true;
                                                orderDetail.bLineAllocationwrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            if (CoulmeID == 125)
                                            {
                                                orderDetail.ReadReallocationLink = (dr8["PermisionRead"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionRead"]);
                                                orderDetail.ReadWriteReallocationLink = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]); ;

                                            }
                                            if (CoulmeID == 131)
                                            {
                                                orderDetail.ProductionPlanRead = true;
                                                orderDetail.ProductionPlanWrite = (dr8["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr8["PermisionWrite"]);
                                            }
                                            break;

                                    }
                                    //END
                                }

                                //Added By Ashish
                                DataRow[] drAccess = dsorderDetail.Tables[3].Select("OrderID =" + orderDetail.OrderID);
                                DataRow[] drTotalQuantity = dsorderDetail.Tables[7].Select("OrderID =" + orderDetail.OrderID);
                                //DataRow[] drAccessApproveDate = dsorderDetail.Tables[4].Select("OrderDetailID=" + orderDetail.OrderDetailID);
                                if (drAccess.Length > 0)
                                {
                                    orderDetail.Accessories = GetAccessoriesDetailsTable(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                    //if (drAccPercent.Length > 0)
                                    //{
                                    //  orderDetail.Accessories = GetAccessoriesDetailsTable(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, drAccPercent.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                    //}
                                    //else
                                    //{
                                    //  orderDetail.Accessories = GetAccessoriesDetailsTableForNoPercent(drAccess.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity, orderDetail.IsShiped, orderDetail.BulkTarget, iKandi.Common.MOOrderDetails.AccQualityRead, iKandi.Common.MOOrderDetails.AccRecdRead, iKandi.Common.MOOrderDetails.AccessoriesETARead);
                                    //}

                                }
                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    //TotalCount = 0; //Gajendra Paging
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }
        public int Calculate(int Qty, int overAll)
        {

            int Total = 0;
            Total = (int)Math.Round((overAll * 100) / Convert.ToDouble(Qty));
            //  Total = overAll / Qty * 100;

            return Total;
        }
        public string ReturnFabric(string Fabric)
        {
            string strFabric = Fabric.Replace("''", "");

            return strFabric;
        }
        public double FindLatestOrdAvg(DateTime CutAvg, DateTime OrdAvg, double CutAvgValues, double OrdAvgValues)
        {

            double Avg = 0;
            //if (CutAvg > OrdAvg)
            //{
            //    Avg = CutAvgValues;
            //}
            //if (OrdAvg > CutAvg)
            //{
            //    Avg = OrdAvgValues;
            //}
            //if (OrdAvg == CutAvg)
            //{
            //     Avg = OrdAvgValues;               
            //}
            // Above is comented by sanjeev on 09/12/2021 to remove date logic

            if (CutAvgValues > 0)
            {
                Avg = CutAvgValues;
            }
            else if (OrdAvgValues > 0)
            {
                Avg = OrdAvgValues;
            }
            // Avg = (int)Math.Round((134 * 100) / Convert.ToDouble(567));
            //  Total = overAll / Qty * 100;

            return Avg;
        }
        public decimal RoundUp(decimal number1, decimal number2, int places)
        {
            decimal number = (number1 - number2);
            decimal factor = RoundFactor(places);
            number *= factor;
            number = Math.Ceiling(number);
            number /= factor;
            return number;
        }
        public decimal RoundFactor(int places)
        {
            decimal factor = 1m;

            if (places < 0)
            {
                places = -places;
                for (int i = 0; i < places; i++)
                    factor /= 10m;
            }

            else
            {
                for (int i = 0; i < places; i++)
                    factor *= 10m;
            }

            return factor;
        }

        //public string SummaryAvg(double CutAvgValues, double OrdAvgValues, double Pieces, ref string Caption,int Unit)
        //{

        //    string UnitCaption = string.Empty;
        //    //double TotalPieces = 0;
        //    string Summary = string.Empty;
        //    if (CutAvgValues == 0 && OrdAvgValues==0)
        //    {
        //        //TotalPieces = (double)Math.Round(Pieces * OrdAvgValues);
        //        Summary ="Both Avg is not mentioned";
        //        Caption = "Black";
        //    }
        //    if ((CutAvgValues == OrdAvgValues) && (OrdAvgValues != 0 && CutAvgValues != 0))
        //    {
        //        if (Unit == 1)
        //            UnitCaption = "Kg";
        //        else
        //            UnitCaption = "m";

        //        //TotalPieces = (double)Math.Round(Pieces * OrdAvgValues);
        //        Summary = "Both Avg Have " + CutAvgValues + UnitCaption;
        //        Caption = "Black";
        //    }
        //    //if (OrdAvgValues == 0)
        //    //{
        //    //    TotalPieces = (double)Math.Round(Pieces * CutAvgValues);
        //    //    Summary = TotalPieces + "@" + CutAvgValues + "(Cut Avg)";
        //    //    Caption = "Black";
        //    //}
        //    if (CutAvgValues > OrdAvgValues)
        //    {
        //        if (Unit == 1)
        //        {
        //            UnitCaption = "Kg";
        //            Summary = "Var:" + Math.Round((CutAvgValues - OrdAvgValues), 1, MidpointRounding.ToEven) + " (S/Fall:" + Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 1, MidpointRounding.ToEven) + UnitCaption + ")";
        //        }

        //        else
        //        {
        //            UnitCaption = "m";
        //            Summary = "Var:" + Math.Round((CutAvgValues - OrdAvgValues), 2, MidpointRounding.ToEven) + " (S/Fall:" + Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 2, MidpointRounding.ToEven) + UnitCaption + ")";
        //        }
        //        Caption = "Red";

        //    }
        //    if (OrdAvgValues > CutAvgValues)
        //    {
        //        if (Unit == 1)
        //        {
        //            UnitCaption = "Kg";
        //            Summary = "Var:" + Math.Round((OrdAvgValues - CutAvgValues), 1, MidpointRounding.ToEven) + " (Excess:" + Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 1, MidpointRounding.ToEven) + UnitCaption + ")";
        //        }
        //        else
        //        {
        //            UnitCaption = "m";
        //            Summary = "Var:" + Math.Round((OrdAvgValues - CutAvgValues), 2, MidpointRounding.ToEven) + " (Excess:" + Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 2, MidpointRounding.ToEven) + UnitCaption + ")";
        //        }


        //        Caption = "Green";
        //    }
        //    if (CutAvgValues==0 || OrdAvgValues==0)
        //    {

        //        Summary = "";
        //        Caption = "";
        //    }

        //    // Avg = (int)Math.Round((134 * 100) / Convert.ToDouble(567));
        //    //  Total = overAll / Qty * 100;

        //    return Summary;
        //}
        public string SummaryAvg(double CutAvgValues, double OrdAvgValues, double Pieces, ref string Caption, int Unit)
        {

            string UnitCaption = string.Empty;
            //double TotalPieces = 0;
            string Summary = string.Empty;
            if (CutAvgValues == 0 && OrdAvgValues == 0)
            {
                //TotalPieces = (double)Math.Round(Pieces * OrdAvgValues);
                Summary = "Not mentioned";
                Caption = "Black";
            }
            if ((CutAvgValues == OrdAvgValues) && (OrdAvgValues != 0 && CutAvgValues != 0))
            {
                if (Unit == 1)
                    UnitCaption = "Kg";
                else
                    UnitCaption = "m";

                //TotalPieces = (double)Math.Round(Pieces * OrdAvgValues);
                Summary = "Avg tallied";
                Caption = "Black";
            }
            //if (OrdAvgValues == 0)
            //{
            //    TotalPieces = (double)Math.Round(Pieces * CutAvgValues);
            //    Summary = TotalPieces + "@" + CutAvgValues + "(Cut Avg)";
            //    Caption = "Black";
            //}
            if (CutAvgValues > OrdAvgValues)
            {
                if (Unit == 1)
                {
                    UnitCaption = "Kg";
                    decimal val = RoundUp(Convert.ToDecimal(CutAvgValues), Convert.ToDecimal(OrdAvgValues), 2);
                    //Summary = "Var:" + Math.Round((CutAvgValues - OrdAvgValues), 1, MidpointRounding.ToEven) + " (S/Fall:" + Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 1, MidpointRounding.ToEven) + UnitCaption + ")";
                    Summary = val + "(S/Fall:" + Convert.ToInt32(Math.Round(Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 1, MidpointRounding.ToEven), 1)) + UnitCaption + ")";
                }

                else
                {
                    UnitCaption = "m";
                    decimal val = RoundUp(Convert.ToDecimal(CutAvgValues), Convert.ToDecimal(OrdAvgValues), 2);
                    //Summary = "Var:" + Math.Round((CutAvgValues - OrdAvgValues), 2, MidpointRounding.ToEven) + " (S/Fall:" + Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 2, MidpointRounding.ToEven) + UnitCaption + ")";
                    Summary = val + "(S/Fall :" + Convert.ToInt32(Math.Round(Math.Round(((CutAvgValues - OrdAvgValues) * Pieces), 2, MidpointRounding.ToEven), 1)) + UnitCaption + ")";
                }
                Caption = "Red";

            }
            if (OrdAvgValues > CutAvgValues)
            {
                if (Unit == 1)
                {
                    UnitCaption = "Kg";
                    decimal val = RoundUp(Convert.ToDecimal(OrdAvgValues), Convert.ToDecimal(CutAvgValues), 2);
                    //Summary = "Var:" + Math.Round((OrdAvgValues - CutAvgValues), 1, MidpointRounding.ToEven) + " (Excess:" + Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 1, MidpointRounding.ToEven) + UnitCaption + ")";
                    Summary = val + "(Ex :" + Convert.ToInt32(Math.Round(Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 1, MidpointRounding.ToEven), 1)) + UnitCaption + ")";
                }
                else
                {
                    UnitCaption = "m";
                    decimal val = RoundUp(Convert.ToDecimal(OrdAvgValues), Convert.ToDecimal(CutAvgValues), 2);
                    //Summary = "Var:" + Math.Round((OrdAvgValues - CutAvgValues), 2, MidpointRounding.ToEven) + " (Excess:" + Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 2, MidpointRounding.ToEven) + UnitCaption + ")";
                    Summary = val + "(Ex :" + Convert.ToInt32(Math.Round(Math.Round(((OrdAvgValues - CutAvgValues) * Pieces), 2, MidpointRounding.ToEven), 1)) + UnitCaption + ")";
                }


                Caption = "Green";
            }
            if (CutAvgValues == 0 || OrdAvgValues == 0)
            {

                Summary = "";
                Caption = "";
            }

            // Avg = (int)Math.Round((134 * 100) / Convert.ToDouble(567));
            //  Total = overAll / Qty * 100;

            return Summary;
        }


        public string FabricQuantityCalculate(double TotalQuantity, double TotalFabricQuantity, double TotalFabricSum)
        {

            //string FabricQuantityRequired = string.Empty;
            //double QuantityRequired = (TotalQuantity * TotalFabricQuantity) / TotalFabricSum;
            //FabricQuantityRequired = Math.Round(QuantityRequired).ToString();
            //return FabricQuantityRequired;

            string FabricQuantityRequired = string.Empty;
            if (TotalQuantity == 0.0 && TotalFabricSum == 0.0)
            {
                FabricQuantityRequired = "0";
            }

            //double TotalFabricReq = TotalFabricSum * (1 - ((FabricShrinkage + FabricWastage) / 100));
            //double FabricReq = TotalFabricSum * (1 - (FabricShrinkage + FabricWastage) / 100);
            //TotalFabricSum
            else
            {
                double QuantityRequired = Math.Round((TotalQuantity / TotalFabricSum) * TotalFabricQuantity);
                FabricQuantityRequired = QuantityRequired.ToString();
            }
            return FabricQuantityRequired;
        }
        public string FabricMOQuantityCalculate(double TotalQuantity, double TotalFabricQuantity, double TotalFabricSum)
        {
            string FabricMOQuantityCalculate = string.Empty;
            if (TotalQuantity == 0.0 && TotalFabricSum == 0.0)
            {
                FabricMOQuantityCalculate = "0";
            }

            else
            {

                double QuantityRequired = (TotalQuantity * TotalFabricQuantity) / TotalFabricSum;
                FabricMOQuantityCalculate = Math.Round(QuantityRequired).ToString();
            }

            return FabricMOQuantityCalculate;


        }

        protected List<MOOrderDetails.ProductionDetails> GetProductionTable(DataTable dt)
        {

            List<MOOrderDetails.ProductionDetails> lst = new List<MOOrderDetails.ProductionDetails>();


            foreach (DataRow dr in dt.Rows)
            {
                MOOrderDetails.ProductionDetails Production = new MOOrderDetails.ProductionDetails();
                Production.OrderID = (dr["OrderId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderId"]);
                Production.OrderDetailID = (dr["OrderDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailID"]);
                Production.UnitId = (dr["UnitID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitID"]);

                Production.FactoryCodes = (dr["FactoryCodes"] == DBNull.Value) ? "" : Convert.ToString(dr["FactoryCodes"]);

                Production.IsFactoryInOut = (dr["FactoryCodes"] == DBNull.Value) ? "" :
                    (Convert.ToString(dr["FactoryCodes"]) == "C 47" ? "false" : (Convert.ToString(dr["FactoryCodes"]) == "C 45-46") ? "false" :
                    (Convert.ToString(dr["FactoryCodes"]) == "B 45") ? "false" : "true");
                //end by abhishek 2/3/2016
                Production.FactoryName = (dr["FactoryName"] == DBNull.Value) ? "" : Convert.ToString(dr["FactoryName"]);
                Production.CuttingShare = (dr["CuttingShare"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CuttingShare"]);
                Production.StitchingShare = (dr["StitchingShare"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StitchingShare"]);
                Production.FinishingShare = (dr["FinishingShare"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinishingShare"]);
                Production.TotalCutPcs = (dr["TotalCutPcs"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TotalCutPcs"]);
                Production.TotalCutReady = (dr["TotalCutReady"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TotalCutReady"]);
                Production.TotalStitched = (dr["TotalStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TotalStitched"]);
                Production.TotalFinished = (dr["TotalFinished"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TotalFinished"]);
                Production.TodayCut = (dr["TodayCut"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TodayCut"]);
                Production.TodayCutReady = (dr["TodayCutReady"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TodayCutReady"]);
                Production.TodayStitch = (dr["TodayStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TodayStitched"]);
                Production.TodayFinish = (dr["TodayFinish"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["TodayFinish"]);
                Production.FactorySpecification = (dr["FactoryClassification"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FactoryClassification"]);
                Production.IsShipped = (dr["IsShiped"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsShiped"]);
                Production.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? "" : Convert.ToString(dr["StyleNumber"]);
                Production.ValueAddedQty = (dr["ValueAddedQty"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ValueAddedQty"]);
                Production.ValueAddedQtyToday = (dr["ValueAddedQtyToday"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ValueAddedQtyToday"]);
                Production.ExFactory = (dr["ExFactory"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["ExFactory"]);
                Production.StitchQty_OutHouse = (dr["StitchQty_OutHouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StitchQty_OutHouse"]);
                Production.FinishQty_OutHouse = (dr["FinishQty_OutHouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FinishQty_OutHouse"]);
                Production.Finishing_InHouse = (dr["Finishing_InHouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Finishing_InHouse"]);
                Production.IsSingleProduction = dt.Rows.Count > 1 ? "0" : "1";

                if ((Production.UnitId == 3) || (Production.UnitId == 11) || (Production.UnitId == 96) || (Production.UnitId == 120))
                {
                    Production.LineNo = (dr["lineNoName"] == DBNull.Value) ? "" : Convert.ToString(dr["lineNoName"]);
                }
                else
                {
                    Production.LineNoOut = (dr["LineOut"] == DBNull.Value) ? "" : Convert.ToString(dr["LineOut"]);
                }
                Production.CutIssueQty = (dr["CutIssue"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CutIssue"]);
                if (Production.CutIssueQty > 0)
                {
                    Production.CutIssueQtyTooltip = (dr["CutIssue"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CutIssue"]);
                }
                if (Production.UnitId != 3 && Production.UnitId != 11)
                {
                    Production.IsVisibleOutHouse = "YES";
                }
                else
                {
                    Production.IsVisibleOutHouse = "";
                }
                Production.CutIssueQtyTotal = (dr["CutIssueToal"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CutIssueToal"]);
                Production.RescanTotalValue = (dr["RescanTotalValue"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["RescanTotalValue"]);
                Production.RescanPendingValue = (dr["RescanPendingValue"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["RescanPendingValue"]);
                Production.OutHouseHalfStitch = (dr["OutHouseHalfStitch"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OutHouseHalfStitch"]);
                Production.LinePlanning_StitchQty = (dr["LinePlanning_StitchQty"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["LinePlanning_StitchQty"]);
                lst.Add(Production);
            }
            return lst;


        }

        protected List<MOOrderDetails.AccessoriesDetails> GetAccessoriesDetailsTable(DataTable dt, int orderDetailID, double Quantity, bool IsShiped, DateTime Bihdate, bool IsNamePermission, bool IsRecdPermission, bool AccessoriesETAPermission)
        {

            List<MOOrderDetails.AccessoriesDetails> lst = new List<MOOrderDetails.AccessoriesDetails>();
            foreach (DataRow dr in dt.Rows)
            {
                MOOrderDetails.AccessoriesDetails Access = new MOOrderDetails.AccessoriesDetails();
                Access.OrderId = dr["OrderID"] == DBNull.Value ? 0 : Convert.ToInt32(dr["OrderID"]);
                Access.IsOldOrder = dr["IsOldOrder"] == DBNull.Value ? 0 : Convert.ToInt32(dr["IsOldOrder"]);
                Access.OrderDetailsID = dr["Orderdetailid"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Orderdetailid"]);
                Access.AccessoryMasterId = dr["AccessoryMaster_Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["AccessoryMaster_Id"]);
                Access.AccessoryWorkingDetailID = dr["AccessoryWorkingDetailID"] == DBNull.Value ? 0 : Convert.ToInt32(dr["AccessoryWorkingDetailID"]);
                Access.AccessoriesName = dr["AccessoryName"] == DBNull.Value ? "" : Convert.ToString(dr["AccessoryName"]);
                Access.Size = dr["Size"] == DBNull.Value ? "" : Convert.ToString(dr["Size"]);
                Access.Color_Print = dr["Color_Print"] == DBNull.Value ? "" : Convert.ToString(dr["Color_Print"]);
                Access.OrderDetailWorkingDetailID = dr["OrderDetailWorkingDetailID"] == DBNull.Value ? 0 : Convert.ToInt32(dr["OrderDetailWorkingDetailID"]);
                Access.Griege_Finish_Stage = dr["Griege_Finish_Stage"] == DBNull.Value ? "" : Convert.ToString(dr["Griege_Finish_Stage"]);
                Access.Griege_Finish_Stage_tooltip = dr["Griege_Finish_Stage_tooltip"] == DBNull.Value ? "" : Convert.ToString(dr["Griege_Finish_Stage_tooltip"]);
                Access.Process_Stage = dr["Process_Stage"] == DBNull.Value ? "" : Convert.ToString(dr["Process_Stage"]);
                Access.Process_Stage_tooltip = dr["Process_Stage_tooltip"] == DBNull.Value ? "" : Convert.ToString(dr["Process_Stage_tooltip"]);
                Access.Inhouse_Percent = dr["Inhouse_Percent"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Inhouse_Percent"]);
                Access.PoOrder_Date = (dr["PoOrder_Date"] != DBNull.Value) ? Convert.ToDateTime(dr["PoOrder_Date"]) : DateTime.MinValue;
                Access.SRVReceivedQty = dr["SRVReceivedQty"] == DBNull.Value ? 0 : Convert.ToInt32(dr["SRVReceivedQty"]);
                Access.IssuedQty = dr["IssuedQty"] == DBNull.Value ? 0 : Convert.ToInt32(dr["IssuedQty"]);
                Access.TotalQuantity = dr["TotalQty"] == DBNull.Value ? 0 : Convert.ToInt32(dr["TotalQty"]);
                Access.SrvEndEta_Date = (dr["SrvEndEta_Date"] != DBNull.Value) ? Convert.ToDateTime(dr["SrvEndEta_Date"]) : DateTime.MinValue;
                Access.AccessoryPending_OrderId = dr["AccessoryPending_Orders_Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["AccessoryPending_Orders_Id"]);
                Access.Stage1 = dr["Stage1"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Stage1"]);
                Access.GarmentUnit = dr["GarmentUnit"] == DBNull.Value ? "" : Convert.ToString(dr["GarmentUnit"]);
                Access.IsExcludeFromBIH = (dr["IsExcludeFromBIH"] != DBNull.Value) ? Convert.ToBoolean(dr["IsExcludeFromBIH"]) : false;

                Access.AccessPercentInhouseBackColor = GetAccessPercentInhouseBackColor(Access.Inhouse_Percent, IsShiped, IsRecdPermission);
                Access.AccessPercentInhouseForColor = GetAccessPercentInhouseForeColor(Access.Inhouse_Percent, IsShiped);
                Access.AccessETABackColor = GetAccessETABackColor(Access.SrvEndEta_Date, Access.Inhouse_Percent, IsShiped, Bihdate, AccessoriesETAPermission);
                Access.AccessETAForColor = GetAccessETAForColor(Access.SrvEndEta_Date, Access.Inhouse_Percent, IsShiped, Bihdate);
                Access.AccessNameBackColor = GetAccessNameBackColor(Access.Inhouse_Percent, IsShiped, Bihdate, IsNamePermission);
                Access.AccessNameForColor = GetAccessNameForColor(Access.Inhouse_Percent, IsShiped, Bihdate);
                Access.AccessPrintForColor = GetAccessPrintColor(Access.Inhouse_Percent, IsShiped);

                //double TotalSum = (dtTotalQuantity.Rows[0]["TotalSum"] == DBNull.Value) ? 0.0 : Convert.ToDouble(dtTotalQuantity.Rows[0]["TotalSum"]);
                //// Access.ApprovalDate = (dr["ApprovedDate"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedDate"]) : DateTime.MinValue;
                //Access.AccessoryWorkingDetailID = dr["Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Id"]);
                //Access.TotalQuantity = dr["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Quantity"]);
                //Access.ApprovedByAccessoryManager = dr["ApprovedByAccessoryManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccessoryManager"]);
                //Access.ApprovedByAccountManager = dr["ApprovedByAccountManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccountManager"]);
                //Access.ApprovedByAccessoryManagerOn = (dr["ApprovedByAccessoryManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccessoryManagerOn"]) : DateTime.MinValue;
                //Access.ApprovedByAccountManagerOn = (dr["ApprovedByAccountManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccountManagerOn"]) : DateTime.MinValue;
                //Access.AccesoriesETA = (dr["AccesoriesETA"] != DBNull.Value) ? Convert.ToDateTime(dr["AccesoriesETA"]) : DateTime.MinValue;
                //double TotalQuantity = Convert.ToDouble(Access.TotalQuantity);

                //double QuantityRequired = ((Quantity) / TotalSum) * TotalQuantity;
                //if (QuantityRequired == 0)
                //{
                //  QuantityRequired = TotalSum;
                //}
                ////Access.Required = Math.Round(QuantityRequired).ToString();
                //Access.Required = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:N0}", QuantityRequired);

                //foreach (DataRow dr8 in dtAcc.Rows)
                //{
                //  AccesoriesDetails AccesoriesDetails = new AccesoriesDetails();
                //  AccesoriesDetails.AccesoriesWorkingDetailsID = (dr8["AccessoryWorkingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr8["AccessoryWorkingDetailID"]);
                //  Access.AccessoriesName = Access.AccessoriesName.Replace("'", "");
                //  string strOrderAccID = "accessoryname='" + Access.AccessoriesName + "'";

                //  DataRow[] DataOrderAccID = dtAcc.Select(strOrderAccID); ;
                //  if (DataOrderAccID.Length > 0)
                //  {

                //    DataTable dtTemp = DataOrderAccID.CopyToDataTable();

                //    DataView dv = dtTemp.DefaultView;
                //    dv.Sort = "Date asc";
                //    dtTemp = dv.ToTable();

                //    foreach (DataRow dr21 in dtTemp.Rows)
                //    {              

                //      Access.percentInHouse = dr21["PercentInHouse"] == DBNull.Value ? 0 : Convert.ToInt32(dr21["PercentInHouse"]);
                //      Access.BIHETAAcc = dr21["BIHETAAcc"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(dr21["BIHETAAcc"]);
                //      Access.UpdatedOn = (dr21["Date"] != DBNull.Value) ? Convert.ToDateTime(dr21["Date"]) : DateTime.MinValue;
                //      Access.QuantityAvail = dr21["QuantityAvail"] == DBNull.Value ? "" : Convert.ToString(dr21["QuantityAvail"]);

                //      double QAvail_k = 0;
                //      if (Access.QuantityAvail != "")
                //      {
                //        //Updated By Prabhaker 11-sep-18
                //        QAvail_k = Convert.ToDouble(Convert.ToString(Access.QuantityAvail).Replace(",", ""));
                //        Double lac = 100000, thousand = 1000, crore = 10000000, tenk = 10000, tenl = 1000000, tencr = 100000000;

                //        if (QAvail_k < tenk)
                //        {
                //          double QtyAvail_k = (QAvail_k / thousand);
                //          Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                //        }
                //        else if (QAvail_k >= tenk && QAvail_k < lac)
                //        {
                //          double QtyAvail_k = Math.Round((QAvail_k / thousand), 0);
                //          if (QtyAvail_k < 100)
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "k";
                //          }
                //          else
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "lc";
                //          }
                //        }
                //        else if (QAvail_k >= lac && QAvail_k < tenl)
                //        {
                //          double QtyAvail_k = Math.Round((QAvail_k / lac), 1);
                //          Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "lc";

                //        }
                //        else if (QAvail_k >= tenl && QAvail_k < crore)
                //        {
                //          double QtyAvail_k = Math.Round((QAvail_k / lac), 0);
                //          if (QtyAvail_k < 100)
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "lc";
                //          }
                //          else
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                //          }

                //        }
                //        else if (QAvail_k >= crore && QAvail_k < tencr)
                //        {
                //          double QtyAvail_k = Math.Round((QAvail_k / crore), 1);
                //          Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "cr";

                //        }
                //        else
                //        {
                //          double QtyAvail_k = Math.Round((QAvail_k / crore), 0);
                //          if (QtyAvail_k < 100)
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                //          }
                //          else
                //          {
                //            Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                //          }

                //        }

                //      }
                //      if (Access.QuantityAvail != "")
                //        if (Access.Required != "0")
                //          Access.percentInHouse = Convert.ToInt32(Convert.ToDecimal(Access.QuantityAvail.Replace(",", "")) * 100 / Convert.ToDecimal(Access.Required.Replace(",", "")));
                //    }
                //  }
                //  else
                //  {            
                //    Access.percentInHouse = 0;
                //    Access.BIHETAAcc = DateTime.MinValue;
                //    Access.UpdatedOn = DateTime.MinValue;
                //    Access.QuantityAvail = "";
                //  }
                //}
                //      
                //Access.AccessCaptionForColor = GetAccessCaptionForColor(Access.percentInHouse, IsShiped);

                lst.Add(Access);
            }
            return lst;


        }

        protected List<MOOrderDetails.AccessoriesDetails> GetAccessoriesDetailsTableOld(DataTable dt, int orderDetailID, DataTable dtAcc, DataTable dtTotalQuantity, double Quantity, bool IsShiped, DateTime Bihdate, bool IsNamePermission, bool IsRecdPermission, bool AccessoriesETAPermission)
        {

            List<MOOrderDetails.AccessoriesDetails> lst = new List<MOOrderDetails.AccessoriesDetails>();
            foreach (DataRow dr in dt.Rows)
            {
                MOOrderDetails.AccessoriesDetails Access = new MOOrderDetails.AccessoriesDetails();

                Access.AccessoriesName = dr["AccessoryName"] == DBNull.Value ? "" : Convert.ToString(dr["AccessoryName"]);
                double TotalSum = (dtTotalQuantity.Rows[0]["TotalSum"] == DBNull.Value) ? 0.0 : Convert.ToDouble(dtTotalQuantity.Rows[0]["TotalSum"]);
                Access.AccessoryWorkingDetailID = dr["Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Id"]);
                Access.TotalQuantity = dr["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Quantity"]);
                Access.ApprovedByAccessoryManager = dr["ApprovedByAccessoryManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccessoryManager"]);
                Access.ApprovedByAccountManager = dr["ApprovedByAccountManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccountManager"]);
                Access.ApprovedByAccessoryManagerOn = (dr["ApprovedByAccessoryManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccessoryManagerOn"]) : DateTime.MinValue;
                Access.ApprovedByAccountManagerOn = (dr["ApprovedByAccountManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccountManagerOn"]) : DateTime.MinValue;
                Access.AccesoriesETA = (dr["AccesoriesETA"] != DBNull.Value) ? Convert.ToDateTime(dr["AccesoriesETA"]) : DateTime.MinValue;
                double TotalQuantity = Convert.ToDouble(Access.TotalQuantity);

                double QuantityRequired = ((Quantity) / TotalSum) * TotalQuantity;
                if (QuantityRequired == 0)
                {
                    QuantityRequired = TotalSum;
                }

                Access.Required = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:N0}", QuantityRequired);

                foreach (DataRow dr8 in dtAcc.Rows)
                {
                    AccesoriesDetails AccesoriesDetails = new AccesoriesDetails();
                    AccesoriesDetails.AccesoriesWorkingDetailsID = (dr8["AccessoryWorkingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr8["AccessoryWorkingDetailID"]);
                    Access.AccessoriesName = Access.AccessoriesName.Replace("'", "");
                    string strOrderAccID = "accessoryname='" + Access.AccessoriesName + "'";

                    DataRow[] DataOrderAccID = dtAcc.Select(strOrderAccID); ;
                    if (DataOrderAccID.Length > 0)
                    {
                        DataTable dtTemp = DataOrderAccID.CopyToDataTable();
                        DataView dv = dtTemp.DefaultView;
                        dv.Sort = "Date asc";
                        dtTemp = dv.ToTable();

                        foreach (DataRow dr21 in dtTemp.Rows)
                        {

                            Access.percentInHouse = dr21["PercentInHouse"] == DBNull.Value ? 0 : Convert.ToInt32(dr21["PercentInHouse"]);
                            Access.BIHETAAcc = dr21["BIHETAAcc"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(dr21["BIHETAAcc"]);
                            Access.UpdatedOn = (dr21["Date"] != DBNull.Value) ? Convert.ToDateTime(dr21["Date"]) : DateTime.MinValue;
                            Access.QuantityAvail = dr21["QuantityAvail"] == DBNull.Value ? "" : Convert.ToString(dr21["QuantityAvail"]);

                            double QAvail_k = 0;
                            if (Access.QuantityAvail != "")
                            {
                                //Updated By Prabhaker 11-sep-18
                                QAvail_k = Convert.ToDouble(Convert.ToString(Access.QuantityAvail).Replace(",", ""));
                                Double lac = 100000, thousand = 1000, crore = 10000000, tenk = 10000, tenl = 1000000, tencr = 100000000;

                                if (QAvail_k < tenk)
                                {
                                    double QtyAvail_k = (QAvail_k / thousand);
                                    Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                                }
                                else if (QAvail_k >= tenk && QAvail_k < lac)
                                {
                                    double QtyAvail_k = Math.Round((QAvail_k / thousand), 0);
                                    if (QtyAvail_k < 100)
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "k";
                                    }
                                    else
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "lc";
                                    }
                                }
                                else if (QAvail_k >= lac && QAvail_k < tenl)
                                {
                                    double QtyAvail_k = Math.Round((QAvail_k / lac), 1);
                                    Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "lc";

                                }
                                else if (QAvail_k >= tenl && QAvail_k < crore)
                                {
                                    double QtyAvail_k = Math.Round((QAvail_k / lac), 0);
                                    if (QtyAvail_k < 100)
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "lc";
                                    }
                                    else
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                                    }

                                }
                                else if (QAvail_k >= crore && QAvail_k < tencr)
                                {
                                    double QtyAvail_k = Math.Round((QAvail_k / crore), 1);
                                    Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "cr";

                                }
                                else
                                {
                                    double QtyAvail_k = Math.Round((QAvail_k / crore), 0);
                                    if (QtyAvail_k < 100)
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                                    }
                                    else
                                    {
                                        Access.QnAvail_k = Math.Round((QtyAvail_k / 100), 0, MidpointRounding.AwayFromZero).ToString() + "cr";
                                    }
                                }
                            }

                            if (Access.QuantityAvail != "")
                                if (Access.Required != "0")
                                    Access.percentInHouse = Convert.ToInt32(Convert.ToDecimal(Access.QuantityAvail.Replace(",", "")) * 100 / Convert.ToDecimal(Access.Required.Replace(",", "")));

                        }
                    }
                    else
                    {
                        Access.percentInHouse = 0;
                        Access.BIHETAAcc = DateTime.MinValue;
                        Access.UpdatedOn = DateTime.MinValue;
                        Access.QuantityAvail = "";
                    }

                }
                Access.AccessETABackColor = GetAccessETABackColor(Access.BIHETAAcc, Access.percentInHouse, IsShiped, Bihdate, AccessoriesETAPermission);
                Access.AccessETAForColor = GetAccessETAForColor(Access.BIHETAAcc, Access.percentInHouse, IsShiped, Bihdate);
                Access.AccessNameBackColor = GetAccessNameBackColor(Access.percentInHouse, IsShiped, Bihdate, IsNamePermission);
                Access.AccessNameForColor = GetAccessNameForColor(Access.percentInHouse, IsShiped, Bihdate);
                Access.AccessPercentInhouseBackColor = GetAccessPercentInhouseBackColor(Access.percentInHouse, IsShiped, IsRecdPermission);
                Access.AccessPercentInhouseForColor = GetAccessPercentInhouseForeColor(Access.percentInHouse, IsShiped);
                Access.AccessCaptionForColor = GetAccessCaptionForColor(Access.percentInHouse, IsShiped);

                lst.Add(Access);
            }
            return lst;
        }

        protected List<MOOrderDetails.AccessoriesDetails> GetAccessoriesDetailsTableForNoPercent(DataTable dt, DataTable dtTotalQuantity, double Quantity, bool IsShiped, DateTime Bihdate, bool IsNamePermission, bool IsRecdPermission, bool AccessoriesETAPermission)
        {

            List<MOOrderDetails.AccessoriesDetails> lst = new List<MOOrderDetails.AccessoriesDetails>();
            foreach (DataRow dr in dt.Rows)
            {
                MOOrderDetails.AccessoriesDetails Access = new MOOrderDetails.AccessoriesDetails();

                // Access.OrderDetailsID = dr["OrderDetailID"] == DBNull.Value ? 0 : Convert.ToInt32(dr["OrderDetailID"]);
                Access.AccessoriesName = dr["AccessoryName"] == DBNull.Value ? "" : Convert.ToString(dr["AccessoryName"]);
                double TotalSum = (dtTotalQuantity.Rows[0]["TotalSum"] == DBNull.Value) ? 0.0 : Convert.ToDouble(dtTotalQuantity.Rows[0]["TotalSum"]);
                Access.TotalQuantity = dr["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Quantity"]);
                //  Access.ApprovalDate = DateTime.MinValue;
                Access.AccessoryWorkingDetailID = dr["Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Id"]);
                Access.ApprovedByAccessoryManager = dr["ApprovedByAccessoryManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccessoryManager"]);
                Access.ApprovedByAccountManager = dr["ApprovedByAccountManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccountManager"]);
                Access.ApprovedByAccessoryManagerOn = (dr["ApprovedByAccessoryManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccessoryManagerOn"]) : DateTime.MinValue;
                Access.ApprovedByAccountManagerOn = (dr["ApprovedByAccountManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccountManagerOn"]) : DateTime.MinValue;
                Access.AccesoriesETA = (dr["AccesoriesETA"] != DBNull.Value) ? Convert.ToDateTime(dr["AccesoriesETA"]) : DateTime.MinValue;
                double TotalQuantity = Convert.ToDouble(Access.TotalQuantity);
                double QuantityRequired = ((Quantity) / TotalSum) * TotalQuantity;
                if (QuantityRequired == 0)
                {
                    QuantityRequired = TotalSum;
                }
                //Access.Required = Math.Round(QuantityRequired).ToString();
                Access.Required = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:N0}", QuantityRequired);
                // Access.TotalQuantity = 0;
                // Access.Required = string.Empty;

                Access.percentInHouse = 0;
                Access.UpdatedOn = DateTime.MinValue;
                Access.QuantityAvail = "";

                double QAvail_k = 0;
                if (Access.QuantityAvail != "")
                {
                    QAvail_k = Convert.ToDouble(Convert.ToString(Access.QuantityAvail).Replace(",", ""));

                    double QtyAvail_k = (QAvail_k / 1000);
                    Access.QnAvail_k = Math.Round((QtyAvail_k), 1, MidpointRounding.AwayFromZero).ToString() + "k";
                }

                Access.AccessETABackColor = GetAccessETABackColor(Access.AccesoriesETA, Access.percentInHouse, IsShiped, Bihdate, AccessoriesETAPermission);
                Access.AccessETAForColor = GetAccessETAForColor(Access.AccesoriesETA, Access.percentInHouse, IsShiped, Bihdate);
                Access.AccessNameBackColor = GetAccessNameBackColor(Access.percentInHouse, IsShiped, Bihdate, IsNamePermission);
                Access.AccessNameForColor = GetAccessNameForColor(Access.percentInHouse, IsShiped, Bihdate);
                Access.AccessPercentInhouseBackColor = GetAccessPercentInhouseBackColor(Access.percentInHouse, IsShiped, IsRecdPermission);
                Access.AccessPercentInhouseForColor = GetAccessPercentInhouseForeColor(Access.percentInHouse, IsShiped);
                Access.AccessCaptionForColor = GetAccessCaptionForColor(Access.percentInHouse, IsShiped);

                lst.Add(Access);
            }
            return lst;
        }

        //Added By Ashish on 24/2/2015 function for return ColorCode
        public static string GetAccessCaptionForColor(int Percent, bool isShiped)
        {
            string StrForColorCode = string.Empty;
            if (isShiped == true)
            {
                StrForColorCode = "#807F80";
            }
            else
            {
                if (Percent <= 99.9)
                {
                    StrForColorCode = "#000000";
                }
                else
                {
                    StrForColorCode = "#807F80";
                }
            }

            return StrForColorCode;
        }

        public static string GetAccessNameBackColor(int Percent, bool isShiped, DateTime Bihdate, bool IsNamePermission)
        {
            string StrBackColorCode = string.Empty;
            if (IsNamePermission == true)
            {
                if (isShiped == true)
                {
                    StrBackColorCode = "#F9F9FA";
                }
                else
                {
                    if ((Percent == 0) && (Bihdate >= DateTime.Now.Date))
                    {
                        StrBackColorCode = "#FFFFFF";
                    }
                    else if (Percent <= 99.9)
                    {
                        StrBackColorCode = "#FDFD96"; //update color code 22-feb 
                    }
                    else
                    {
                        StrBackColorCode = "#FFFFFF";
                    }
                }
            }
            else
            {
                StrBackColorCode = "#FFFFFF";
            }
            return StrBackColorCode;
        }

        public static string GetAccessNameForColor(int Percent, bool isShiped, DateTime Bihdate)
        {
            string StrBackColorCode = string.Empty;
            if (isShiped == true)
            {
                StrBackColorCode = "#807F80";
            }
            else
            {

                if (Percent <= 99.9 && (Bihdate < DateTime.Now.Date))
                {
                    StrBackColorCode = "#FF3300";
                }
                //if (((Percent == 0) && (Bihdate >= DateTime.Now.Date)))
                //{
                //    StrBackColorCode = "#0000ff";
                //}
                //else if (Percent <= 99.9 && (Bihdate >= DateTime.Now.Date))
                //{
                //    StrBackColorCode = "#FF3300";
                //}
                else
                {
                    //StrBackColorCode = "#0000ff";
                    StrBackColorCode = "#0000ff";

                }
            }
            return StrBackColorCode;
        }
        public static string GetAccessPrintColor(int Percent, bool isShiped)
        {
            string StrBackColorCode = string.Empty;
            if (isShiped == true)
            {
                StrBackColorCode = "#807F80";
            }
            else
            {
                if (Percent <= 99.9)
                {
                    StrBackColorCode = "#000000";
                }
                else
                {
                    StrBackColorCode = "#807F80";
                }
                //if (((Percent == 0) && (Bihdate >= DateTime.Now.Date)))
                //{
                //    StrBackColorCode = "#0000ff";
                //}
                //else if (Percent <= 99.9)
                //{
                //    StrBackColorCode = "#FF3300";
                //}
                //else
                //{
                //    StrBackColorCode = "#0000ff";
                //}
            }
            return StrBackColorCode;
        }

        public static string GetAccessETABackColor(DateTime ETA, int Percent, bool isShiped, DateTime bihdate, bool AccessoriesETAPermission)
        {
            string StrBackColorCode = string.Empty;
            if (AccessoriesETAPermission == true)
            {
                if (isShiped == true)
                {
                    StrBackColorCode = "#F9F9FA";
                }
                else
                {
                    if (Percent <= 99.9)
                    {
                        if (ETA.Date < DateTime.Now.Date && ETA.Date != DateTime.MinValue)
                        {
                            StrBackColorCode = "#FDFD96";
                        }
                        else if (ETA.Date > DateTime.Now.Date && ETA.Date != DateTime.MinValue)
                        {
                            StrBackColorCode = "#FFFFFF";
                        }
                        else if (ETA.Date == DateTime.Now.Date)
                        {
                            StrBackColorCode = "#FFFFFF";
                        }
                        else if ((ETA.Date == DateTime.MinValue) && (bihdate >= DateTime.Now.Date))
                        {
                            StrBackColorCode = "#FFFFFF";
                        }
                        else
                        {
                            StrBackColorCode = "#FDFD96";
                        }
                    }
                    else
                    {
                        //StrBackColorCode = "#d7e4bc";
                        StrBackColorCode = "#FFFFFF";
                    }
                }
            }
            else
            {
                StrBackColorCode = "#FFFFFF";
            }
            return StrBackColorCode;
        }

        public static string GetAccessETAForColor(DateTime ETA, int Percent, bool isShiped, DateTime bihdate)
        {
            string StrForColorCode = string.Empty;
            if (isShiped == true)
            {
                StrForColorCode = "#807F80";
            }
            else
            {
                if (Percent <= 99.9)
                {
                    if (ETA.Date < DateTime.Now.Date && ETA.Date != DateTime.MinValue)
                    {
                        StrForColorCode = "#FF3300";
                    }
                    else if (ETA.Date > DateTime.Now.Date && ETA.Date != DateTime.MinValue)
                    {
                        StrForColorCode = "#000000";
                    }
                    else if (ETA.Date == DateTime.Now.Date)
                    {
                        StrForColorCode = "#000000";
                    }
                    else if ((ETA.Date == DateTime.MinValue) && (bihdate >= DateTime.Now.Date))
                    {
                        StrForColorCode = "#00000";
                    }
                    //else if (ETA.Date == DateTime.MinValue)
                    //{
                    //    StrForColorCode = "#FF3300";
                    //}
                    else
                    {
                        StrForColorCode = "#FF3300";
                    }

                }
                else
                {
                    StrForColorCode = "#807F80";
                }
            }
            return StrForColorCode;
        }
        //Added By Prabhaker on 08/08/2017 function for return ColorCode
        public static string GetAccessPercentInhouseBackColor(int Percent, bool isShiped, bool IsRecdPermission)
        {
            string StrBackColorCode = string.Empty;
            if (IsRecdPermission == true)
            {
                if (isShiped == true)
                {
                    StrBackColorCode = "#F9F9FA";
                }
                else
                {
                    if (Percent == 0)
                    {
                        StrBackColorCode = "#FFFFFF";
                    }
                    else if (Percent >= 0.1 && Percent <= 89.99)
                    {
                        StrBackColorCode = "#FDFD96";
                    }
                    else if (Percent >= 89.99 && Percent <= 99.99)
                    {
                        StrBackColorCode = "#FFA500";
                    }
                    else if (Percent >= 100 && Percent <= 105)
                    {
                        StrBackColorCode = "#d7e4bc";
                    }
                    else if (Percent > 105)
                    {
                        StrBackColorCode = "#C24641";
                    }
                    else
                    {
                        StrBackColorCode = "#FFFFFF";
                    }
                }
            }
            else
            {
                StrBackColorCode = "#FFFFFF";
            }
            return StrBackColorCode;
        }
        //Added By Prabhaker on 08/08/2017 function for return ColorCode
        public static string GetAccessPercentInhouseForeColor(int Percent, bool isShiped)
        {
            string StrBackColorCode = string.Empty;
            if (isShiped == true)
            {
                StrBackColorCode = "#807F80";
            }
            else
            {
                if (Percent == 0)
                {
                    StrBackColorCode = "#000000";
                }
                else if (Percent >= 0.1 && Percent <= 89.99)
                {
                    StrBackColorCode = "#807F80";
                }
                else if (Percent >= 89.99 && Percent <= 99.99)
                {
                    StrBackColorCode = "#000000";
                }
                else if (Percent >= 100 && Percent <= 105)
                {
                    StrBackColorCode = "#807F80";
                }

                else if (Percent > 105)
                {
                    StrBackColorCode = "white";

                }
                else
                {
                    StrBackColorCode = "#000000";
                }
            }

            return StrBackColorCode;
        }

        //END

        public List<MoShippingDetail> GetMoShippingInfo(int styleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                List<MoShippingDetail> orderDetailCollection = new List<MoShippingDetail>();

                try
                {
                    string cmdText = "sp_orders_get_serial_quantity_by_styleid";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = styleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                MoShippingDetail orderDetail = new MoShippingDetail();
                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);
                                orderDetail.ModeName = (dr["ModeName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ModeName"]);
                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                orderDetail.PlannedEx = (dr["PlannedEx"] != DBNull.Value) ? Convert.ToDateTime(dr["PlannedEx"]) : DateTime.MinValue;
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);

                                orderDetail.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["Quantity"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.Fabric1Detail = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.PcdDate = (dr["PCD"] != DBNull.Value) ? Convert.ToDateTime(dr["PCD"]) : DateTime.MinValue;


                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }

        public List<OrderDetail> GetOrdersBasicInfoMoEmail(string searchText, DateTime FromDate, DateTime ToDate, int ClientID, int DateType, int UserId, int StatusMode, int StatusModeSequence, int OrderBy1, int OrderBy2, int OrderBy3, int OrderBy4)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                try
                {
                    string cmdText = "sp_orders_get_orders_basic_info_MoEmail";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    DataSet dsorderDetail = new DataSet();
                    SqlParameter param;

                    param = new SqlParameter("@searchText", SqlDbType.VarChar);
                    param.Value = searchText;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@FromDate", SqlDbType.DateTime);
                    if (FromDate != DateTime.MinValue)
                    {
                        param.Value = FromDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ToDate", SqlDbType.DateTime);
                    if (ToDate != DateTime.MinValue)
                    {
                        param.Value = ToDate;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DateType", SqlDbType.Int);
                    param.Value = DateType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusMode", SqlDbType.Int);
                    param.Value = StatusMode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeSequence", SqlDbType.Int);
                    param.Value = StatusModeSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy1", SqlDbType.Int);
                    param.Value = OrderBy1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy2", SqlDbType.Int);
                    param.Value = OrderBy2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@OrderBy3", SqlDbType.Int);
                    param.Value = OrderBy3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderBy4", SqlDbType.Int);
                    param.Value = OrderBy4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        DataTable dt1 = dsorderDetail.Tables[1];
                        DataTable dt2 = dsorderDetail.Tables[2];

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                OrderDetail orderDetail = new OrderDetail();
                                orderDetail.OrderDetailID = Convert.ToInt32(dr["Id"]);
                                orderDetail.LineItemNumber = (dr["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LineItemNumber"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.Description = (dr["OrderDescription"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["OrderDescription"]);

                                orderDetail.Quantity = Convert.ToInt32(dr["Quantity"]);
                                orderDetail.Fabric1Quantity = dr["Fabric1Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric1Quantity"]);
                                orderDetail.Fabric2Quantity = dr["Fabric2Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric2Quantity"]);
                                orderDetail.Fabric3Quantity = dr["Fabric3Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric3Quantity"]);
                                orderDetail.Fabric4Quantity = dr["Fabric4Quantity"] == DBNull.Value ? 0 : Convert.ToDouble(dr["Fabric4Quantity"]);
                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);
                                orderDetail.MDANumber = (dr["MDA"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["MDA"]);
                                orderDetail.ModeName = (dr["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Code"]);
                                orderDetail.iKandiPrice = Convert.ToDouble(dr["iKandiPrice"]);
                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                // orderDetail.PlannedEx = (dr["PlannedEx"] != DBNull.Value) ? Convert.ToDateTime(dr["PlannedEx"]) : DateTime.MinValue;
                                orderDetail.StitchingETA = (dr["StitchingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StitchingETA"]) : DateTime.MinValue;
                                orderDetail.WeekToEx = Convert.ToInt32(dr["WeekToEx"]);
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.WeeksToDC = Convert.ToInt32(dr["WeeksToDC"]);
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);
                                string SanjeevRemarks = dr["SanjeevRemarks"].ToString();
                                orderDetail.SanjeevRemarks = SanjeevRemarks;
                                string MerchantNotes = dr["MerchantNotes"].ToString();
                                orderDetail.MerchantNotes = MerchantNotes;
                                orderDetail.STCUnallocated = (dr["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(dr["STCUnallocated"]) : DateTime.MinValue;
                                orderDetail.AllocationDate = (dr["AllocationDate"] != DBNull.Value) ? Convert.ToDateTime(dr["AllocationDate"]) : DateTime.MinValue;
                                orderDetail.ProductionUnitId = (dr["UnitID"] != DBNull.Value) ? Convert.ToInt32(dr["UnitID"]) : 0;
                                orderDetail.IsAllocated = (dr["IsAllocated"] != DBNull.Value) ? Convert.ToBoolean(dr["IsAllocated"]) : false;
                                orderDetail.CuttingETA = (dr["CuttingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingETA"]) : DateTime.MinValue;
                                orderDetail.PackingETA = (dr["PackingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["PackingETA"]) : DateTime.MinValue;
                                orderDetail.StitchingETA = (dr["StitchingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StitchingETA"]) : DateTime.MinValue;
                                orderDetail.BulkTarget = (dr["BulkTarget"] != DBNull.Value) ? Convert.ToDateTime(dr["BulkTarget"]) : DateTime.MinValue;

                                orderDetail.ParentOrder = new Order();
                                orderDetail.ParentOrder.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.ParentOrder.OrderDate = Convert.ToDateTime(dr["OrderDate"]);
                                orderDetail.ParentOrder.BiplPrice = (dr["BIPLPrice"] == DBNull.Value) ? -1 : Convert.ToDouble(dr["BIPLPrice"]);
                                orderDetail.ParentOrder.Comments = (dr["Comments"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Comments"]);

                                orderDetail.ParentOrder.Style = new Style();
                                orderDetail.ParentOrder.Style.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.ParentOrder.Style.StyleID = Convert.ToInt32(dr["StyleID"]);
                                orderDetail.ParentOrder.Style.SampleImageURL1 = (dr["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL1"]);
                                orderDetail.ParentOrder.Style.SampleImageURL2 = (dr["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL2"]);
                                orderDetail.ParentOrder.Style.SampleImageURL3 = (dr["SampleImageURL3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL3"]);
                                orderDetail.ParentOrder.Style.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);

                                orderDetail.ParentOrder.Style.client = new Client();
                                orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(dr["ClientID"]);
                                orderDetail.ParentOrder.Style.client.IsMDARequired = (dr["IsMDARequired"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["IsMDARequired"]);

                                orderDetail.ParentOrder.Style.cdept = new ClientDepartment();
                                orderDetail.ParentOrder.Style.cdept.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Style.cdept.DeptID = (dr["ClientDepartmentID"] != DBNull.Value) ? Convert.ToInt32(dr["ClientDepartmentID"]) : 0;
                                orderDetail.ParentOrder.Style.cdept.Mon = (dr["Mon"] != DBNull.Value) ? Convert.ToInt32(dr["Mon"]) : 0;
                                orderDetail.ParentOrder.Style.cdept.Tue = (dr["Tue"] != DBNull.Value) ? Convert.ToInt32(dr["Tue"]) : 0;
                                orderDetail.ParentOrder.Style.cdept.Wed = (dr["Wed"] != DBNull.Value) ? Convert.ToInt32(dr["Wed"]) : 0;
                                orderDetail.ParentOrder.Style.cdept.Thu = (dr["Thu"] != DBNull.Value) ? Convert.ToInt32(dr["Thu"]) : 0;
                                orderDetail.ParentOrder.Style.cdept.Fri = (dr["Fri"] != DBNull.Value) ? Convert.ToInt32(dr["Fri"]) : 0;

                                orderDetail.Unit = new ProductionUnit();
                                orderDetail.Unit.ProductionUnitId = (dr["ProductionUnitId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitID"]);
                                orderDetail.Unit.FactoryName = (dr["FactoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryName"]);
                                orderDetail.Unit.FactoryCode = (dr["FactoryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryCode"]);

                                orderDetail.ParentOrder.Costing = new Costing();
                                orderDetail.ParentOrder.Costing.CostingID = (dr["CostingId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CostingId"]);
                                orderDetail.ParentOrder.Costing.ConvertTo = (dr["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["ConvertTo"]);

                                orderDetail.ParentOrder.WorkflowInstanceDetail = new WorkflowInstanceDetail();
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusMode = (dr["StatusMode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StatusMode"]);
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeID = (dr["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StatusModeID"]);// Add this

                                orderDetail.ParentOrder.CuttingHistory = new CuttingHistory();
                                orderDetail.ParentOrder.CuttingHistory.PercentagePcsCut = 0;
                                orderDetail.ParentOrder.CuttingHistory.PcsCut = (dr["PcsCut"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PcsCut"]);
                                if (orderDetail.Quantity > 0)
                                {
                                    orderDetail.ParentOrder.CuttingHistory.PercentagePcsCut = (int)Math.Round((orderDetail.ParentOrder.CuttingHistory.PcsCut * 100) / orderDetail.Quantity);
                                }

                                orderDetail.ParentOrder.StitchingDetail = new StitchingDetail();
                                orderDetail.ParentOrder.StitchingDetail.OverallPcsStitched = (dr["PcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PcsStitched"]);
                                orderDetail.ParentOrder.StitchingDetail.OverallPcsPacked = (dr["PcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PcsPacked"]);
                                orderDetail.ParentOrder.StitchingDetail.ProdRemarks = (dr["ProdRemarks"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ProdRemarks"]);
                                orderDetail.ParentOrder.StitchingDetail.PercentageOverallPcsStitched = 0;
                                orderDetail.ParentOrder.StitchingDetail.PercentageOverallPcsPacked = 0;

                                if (orderDetail.Quantity > 0)
                                {
                                    orderDetail.ParentOrder.StitchingDetail.PercentageOverallPcsStitched = (int)Math.Round((orderDetail.ParentOrder.StitchingDetail.OverallPcsStitched * 100) / orderDetail.Quantity);
                                    orderDetail.ParentOrder.StitchingDetail.PercentageOverallPcsPacked = (int)Math.Round((orderDetail.ParentOrder.StitchingDetail.OverallPcsPacked * 100) / orderDetail.Quantity);
                                }

                                orderDetail.ParentOrder.InlinePPMOrderContract = new InlinePPMOrderContract(); // to get top send target and top send actual
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget = (dr["TopSentTarget"] == DBNull.Value) ? orderDetail.StitchingETA : Convert.ToDateTime(dr["TopSentTarget"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual = (dr["TopSentActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopSentActual"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval = (dr["TopActualApproval"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopActualApproval"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus = (dr["TopStatus"] == DBNull.Value) ? TopStatusType.UNKNOWN : (TopStatusType)Convert.ToInt32(dr["TopStatus"]);

                                orderDetail.ParentOrder.Fits = new Fits();
                                orderDetail.ParentOrder.Fits.StyleCode = (dr["StyleCode"] == DBNull.Value) ? "-1" : Convert.ToString(dr["StyleCode"]);
                                orderDetail.ParentOrder.Fits.IsStcApproved = (dr["StcApproved"] == DBNull.Value) ? false : Convert.ToBoolean(dr["StcApproved"]);
                                orderDetail.ParentOrder.Fits.SealDate = (dr["SealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SealDate"]);
                                orderDetail.ParentOrder.Fits.SpecsUploadTargetDate = (dr["SpecsUploadTargetDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadTargetDate"]);
                                orderDetail.ParentOrder.Fits.SpecsUploadDate = (dr["SpecsUploadDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SpecsUploadDate"]);
                                orderDetail.ParentOrder.Fits.StyleCodeVersion = (dr["StyleCodeVersion"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleCodeVersion"]);
                                //orderDetail.ParentOrder.Fits.Department.TechnologistNames = (dr["TechnologistName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["TechnologistName"]);
                                //orderDetail.ParentOrder.Fits.Department.FITMerchantNames = (dr["FitMerchantName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FitMerchantName"]);
                                orderDetail.ParentOrder.FitsTrack = new FitsTrack();
                                orderDetail.ParentOrder.FitsTrack.CommentsSentFor = (dr["CommentsSentFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["CommentsSentFor"]);
                                orderDetail.ParentOrder.FitsTrack.PlanningFor = (dr["PlanningFor"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["PlanningFor"]);
                                orderDetail.ParentOrder.FitsTrack.fitRequestedOn = (dr["fitRequestedOn"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["fitRequestedOn"]);
                                orderDetail.ParentOrder.FitsTrack.AckDate = (dr["AckDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["AckDate"]);
                                orderDetail.ParentOrder.FitsTrack.NextPlannedDate = (dr["NextPlannedDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["NextPlannedDate"]);
                                orderDetail.ParentOrder.FitsTrack.PlannedDispatchDate = (dr["plannedDispatchDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["plannedDispatchDate"]);
                                orderDetail.ParentOrder.Fits.Department = new ClientDepartment();
                                orderDetail.ParentOrder.Fits.Department.Name = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Fits.Department.DeptID = (dr["ClientDepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["ClientDepartmentID"]);
                                orderDetail.ParentOrder.Fits.Department.TechnologistNames = (dr["TechnologistName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["TechnologistName"]);
                                orderDetail.ParentOrder.Fits.Department.FITMerchantNames = (dr["FITMerchantName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FITMerchantName"]);

                                orderDetail.FitStatus = Constants.GetFitsStatus(orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual, orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.IsStcApproved, orderDetail.ParentOrder.Fits.SealDate,
                                    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus,
                                    orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                                orderDetail.FitStatusBgColor = Constants.GetFitsStatusColor(orderDetail.ExFactory, orderDetail.STCUnallocated, orderDetail.ParentOrder.OrderDate, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget, orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual,
                                                    orderDetail.ParentOrder.InlinePPMOrderContract.TopActualApproval, orderDetail.ParentOrder.Fits.SealDate, orderDetail.ParentOrder.FitsTrack.fitRequestedOn, orderDetail.ParentOrder.FitsTrack.NextPlannedDate, orderDetail.ParentOrder.FitsTrack.AckDate, orderDetail.ParentOrder.Fits.IsStcApproved,
                                                    orderDetail.ParentOrder.FitsTrack.CommentsSentFor, orderDetail.ParentOrder.FitsTrack.PlanningFor, orderDetail.ParentOrder.InlinePPMOrderContract.TopStatus, orderDetail.ParentOrder.Fits.SpecsUploadTargetDate, orderDetail.ParentOrder.Fits.SpecsUploadDate);

                                orderDetail.Fabric1Details = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.Fabric2Details = (dr["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2Details"]);
                                orderDetail.Fabric3Details = (dr["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3Details"]);
                                orderDetail.Fabric4Details = (dr["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4Details"]);

                                var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                    result = 0;
                                }

                                var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                    result = 0;
                                }

                                var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                    result = 0;
                                }

                                var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                    result = 0;
                                }
                                orderDetail.Fabric1 = (dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]);
                                orderDetail.Fabric2 = (dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]);
                                orderDetail.Fabric3 = (dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]);
                                orderDetail.Fabric4 = (dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]);

                                orderDetail.ParentOrder.FabricInhouseHistory = new FabricInhouseHistory();
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = (dr["PercentInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = (dr["PercentInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = (dr["PercentInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = (dr["PercentInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse4"]);

                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate1 = (dr["Date1"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate2 = (dr["Date2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate3 = (dr["Date3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.PercentDate4 = (dr["Date4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["Date4"]);

                                string strx = "OrderDetailID =" + orderDetail.OrderDetailID;
                                DataRow[] DataRows1;
                                DataRows1 = dt1.Select(strx);
                                int F1Status = 0;
                                int F2Status = 0;
                                int F3Status = 0;
                                int F4Status = 0;

                                int F1Stage = 0;
                                int F2Stage = 0;
                                int F3Stage = 0;
                                int F4Stage = 0;

                                DateTime ActionDate1 = DateTime.MinValue;
                                DateTime ActionDate2 = DateTime.MinValue;
                                DateTime ActionDate3 = DateTime.MinValue;
                                DateTime ActionDate4 = DateTime.MinValue;
                                foreach (DataRow dr1 in DataRows1)
                                {
                                    F1Status = (dr1["F1Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F1Status"]) : 0;
                                    F2Status = (dr1["F2Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F2Status"]) : 0;
                                    F3Status = (dr1["F3Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F3Status"]) : 0;
                                    F4Status = (dr1["F4Status"] != DBNull.Value) ? Convert.ToInt32(dr1["F4Status"]) : 0;

                                    F1Stage = (dr1["F1Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F1Stage"]) : 0;
                                    F2Stage = (dr1["F2Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F2Stage"]) : 0;
                                    F3Stage = (dr1["F3Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F3Stage"]) : 0;
                                    F4Stage = (dr1["F4Stage"] != DBNull.Value) ? Convert.ToInt32(dr1["F4Stage"]) : 0;

                                    ActionDate1 = (dr1["ActionDate1"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate1"]) : DateTime.MinValue;
                                    ActionDate2 = (dr1["ActionDate2"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate2"]) : DateTime.MinValue;
                                    ActionDate3 = (dr1["ActionDate3"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate3"]) : DateTime.MinValue;
                                    ActionDate4 = (dr1["ActionDate4"] != DBNull.Value) ? Convert.ToDateTime(dr1["ActionDate4"]) : DateTime.MinValue;

                                }

                                orderDetail.ParentOrder.FabricApprovalDetails = new FabricApprovalDetails();



                                orderDetail.ParentOrder.FabricApprovalDetails.F5BulkStatus = Constants.GetFabricStatus(F1Stage, F1Status, ActionDate1);
                                orderDetail.ParentOrder.FabricApprovalDetails.F6BulkStatus = Constants.GetFabricStatus(F2Stage, F2Status, ActionDate2);
                                orderDetail.ParentOrder.FabricApprovalDetails.F7BulkStatus = Constants.GetFabricStatus(F3Stage, F3Status, ActionDate3);
                                orderDetail.ParentOrder.FabricApprovalDetails.F8BulkStatus = Constants.GetFabricStatus(F4Stage, F4Status, ActionDate4);




                                string strSize = "OrderDetailID =" + orderDetail.OrderDetailID;
                                DataRow[] DataRows2;
                                DataRows2 = dt2.Select(strSize);

                                foreach (DataRow dr2 in DataRows2)
                                {
                                    int quantity = (dr2["TotalQuantity"] != DBNull.Value) ? Convert.ToInt32(dr2["TotalQuantity"]) : 0;
                                    if (quantity > 0)
                                    {
                                        orderDetail.IsSizeFilledUp = true;
                                    }
                                    else
                                        orderDetail.IsSizeFilledUp = false;
                                }

                                orderDetail.IsCuttingFormSaved = (dr["IsCuttingFormSubmitted"] == DBNull.Value || Convert.ToInt32(dr["IsCuttingFormSubmitted"]) == 0) ? false : true;

                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }




        /*ADDED By uday 21-12-2015  */
        public DataSet GetDHUDAYTA(int ProductionID)
        {
            DataSet dsDHUDATA = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "[dbo].[CreateReport_DHUBYyear]";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;





                    ////Edit by Ashish
                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsDHUDATA);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsDHUDATA;
        }

        public DataSet GetDHUDAYTAByStyle(int ProductionID, int linenum)
        {
            DataSet dsDHUDATA = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "[dbo].[Get_StyleWiseAVGANDDHUReportWise]";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;






                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@linenum", SqlDbType.Int);
                    param.Value = linenum;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsDHUDATA);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsDHUDATA;
        }

        public DataSet GetDHUDAYTAByStyleAllFactory(int ProductionID, int linenum)
        {
            DataSet dsDHUDATA = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "[dbo].[Get_StyleWiseAVGANDDHUReportWiseBackup]";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;






                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@linenum", SqlDbType.Int);
                    param.Value = linenum;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsDHUDATA);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsDHUDATA;
        }


        public DataSet GetWeeklyData(int ProductionID)
        {
            DataSet dsDHUDATA = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "[dbo].[CreateReport_DHUBYWeekly&Monthy&Yearly]";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;





                    ////Edit by Ashish
                    param = new SqlParameter("@UNitid", SqlDbType.Int);
                    param.Value = ProductionID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsDHUDATA);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }
            return dsDHUDATA;
        }

        /*ENDED BY uday 21-12-2015 */




        public List<OrderDetail> GetOrdersApprovalBasicInfo(int clientId, string fabric1, int orderid, int styleid, string fabricDetails)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_orders_get_orders_approval_basic_info";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param1 = new SqlParameter("@ClientID", SqlDbType.Int);
                param1.Value = clientId;
                param1.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param1);

                SqlParameter param2 = new SqlParameter("@Fabric1", SqlDbType.VarChar);
                param2.Value = fabric1;
                param2.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param2);

                SqlParameter param3 = new SqlParameter("@OrderID", SqlDbType.Int);
                param3.Value = orderid;
                param3.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param3);


                SqlParameter param4 = new SqlParameter("@FabricDetails", SqlDbType.VarChar);
                param4.Value = fabricDetails;
                param4.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param4);
                /*
                SqlParameter param5 = new SqlParameter("@StyleID", SqlDbType.Int);
                param5.Value = styleid;
                param5.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param5);
                */
                reader = cmd.ExecuteReader();

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetail orderDetail = new OrderDetail();

                        orderDetail.ParentOrder = new Order();
                        orderDetail.ParentOrder.SerialNumber = (reader["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SerialNumber"]);
                        orderDetail.ParentOrder.OrderDate = (reader["OrderDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        orderDetail.ParentOrder.Style = new Style();
                        orderDetail.ParentOrder.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        orderDetail.ParentOrder.Style.DepartmentName = (reader["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DepartmentName"]);

                        orderDetail.Quantity = (reader["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Quantity"]);
                        orderDetail.Fabric1Quantity = (reader["Fabric1Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Fabric1Quantity"]);
                        orderDetail.ExFactory = (reader["ExFactory"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["ExFactory"]);

                        orderDetail.BulkTarget = (reader["BulkTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkTarget"]);
                        orderDetail.LabDipTarget = (reader["LabDipTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["LabDipTarget"]);
                        orderDetail.BulkApprovalTarget = (reader["BulkApprovalTarget"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["BulkApprovalTarget"]);

                        orderDetailCollection.Add(orderDetail);
                    }
                }

                return orderDetailCollection;
            }
        }

        public bool UpdateManageOrderAccessoryWorkingDetails(AccessoryWorking objAccessoryWorking)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                foreach (AccessoryWorkingDetail awd in objAccessoryWorking.AccessoryWorkingDetail)
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_manage_order_update_accessory_working_detail";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@d", SqlDbType.Int);
                    paramIn.Value = awd.Id;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@AccessoryWorkingID", SqlDbType.Int);
                    paramIn.Value = awd.AccessoryWorkingID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@ApprovedDate", SqlDbType.DateTime);
                    paramIn.Value = awd.ApprovedDate;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@CurrentDate", SqlDbType.DateTime);
                    paramIn.Value = awd.CurrentDate;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@nHouseHistory", SqlDbType.VarChar);
                    paramIn.Value = awd.InHouseHistory;
                    cmd.Parameters.Add(paramIn);

                    cmd.ExecuteNonQuery();
                    cnx.Close();
                }
            }
            return true;
        }

        public bool InsertManageOrderAccessoryApprovedDate(AccessoryWorking objAccessoryWorking)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                foreach (AccessoryInHouseHistory awd in objAccessoryWorking.AccessoryHistory)
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_manage_order_insert_accessory_approved_date";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = awd.OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@AccessoryWorkingDetailID", SqlDbType.Int);
                    paramIn.Value = awd.AccessoryWorkingDetailID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@ApprovedDate", SqlDbType.DateTime);
                    paramIn.Value = awd.ApprovedDate;
                    cmd.Parameters.Add(paramIn);

                    cmd.ExecuteNonQuery();
                    cnx.Close();
                }
            }
            return true;
        }










        public bool InsertManageOrderPackingHistory(int OrderDetailID, int PcsPacked, DateTime date)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_packing_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = DateTime.Today;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PcsPacked", SqlDbType.Int);
                paramIn.Value = PcsPacked;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }



        public DataSet GetManageOrderFabricPopupDetails(int OrderDetailID)
        {
            DataSet dsFabricPopupDetails = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_fabric_popup_details";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabricPopupDetails);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFabricPopupDetails;
        }

        public DataSet GetManageOrderFabricPopupGridDetails(int ClientId, string Fabric, int Fabrictype)
        {
            DataSet dsFabricPopupDetails = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_orders_get_fabric_popup_grid_details";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@ClientID", SqlDbType.Int);
                    paramIn.Value = ClientId;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@Fabric", SqlDbType.VarChar);
                    paramIn.Value = Fabric;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@FabricType", SqlDbType.Int);
                    paramIn.Value = Fabrictype;
                    cmd.Parameters.Add(paramIn);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabricPopupDetails);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFabricPopupDetails;
        }

        public DataSet GetManageOrderFabricPopupGridDetails(int ClientId, string Fabric, int Type, string FabricDetails, int OrderID)
        {
            DataSet dsFabricPopupDetails = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_fabric_popup_grid_details";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@ClientID", SqlDbType.Int);
                    paramIn.Value = ClientId;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@Fabric", SqlDbType.VarChar);
                    paramIn.Value = Fabric;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@Type", SqlDbType.Int);
                    paramIn.Value = Type;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@FabricDetails", SqlDbType.VarChar);
                    paramIn.Value = FabricDetails;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                    paramIn.Value = OrderID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabricPopupDetails);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFabricPopupDetails;
        }



        public DataSet GetManageOrderAccessoryPopupDetails(int OrderDetailID)
        {
            DataSet dsAccessoryPopupDetails = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_accessory_popup_details";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsAccessoryPopupDetails);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsAccessoryPopupDetails;
        }

        public DataSet GetManageOrderFabricDates(int OrderDetailID, int OrderID, int ClientID)
        {
            DataSet dsFabricDatesPopup = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_fabric_dates_order";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@OrderID", SqlDbType.Int);
                    paramIn.Value = OrderID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@ClientID", SqlDbType.Int);
                    paramIn.Value = ClientID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabricDatesPopup);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }

            }

            return dsFabricDatesPopup;
        }

        public bool InsertManageOrderFabricInHouseHistory(int OrderDetailID, int FabricType, Double FabricLength, string FabricName, DateTime date, int PercentInHouse)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_fabric_in_house_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricType", SqlDbType.Int);
                paramIn.Value = FabricType;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricLength", SqlDbType.Float);
                paramIn.Value = FabricLength;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricName", SqlDbType.VarChar);
                paramIn.Value = FabricName;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = date;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PercentInHouse", SqlDbType.Int);
                paramIn.Value = PercentInHouse;
                cmd.Parameters.Add(paramIn);

                //paramIn = new SqlParameter("@InhoseQnty", SqlDbType.Float);
                //paramIn.Value = InhouseQnty;
                //cmd.Parameters.Add(paramIn);


                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool InsertManageOrderFabricInHouseHistory_inHouseChecked(int OrderDetailID, int FabricType, string FabricName, DateTime date, int PercentInHouse, int InhouseQnty)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_fabric_in_house_history_Inhouse_checked";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricType", SqlDbType.Int);
                paramIn.Value = FabricType;
                cmd.Parameters.Add(paramIn);

                //paramIn = new SqlParameter("@FabricLength", SqlDbType.Float);
                //paramIn.Value = FabricLength;
                //cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FabricName", SqlDbType.VarChar);
                paramIn.Value = FabricName;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = date;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PercentInHouse", SqlDbType.Int);
                paramIn.Value = PercentInHouse;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@InhoseQnty", SqlDbType.Float);
                paramIn.Value = InhouseQnty;
                cmd.Parameters.Add(paramIn);


                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public bool CheckFabricBIH(int OrderDetailID)
        {
            bool Result = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Get_Check_BIHTask";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                Result = Convert.ToBoolean(Convert.ToInt32(cmd.ExecuteScalar()));
                cnx.Close();

            }
            return Result;
        }

        public bool CheckAccessoryBIH(int OrderDetailID)
        {
            bool Result = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_Get_Check_Acc_BIHTask";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                Result = Convert.ToBoolean(Convert.ToInt32(cmd.ExecuteScalar()));
                cnx.Close();

            }
            return Result;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="OrderDetailID"></param>
        /// <param name="AccessoryWorkingDetailID"></param>
        /// <param name="Quantity"></param>
        /// <param name="date"></param>
        /// <param name="PercentInHouse"></param>
        /// <returns></returns>
        public string GetStatusofResolution(string StyleNumber, string Mode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                cnx.Open();

                string cmdText = "sp_status_resolution";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                paramIn.Value = StyleNumber;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Mode", SqlDbType.VarChar);
                paramIn.Value = Mode;
                cmd.Parameters.Add(paramIn);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsorderDetail);
                DataTable dt = dsorderDetail.Tables[0];
                cnx.Close();
                string styleNumber = Convert.ToString(dt.Rows[0][0]);
                return styleNumber;


            }


        }


        public bool InsertManageOrderAccessoryInHouseHistory(int OrderDetailID, int AccessoryWorkingDetailID, int Quantity, DateTime date, int PercentInHouse)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_insert_accessory_in_house_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@AccessoryWorkingDetailID", SqlDbType.Int);
                paramIn.Value = AccessoryWorkingDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Quantity", SqlDbType.Int);
                paramIn.Value = Quantity;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = date;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PercentInHouse", SqlDbType.Int);
                paramIn.Value = PercentInHouse;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }



        public List<StatusDetail> GetStyleFileInfoByStyleID(string StyleNumber)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_style_file_get_info_by_style_id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = StyleNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();

                List<StatusDetail> statusDetailCollection = new List<StatusDetail>();

                int result;

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        StatusDetail statusDetail = new StatusDetail();
                        statusDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                        statusDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                        statusDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);

                        statusDetail.ParentOrder = new Order();
                        statusDetail.ParentOrder.SerialNumber = (reader["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["SerialNumber"]);
                        statusDetail.ParentOrder.OrderDate = Convert.ToDateTime(reader["OrderDate"]);

                        statusDetail.ParentOrder.Style = new Style();
                        statusDetail.ParentOrder.Style.StyleNumber = (reader["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StyleNumber"]);
                        statusDetail.ParentOrder.Style.StyleID = Convert.ToInt32(reader["StyleID"]);

                        statusDetail.ParentOrder.Style.cdept = new ClientDepartment();
                        statusDetail.ParentOrder.Style.cdept.Name = (reader["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DepartmentName"]);
                        statusDetail.ParentOrder.Style.cdept.DeptID = (reader["DepartmentID"] != DBNull.Value) ? Convert.ToInt32(reader["DepartmentID"]) : 0;

                        statusDetail.ParentOrder.Style.client = new Client();
                        statusDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(reader["ClientID"]);
                        statusDetail.ParentOrder.Style.client.CompanyName = reader["Buyer"].ToString();
                        statusDetail.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;


                        statusDetail.Fabric1Details = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                        statusDetail.Fabric2Details = (reader["Fabric2Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2Details"]);
                        statusDetail.Fabric3Details = (reader["Fabric3Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3Details"]);
                        statusDetail.Fabric4Details = (reader["Fabric4Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4Details"]);
                        var Fab1Det = statusDetail.Fabric1Details.Trim().Split(' ');
                        if (!string.IsNullOrEmpty(Fab1Det[0]) && ((Fab1Det.Length == 1 && Int32.TryParse(Fab1Det[0], out result)) || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2 && Int32.TryParse(Fab1Det[0], out result))))
                        {
                            statusDetail.Fabric1Details = "PRD:" + statusDetail.Fabric1Details;
                            result = 0;
                        }

                        var Fab2Det = statusDetail.Fabric2Details.Trim().Split(' ');
                        if (!string.IsNullOrEmpty(Fab2Det[0]) && ((Fab2Det.Length == 1 && Int32.TryParse(Fab2Det[0], out result)) || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2 && Int32.TryParse(Fab2Det[0], out result))))
                        {
                            statusDetail.Fabric2Details = "PRD:" + statusDetail.Fabric2Details;
                            result = 0;

                        }

                        var Fab3Det = statusDetail.Fabric3Details.Trim().Split(' ');
                        if (!string.IsNullOrEmpty(Fab3Det[0]) && ((Fab3Det.Length == 1 && Int32.TryParse(Fab3Det[0], out result)) || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2 && Int32.TryParse(Fab3Det[0], out result))))
                        {
                            statusDetail.Fabric3Details = "PRD:" + statusDetail.Fabric3Details;
                            result = 0;
                        }

                        var Fab4Det = statusDetail.Fabric4Details.Trim().Split(' ');
                        if (!string.IsNullOrEmpty(Fab4Det[0]) && ((Fab4Det.Length == 1 && Int32.TryParse(Fab4Det[0], out result)) || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2 && Int32.TryParse(Fab4Det[0], out result))))
                        {
                            statusDetail.Fabric4Details = "PRD:" + statusDetail.Fabric4Details;
                            result = 0;
                        }

                        statusDetail.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                        statusDetail.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                        statusDetail.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                        statusDetail.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);

                        statusDetail.Quantity = Convert.ToInt32(reader["Quantity"]);
                        statusDetail.Mode = Convert.ToInt32(reader["Mode"]);
                        statusDetail.iKandiPrice = Convert.ToDouble(reader["iKandiPrice"]);
                        statusDetail.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                        statusDetail.WeekToEx = Convert.ToInt32(reader["WeekToEx"]);
                        statusDetail.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                        statusDetail.WeeksToDC = Convert.ToInt32(reader["WeeksToDC"]);
                        statusDetail.OrderID = Convert.ToInt32(reader["OrderID"]);
                        string SanjeevRemarks = reader["SanjeevRemarks"].ToString();
                        statusDetail.SanjeevRemarks = SanjeevRemarks.Replace("&&", "<br/><br/>");
                        string MerchantNotes = reader["MerchantNotes"].ToString();
                        statusDetail.MerchantNotes = MerchantNotes.Replace("&&", "<br/><br/>");

                        statusDetail.AllocationDate = (reader["AllocationDate"] != DBNull.Value) ? Convert.ToDateTime(reader["AllocationDate"]) : DateTime.MinValue;
                        statusDetail.ProductionUnitId = (reader["UnitID"] != DBNull.Value) ? Convert.ToInt32(reader["UnitID"]) : 0;
                        statusDetail.CuttingETA = (reader["CuttingETA"] != DBNull.Value) ? Convert.ToDateTime(reader["CuttingETA"]) : DateTime.MinValue;


                        statusDetail.ParentOrder.CuttingDetail = new CuttingDetail();
                        statusDetail.ParentOrder.CuttingDetail.PcsCut = (reader["PcsCut"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PcsCut"]);
                        statusDetail.ParentOrder.CuttingDetail.PercentagePcsCut = 0;

                        if (statusDetail.Quantity > 0)
                        {
                            statusDetail.ParentOrder.CuttingDetail.PercentagePcsCut = (int)Math.Round((statusDetail.ParentOrder.CuttingDetail.PcsCut / statusDetail.Quantity) * 100);
                        }

                        statusDetail.ParentOrder.StitchingDetail = new StitchingDetail();
                        statusDetail.ParentOrder.StitchingDetail.OverallPcsStitched = (reader["OverallPcsStitched"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["OverallPcsStitched"]);
                        statusDetail.ParentOrder.StitchingDetail.OverallPcsPacked = (reader["OverallPcsPacked"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["OverallPcsPacked"]);
                        statusDetail.ParentOrder.StitchingDetail.PercentageOverallPcsPacked = 0;
                        statusDetail.ParentOrder.StitchingDetail.PercentageOverallPcsStitched = 0;

                        if (statusDetail.Quantity > 0)
                        {
                            statusDetail.ParentOrder.StitchingDetail.PercentageOverallPcsPacked = (int)Math.Round((statusDetail.ParentOrder.StitchingDetail.OverallPcsPacked / statusDetail.Quantity) * 100);
                            statusDetail.ParentOrder.StitchingDetail.PercentageOverallPcsStitched = (int)Math.Round((statusDetail.ParentOrder.StitchingDetail.OverallPcsStitched / statusDetail.Quantity) * 100);
                        }

                        statusDetail.ParentOrder.OrderLimitation1 = new OrderLimitation();
                        //orderDetail.ParentOrder.OrderLimitation1.FabricBulkETA = (reader["FabricBulkETA"] != DBNull.Value) ? Convert.ToDateTime(reader["FabricBulkETA "]) : DateTime.MinValue;

                        statusDetail.StatusFileId = (reader["StatusFileId"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["StatusFileId"]);
                        statusDetail.FabricOwnerName = (reader["FabricOwnerName"] == DBNull.Value) ? string.Empty : reader["FabricOwnerName"].ToString();
                        statusDetail.FitsOwnerName = (reader["FitsOwnerName"] == DBNull.Value) ? string.Empty : reader["FitsOwnerName"].ToString();
                        statusDetail.FitsResolution = (reader["FitsResolution"] == DBNull.Value) ? string.Empty : reader["FitsResolution"].ToString();
                        statusDetail.FabricResolution = (reader["FabricResolution"] == DBNull.Value) ? string.Empty : reader["FabricResolution"].ToString();

                        statusDetail.Unit = new ProductionUnit();
                        statusDetail.Unit.FactoryCode = (reader["FactoryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["FactoryCode"]);

                        statusDetail.ParentOrder.WorkflowInstanceDetail = new WorkflowInstanceDetail();
                        statusDetail.ParentOrder.WorkflowInstanceDetail.StatusMode = (reader["StatusMode"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["StatusMode"]);
                        statusDetail.ParentOrder.WorkflowInstanceDetail.StatusModeID = (reader["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StatusModeID"]);// Add this

                        statusDetailCollection.Add(statusDetail);
                    }
                }

                return statusDetailCollection;
            }
        }


        public List<FabricInhouseHistory> GetManageOrderFabicHistory(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_manage_order_get_fabric_history";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<FabricInhouseHistory> FabricHistoryDetails = new List<FabricInhouseHistory>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        FabricInhouseHistory FabricInhouseHistory = new FabricInhouseHistory();
                        FabricInhouseHistory.PercentInHouse = (reader["PercentInHouse"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["PercentInHouse"]);
                        FabricInhouseHistory.FabricName = (reader["FabricName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["FabricName"]);

                        FabricInhouseHistory.CCGSM = (reader["Fabric11"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric11"]);
                        FabricInhouseHistory.FabricLength = (reader["FabricLength"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["FabricLength"]);
                        FabricInhouseHistory.Date = (reader["Date"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date"]);

                        FabricHistoryDetails.Add(FabricInhouseHistory);
                    }
                }

                return FabricHistoryDetails;
            }
        }



        public List<OrderDetail> GetManageOrderContractsByPrintNumber(string PrintNumber, int Fabrictype)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_manage_order_get_contracts_by_print_number";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@PrintNumber", SqlDbType.VarChar);
                param.Value = PrintNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);

                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            DataRow dr2 = getTotalQuantity(Convert.ToInt32(dr["OrderID"]), ds);
                            OrderDetail orderDetail = new OrderDetail();
                            orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                            orderDetail.LineItemNumber = Convert.ToString(dr["LineItemNumber"]);
                            orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);
                            orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Quantity"]);
                            int totalQuantity = Convert.ToInt32(dr2["TotalQuantity"]);

                            if (Convert.ToInt32(dr["Fabrictype"]) == 1)
                            {

                                orderDetail.Fabric1Quantity = 0;

                                if (totalQuantity > 0)
                                {
                                    orderDetail.Fabric1Quantity = (Convert.ToInt32(dr["Quantity"]) * Convert.ToInt32(dr["Fabric1FinalOrder"])) / totalQuantity;
                                }
                            }


                            if (Convert.ToInt32(dr["Fabrictype"]) == 2)
                            {
                                orderDetail.Fabric1Quantity = 0;
                                if (totalQuantity > 0)
                                {
                                    orderDetail.Fabric1Quantity = (Convert.ToInt32(dr["Quantity"]) * Convert.ToInt32(dr["Fabric2FinalOrder"])) / totalQuantity;
                                }
                            }

                            if (Convert.ToInt32(dr["Fabrictype"]) == 3)
                            {
                                orderDetail.Fabric1Quantity = 0;
                                if (totalQuantity > 0)
                                {
                                    orderDetail.Fabric1Quantity = (Convert.ToInt32(dr["Quantity"]) * Convert.ToInt32(dr["Fabric3FinalOrder"])) / totalQuantity;
                                }
                            }

                            if (Convert.ToInt32(dr["Fabrictype"]) == 4)
                            {
                                orderDetail.Fabric1Quantity = 0;
                                if (totalQuantity > 0)
                                {
                                    orderDetail.Fabric1Quantity = (Convert.ToInt32(dr["Quantity"]) * Convert.ToInt32(dr["Fabric4FinalOrder"])) / totalQuantity;
                                }
                            }

                            orderDetail.ParentOrder = new Order();
                            orderDetail.ParentOrder.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);

                            orderDetail.ParentOrder.Print = new Print();
                            orderDetail.ParentOrder.Print.ImageUrl = (dr["ImageUrl"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ImageUrl"]);

                            orderDetail.ParentOrder.Style = new Style();
                            orderDetail.ParentOrder.Style.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);

                            orderDetail.ParentOrder.OrderLimitation1 = new OrderLimitation();
                            orderDetail.ParentOrder.OrderLimitation1.FabricBulkETA = (dr["FabricBulkETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricBulkETA"]);

                            orderDetailCollection.Add(orderDetail);
                        }
                    }
                }

                return orderDetailCollection;
            }
        }

        private DataRow getTotalQuantity(int OrderID, DataSet ds)
        {
            DataTable dt = ds.Tables[1];
            string strExpr = "OrderID =" + OrderID;
            DataRow[] DataRows = dt.Select(strExpr);
            return DataRows.Length > 0 ? DataRows[0] : dt.NewRow();

        }

        public List<AccessoryInHouseHistory> GetStyleFileAccessoryInfo(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_style_file_get_accesssory_info_by_order_detail_id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);
                reader = cmd.ExecuteReader();

                List<AccessoryInHouseHistory> AccessoryInHouseHistoryCollection = new List<AccessoryInHouseHistory>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        AccessoryInHouseHistory AccessoryInHouseHistory = new AccessoryInHouseHistory();
                        AccessoryInHouseHistory.AccessoryName = (reader["AccessoryName"] == DBNull.Value) ? string.Empty : reader["AccessoryName"].ToString();
                        AccessoryInHouseHistory.ApprovedDate = (reader["ApprovedDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["ApprovedDate"]);
                        AccessoryInHouseHistory.Date = (reader["Date"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(reader["Date"]);
                        AccessoryInHouseHistory.PercentInHouse = (reader["PercentInHouse"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["PercentInHouse"]);

                        AccessoryInHouseHistoryCollection.Add(AccessoryInHouseHistory);
                    }
                }

                return AccessoryInHouseHistoryCollection;
            }
        }

        public List<FitsTrack> StyleFileGetFitsInfo(string StyleNumber, Int32 DepartmentID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;
                SqlParameter param;

                cmdText = "sp_style_file_get_fits_info";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = StyleNumber;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DepartmentID", SqlDbType.Int);
                param.Value = DepartmentID;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<FitsTrack> fitsTrackCollection = new List<FitsTrack>();

                while (reader.Read())
                {
                    FitsTrack fitsTrack = new FitsTrack();

                    fitsTrack.Id = (reader["Id"] != DBNull.Value) ? Convert.ToInt32(reader["Id"]) : 0;
                    fitsTrack.CommentsSentFor = (reader["CommentsSentFor"] != DBNull.Value) ? Convert.ToString(reader["CommentsSentFor"]) : String.Empty;
                    if (fitsTrack.CommentsSentFor.IndexOf("stc") == -1)
                    {
                        fitsTrack.CommentsSentFor = (reader["CommentsSentFor"] != DBNull.Value) ? Convert.ToString(reader["CommentsSentFor"]) + " Sent" : String.Empty;
                    }
                    fitsTrack.NextPlannedDate = (reader["NextPlannedDate"] != DBNull.Value) ? Convert.ToDateTime(reader["NextPlannedDate"]) : DateTime.MinValue;
                    fitsTrack.AckDate = (reader["AckDate"] != DBNull.Value) ? Convert.ToDateTime(reader["AckDate"]) : DateTime.MinValue;
                    fitsTrackCollection.Add(fitsTrack);
                }

                return fitsTrackCollection;
            }
        }

        public DataSet ManageOrderGetFitsInfo(string StyleCodeVersion, int DepartmentID, int OrderDetailID)
        {
            DataSet dsFits = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_fits_popup_info";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    paramIn.Value = DepartmentID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@StyleCodeVersion", SqlDbType.VarChar);
                    paramIn.Value = StyleCodeVersion;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFits);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFits;
        }

        public DataSet GetOrderBasicInfo(int OrderDetailID)
        {
            DataSet dsBasic = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_get_order_basic_info";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsBasic);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsBasic;
        }


        public void StyleFileInsertOwnerInfo(int OrderDetailID, int FitsOwnerID, int FabricOwnerID, string FitsRemarks, string FabricRemarks, DateTime PlannedDispatchDate, int FitsTrackID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_style_file_insert_update_owner";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FitsOwnerID", SqlDbType.Int);
                param.Value = FitsOwnerID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricOwnerID", SqlDbType.Int);
                param.Value = FabricOwnerID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FitsRemarks", SqlDbType.VarChar);
                param.Value = FitsRemarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricRemarks", SqlDbType.VarChar);
                param.Value = FabricRemarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PlannedDispatchDate", SqlDbType.DateTime);
                param.Value = PlannedDispatchDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FitsTrackID", SqlDbType.Int);
                param.Value = FitsTrackID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }

        public DataSet GetStyleFileFabricRemarks(int OrderDetailID)
        {
            DataSet dsFabricRemarks = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_style_file_get_fabric_remarks";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabricRemarks);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFabricRemarks;
        }

        public DataSet GetStyleFileFitsRemarks(string StyleNumber, int DepartmentID, int OrderDetailID)
        {
            DataSet dsFitsRemarks = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_style_file_get_fits_remarks";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                    paramIn.Value = StyleNumber;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@DepartmentID", SqlDbType.Int);
                    paramIn.Value = DepartmentID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFitsRemarks);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFitsRemarks;
        }



        public DataSet StyleFileShowStyleImages(string StyleID, int PrintNumber)
        {
            DataSet dsImages = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_style_file_get_style_and_print_images";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@StyleID", SqlDbType.VarChar);
                    paramIn.Value = StyleID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@PrintNumber", SqlDbType.Int);
                    paramIn.Value = PrintNumber;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsImages);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsImages;
        }

        public DataSet GetManageOrderFabricHistory()
        {
            DataSet dsFabric = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    string cmdText = "sp_manage_order_get_all_fabric_history";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dsFabric);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return dsFabric;
        }






        public bool IsOrderSealedOff(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_orders_Is_order_sealed_off";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.VarChar);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                object result = cmd.ExecuteScalar();

                cnx.Close();

                if (result != null)
                {
                    return (Convert.ToInt32(result) > 0);
                }

                return false;
            }

        }




        public List<OrderDetail> GetAllNewOrderReport(DateTime SentOn, bool bcheck)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                int result;
                try
                {
                    string cmdText = "sp_manage_order_get_cutting_for_new_orders_for_email_new";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    DataSet dsorderDetail = new DataSet();
                    SqlParameter param;
                    param = new SqlParameter("@ActionDate", SqlDbType.DateTime);
                    param.Value = new DateTime(SentOn.Year, SentOn.Month, SentOn.Day, 0, 0, 0);
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    param = new SqlParameter("@bCheck", SqlDbType.Int);
                    if (bcheck == true)
                    {
                        param.Value = 1;

                    }
                    else
                    {
                        param.Value = 2;
                    }
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];

                        //int orderid = -1;
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                OrderDetail orderDetail = new OrderDetail();
                                orderDetail.OrderDetailID = Convert.ToInt32(dr["Id"]);
                                orderDetail.LineItemNumber = (dr["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LineItemNumber"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);
                                orderDetail.IsRepeatstr = (dr["IsRepeat"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["IsRepeat"]);

                                orderDetail.ParentOrder = new Order();

                                orderDetail.ParentOrder.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.ParentOrder.OrderDate = Convert.ToDateTime(dr["OrderDate"]);
                                orderDetail.ParentOrder.Style = new Style();
                                orderDetail.ParentOrder.Style.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.ParentOrder.Style.DepartmentName = (dr["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["DepartmentName"]);
                                orderDetail.ParentOrder.Style.StyleID = Convert.ToInt32(dr["StyleID"]);
                                orderDetail.ParentOrder.Style.InLineCutDate = (dr["InLineCutDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["InLineCutDate"]);

                                orderDetail.ParentOrder.Style.SampleImageURL1 = (dr["SampleImageURL1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL1"]);
                                orderDetail.ParentOrder.Style.SampleImageURL2 = (dr["SampleImageURL2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL2"]);
                                orderDetail.ParentOrder.Style.SampleImageURL3 = (dr["SampleImageURL3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SampleImageURL3"]);


                                orderDetail.Fabric1Details = (dr["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1DetailsRef"]);
                                orderDetail.Fabric2Details = (dr["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2DetailsRef"]);
                                orderDetail.Fabric3Details = (dr["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3DetailsRef"]);
                                orderDetail.Fabric4Details = (dr["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4DetailsRef"]);

                                var Fab1Det = orderDetail.Fabric1Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric1Details = "PRD:" + orderDetail.Fabric1Details;
                                    result = 0;

                                }

                                var Fab2Det = orderDetail.Fabric2Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric2Details = "PRD:" + orderDetail.Fabric2Details;
                                    result = 0;
                                }



                                var Fab3Det = orderDetail.Fabric3Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric3Details = "PRD:" + orderDetail.Fabric3Details;
                                    result = 0;
                                }


                                var Fab4Det = orderDetail.Fabric4Details.Trim().Split(' ');

                                if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                                {
                                    orderDetail.Fabric4Details = "PRD:" + orderDetail.Fabric4Details;
                                    result = 0;
                                }

                                orderDetail.Fabric1 = (dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]);
                                orderDetail.Fabric2 = (dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]);
                                orderDetail.Fabric3 = (dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]);
                                orderDetail.Fabric4 = (dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]);

                                orderDetail.ParentOrder.FabricInhouseHistory = new FabricInhouseHistory();
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric1Percent = (dr["PercentInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse1"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric2Percent = (dr["PercentInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse2"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric3Percent = (dr["PercentInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse3"]);
                                orderDetail.ParentOrder.FabricInhouseHistory.Fabric4Percent = (dr["PercentInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PercentInHouse4"]);

                                orderDetail.Quantity = Convert.ToInt32(dr["Quantity"]);
                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);
                                orderDetail.ModeName = (dr["Code"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Code"]);
                                orderDetail.iKandiPrice = Convert.ToDouble(dr["iKandiPrice"]);
                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                orderDetail.WeekToEx = Convert.ToInt32(dr["WeekToEx"]);
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.WeeksToDC = Convert.ToInt32(dr["WeeksToDC"]);
                                orderDetail.OrderID = Convert.ToInt32(dr["OrderID"]);

                                orderDetail.CuttingETA = (dr["CuttingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["CuttingETA"]) : DateTime.MinValue;
                                //orderDetail.SealETA = (dr["SealETA"] != DBNull.Value) ? Convert.ToDateTime(dr["SealETA"]) : DateTime.MinValue;
                                orderDetail.StitchingETA = (dr["StitchingETA"] != DBNull.Value) ? Convert.ToDateTime(dr["StitchingETA"]) : DateTime.MinValue;
                                //orderDetail.STCUnallocated = (dr["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(dr["STCUnallocated"]) : DateTime.MinValue;

                                orderDetail.ParentOrder.Fits = new Fits();
                                //orderDetail.ParentOrder.Fits.SealDate = (dr["SealDate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["SealDate"]);

                                orderDetail.ParentOrder.Style.client = new Client();
                                orderDetail.ParentOrder.Style.client.ClientID = Convert.ToInt32(dr["ClientID"]);

                                orderDetail.ParentOrder.CuttingDetail = new CuttingDetail();
                                orderDetail.ParentOrder.CuttingDetail.CuttingSheetID = -1;
                                orderDetail.ParentOrder.CuttingDetail.ID = -1;

                                orderDetail.ParentOrder.WorkflowInstanceDetail = new WorkflowInstanceDetail();
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusMode = (dr["StatusMode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StatusMode"]);
                                orderDetail.ParentOrder.WorkflowInstanceDetail.StatusModeID = (dr["StatusModeID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StatusModeID"]);// Add this

                                orderDetail.ParentOrder.InlinePPMOrderContract = new InlinePPMOrderContract();
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentActual = (dr["TopSentActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TopSentActual"]);
                                orderDetail.ParentOrder.InlinePPMOrderContract.TopSentTarget = (dr["TopSentTarget"] == DBNull.Value) ? orderDetail.StitchingETA : Convert.ToDateTime(dr["TopSentTarget"]);

                                orderDetail.ParentOrder.CuttingHistory = new CuttingHistory();
                                orderDetail.ParentOrder.CuttingHistory.Date = (dr["CuttingActual"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CuttingActual"]);

                                orderDetail.Unit = new ProductionUnit();
                                orderDetail.Unit.ProductionUnitId = (dr["ProductionUnitId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["UnitID"]);
                                orderDetail.Unit.FactoryName = (dr["FactoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryName"]);
                                orderDetail.Unit.FactoryCode = (dr["FactoryCode"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["FactoryCode"]);


                                orderDetailCollection.Add(orderDetail);

                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }


        public bool UpdateRemarksOperation(string Id1, int Id2, string Remarks, DateTime Date, String Type, SqlConnection cnx, SqlTransaction transaction)
        {
            string cmdText = "";
            string strEmpty = string.Empty;
            string date = null;

            date = Date.ToString("yyyy-MM-dd") + " 00:00:00";
            if (Id2 == 0)
            {
                if (Type == "P")
                {
                    if (Date != DateTime.MinValue)
                    {
                        cmdText = "Update order_detail Set ProdRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set ProdRemarks ='" + Remarks + "', ProdRemarksUpdatedOn ='" + date + "' where Id =" + Id1 + ";";
                    }
                    else
                    {
                        cmdText = "Update order_detail Set ProdRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set ProdRemarks ='" + Remarks + "' where Id =" + Id1 + ";";
                    }
                }
                else if (Type == "A")
                {
                    if (Date != DateTime.MinValue)
                    {
                        cmdText = "Update order_detail Set AccessoriesRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set AccessoriesRemarks ='" + Remarks + "', AccessoriesRemarksUpdatedOn ='" + date + "' where Id =" + Id1 + ";";
                    }
                    else
                    {
                        cmdText = "Update order_detail Set AccessoriesRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set AccessoriesRemarks ='" + Remarks + "' where Id =" + Id1 + ";";
                    }
                }
                else if (Type == "F")
                {
                    if (Date != DateTime.MinValue)
                    {
                        cmdText = "Update order_detail Set FabricRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set FabricRemarks ='" + Remarks + "', FabricRemarksUpdatedOn ='" + date + "' where Id =" + Id1 + ";";
                    }
                    else
                    {
                        cmdText = "Update order_detail Set FabricRemarks ='" + strEmpty + "' where Id =" + Id1 + ";";
                        cmdText = cmdText + "Update order_detail Set FabricRemarks ='" + Remarks + "' where Id =" + Id1 + ";";
                    }
                }



                SqlCommand cmd = new SqlCommand(cmdText, cnx, transaction);
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
            }
            else
            {
                UpdateSealerRemarks(Id1, Id2, Remarks, Type, cnx, transaction);
            }



            return true;
        }

        public void UpdateSealerRemarks(string StyleNumber, int ClientDepartmentID, string RemarksIKandi, string RemarksBIPL, SqlConnection cnx, SqlTransaction transaction)
        {


            SqlDataAdapter adapter = new SqlDataAdapter();

            string cmdText = "sp_sealer_pending_update";

            SqlCommand cmd = new SqlCommand(cmdText, cnx, transaction);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            SqlParameter param;

            param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
            param.Value = StyleNumber;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
            param.Value = ClientDepartmentID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@RemarksBIPL", SqlDbType.VarChar);
            param.Value = RemarksBIPL;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@RemarksIKandi", SqlDbType.VarChar);
            param.Value = RemarksIKandi;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();


        }

        public System.Data.DataSet GetExFactoryUnitQuantityReport()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_reports_exfactory_unit_quantity";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsExFactoryQuantity = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExFactoryQuantity);

                cnx.Close();

                return dsExFactoryQuantity;
            }
        }

        public int CheckExistingSerialNumber(int OrderID, string SerialNumber, int Type)
        {
            int Count = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_order_check_existing_serial_number";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter outParam;

                    outParam = new SqlParameter("@Count", SqlDbType.Int);
                    outParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(outParam);

                    SqlParameter param;

                    param = new SqlParameter("@Orderid", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SerialNumber", SqlDbType.VarChar);
                    param.Value = SerialNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteScalar();

                    Count = Convert.ToInt32(outParam.Value);

                    if (Count > 0)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;

                    }
                }

                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return 0;
        }
        public int FindStatus_Modes_Sequence(string StatusModesName, int Type)
        {
            int Status_Sequence = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "sp_Get_Status_Modes_Sequece";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                    SqlParameter param;

                    param = new SqlParameter("@Status_Names", SqlDbType.VarChar);
                    param.Value = StatusModesName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = Type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    DataSet dsGetSequence = new DataSet();
                    adapter.Fill(dsGetSequence);
                    if (dsGetSequence.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsGetSequence.Tables[0];
                        foreach (DataRow dr in dt.Rows)
                        {
                            Status_Sequence = (dr["Status_Sequence"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Status_Sequence"]);
                        }

                    }
                    return Status_Sequence;


                }

                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
            }

            return 0;
        }

        public bool CopyManageOrderStitchingHistory(StitchingHistory stitchingHistory)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_manage_order_copy_stitching_history";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;


                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = stitchingHistory.OrderDetailID;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@Date", SqlDbType.DateTime);
                paramIn.Value = stitchingHistory.Date;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Quantity", SqlDbType.Int);
                paramIn.Value = stitchingHistory.Quantity;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Line", SqlDbType.VarChar);
                paramIn.Value = stitchingHistory.Line;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Floor", SqlDbType.VarChar);
                paramIn.Value = stitchingHistory.Floor;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        private void CopyACCAndFabricBulkInHouseHistory(int ParentOrderDetailID, int NewOrderDetailID, SqlConnection cnx, SqlTransaction transaction)
        {
            string cmdText = "sp_order_update_copy_acc_fabric_in_house_history";

            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.Transaction = transaction;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            cmd.Connection = cnx;

            SqlParameter paramIn;

            paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);

            paramIn.Value = ParentOrderDetailID;

            cmd.Parameters.Add(paramIn);

            paramIn = new SqlParameter("@NewOrderDetailID", SqlDbType.Int);

            paramIn.Value = NewOrderDetailID;

            cmd.Parameters.Add(paramIn);

            cmd.ExecuteNonQuery();

        }




        // Liability Specific
        public OrderDetail GetOrderDetailByOrderDetailId(int OrderDetailID)
        {
            OrderDetail od = new OrderDetail();
            od.ParentOrder = new Order();
            od.ParentOrder.Print = new Print();
            od.ParentOrder.Costing = new Costing();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_detail_get_order_detail_by_orderdetailId";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                int result;
                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        od.OrderDetailID = Convert.ToInt32(reader["Id"]);
                        od.Quantity = (reader["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Quantity"]);
                        od.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                        od.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                        od.Fabric1Details = (reader["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1DetailsRef"]);
                        od.Fabric2Details = (reader["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2DetailsRef"]);
                        od.Fabric3Details = (reader["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3DetailsRef"]);
                        od.Fabric4Details = (reader["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4DetailsRef"]);

                        var Fab1Det = od.Fabric1Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab1Det[0]) && Int32.TryParse(Fab1Det[0], out result) && (Fab1Det.Length == 1 || (Fab1Det.Length == 2 && Fab1Det[1].Length <= 2)))
                        {
                            od.Fabric1Details = "" + od.Fabric1Details;
                            result = 0;

                        }

                        var Fab2Det = od.Fabric2Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab2Det[0]) && Int32.TryParse(Fab2Det[0], out result) && (Fab2Det.Length == 1 || (Fab2Det.Length == 2 && Fab2Det[1].Length <= 2)))
                        {
                            od.Fabric2Details = "" + od.Fabric2Details;
                            result = 0;
                        }

                        var Fab3Det = od.Fabric3Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab3Det[0]) && Int32.TryParse(Fab3Det[0], out result) && (Fab3Det.Length == 1 || (Fab3Det.Length == 2 && Fab3Det[1].Length <= 2)))
                        {
                            od.Fabric3Details = "" + od.Fabric3Details;
                            result = 0;
                        }

                        var Fab4Det = od.Fabric4Details.Trim().Split(' ');

                        if (!string.IsNullOrEmpty(Fab4Det[0]) && Int32.TryParse(Fab4Det[0], out result) && (Fab4Det.Length == 1 || (Fab4Det.Length == 2 && Fab4Det[1].Length <= 2)))
                        {
                            od.Fabric4Details = "" + od.Fabric4Details;
                            result = 0;
                        }

                        od.Fabric1 = (reader["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1"]);
                        od.Fabric2 = (reader["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric2"]);
                        od.Fabric3 = (reader["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric3"]);
                        od.Fabric4 = (reader["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric4"]);

                        od.ParentOrder.Style = new StyleDataProvider(LoggedInUser).GetStyleByStyleId((reader["StyleID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["StyleID"])); // this object should be filled from OrderController 
                        od.ParentOrder.Style.client = new Client();
                        od.ParentOrder.Style.cdept = new ClientDepartment();

                        od.ParentOrder.Style.client.ClientID = (reader["ClientID"] == DBNull.Value || Convert.ToString(reader["ClientID"]) == String.Empty) ? 0 : Convert.ToInt32(reader["ClientID"]);
                        od.ParentOrder.OrderDate = (reader["OrderDate"] == DBNull.Value || reader["OrderDate"].ToString() == String.Empty) ? DateTime.MinValue : Convert.ToDateTime(reader["OrderDate"]);
                        od.ParentOrder.SerialNumber = Convert.ToString(reader["SerialNumber"]);
                        od.ParentOrder.Description = (reader["Description"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Description"]);
                        od.ParentOrder.Style.cdept.DeptID = (reader["DepartmentID"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["DepartmentID"]);
                        od.ParentOrder.Style.cdept.Name = (reader["DepartmentName"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["DepartmentName"]);
                        od.ParentOrder.Style.client.CompanyName = reader["CompanyName"].ToString();
                        od.Fabric1Price = (reader["Fabric1Price"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Price"]);
                        od.Fabric2Price = (reader["Fabric2Price"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Price"]);
                        od.Fabric3Price = (reader["Fabric3Price"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Price"]);
                        od.Fabric4Price = (reader["Fabric4Price"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Price"]);
                        od.STCUnallocated = (reader["STCUnallocated"] != DBNull.Value) ? Convert.ToDateTime(reader["STCUnallocated"]) : DateTime.MinValue;
                        od.ExFactory = (reader["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(reader["ExFactory"]) : DateTime.MinValue;
                        od.Mode = (reader["Mode"] == DBNull.Value) ? 0 : (Convert.ToInt32(reader["Mode"]));
                        od.ModeName = (reader["Code"] == DBNull.Value) ? string.Empty : (Convert.ToString(reader["Code"]));
                        od.DC = (reader["DC"] != DBNull.Value) ? Convert.ToDateTime(reader["DC"]) : DateTime.MinValue;
                        od.Fabric1Average = (reader["Fabric1Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric1Average"]);
                        od.Fabric2Average = (reader["Fabric2Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric2Average"]);
                        od.Fabric3Average = (reader["Fabric3Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric3Average"]);
                        od.Fabric4Average = (reader["Fabric4Average"] == DBNull.Value) ? 0 : Convert.ToDouble(reader["Fabric4Average"]);
                        od.ParentOrder.Costing.ConvertTo = (reader["ConvertTo"] == DBNull.Value) ? -1 : Convert.ToInt32(reader["ConvertTo"]);
                        od.ParentOrder.Costing.CurrencySign = iKandi.Common.Constants.GetCurrencySymbalByCurrencyType(od.ParentOrder.Costing.ConvertTo);
                    }
                }
            }
            return od;
        }

        public int FindOrderIDBreakdownByBuyerAndContract(int ClientID, string Contract)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_order_detail_find_order_id_break_down_by_buyer_contract";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@ClientID", SqlDbType.Int);
                param.Value = ClientID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ContractNo", SqlDbType.VarChar);
                param.Value = Contract;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                DataSet dsOrders = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsOrders);

                cnx.Close();

                if (dsOrders.Tables[0].Rows.Count == 0)
                    return 0;
                else if (dsOrders.Tables[0].Rows.Count == 1)
                    return Convert.ToInt32(dsOrders.Tables[0].Rows[0]["ID"]);
                else
                    return -1;

            }
        }










        public DataSet GetOrdersByStyleVariation(string StyleNumber)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_costing_get_orders_on_style_variation";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@StyleNumber", SqlDbType.VarChar);
                param.Value = StyleNumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsOrders = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsOrders);

                cnx.Close();

                return dsOrders;
            }
        }
        public DataTable GetCDQDA(int OrderdID)
        {
            DataTable dt = new DataTable();
            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {

                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "sp_GetCDQDA";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderdID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dt);


                }

            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        public void UpdateOrderAgreedCosting(string OrderIDs, int CostingID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_costing_update_agreed_costing_id";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderIDs", SqlDbType.VarChar);
                param.Value = OrderIDs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@NewCostingId", SqlDbType.Int);
                param.Value = CostingID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
        }


        //manisha added on 2/24/2011
        #region Manisha New Added
        public string GetReminderDetails(string task, int type)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string result = string.Empty;
                cnx.Open();
                SqlCommand cmd;
                SqlDataReader dr;

                string cmdText;

                cmdText = "sp_order_get_reminder_by_id";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@task", SqlDbType.VarChar);
                param.Value = task;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@type", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        result = Convert.ToString(dr["Task"]);
                    }
                }
                cnx.Close();
                return result;
            }
        }
        public string SaveReminderDetails(int orderDetailId, int OrderId, int taskId, string desc, DateTime dt, DateTime dt1, int userID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string result = string.Empty;
                cnx.Open();
                SqlCommand cmd;

                string cmdText;

                cmdText = "sp_order_Save_reminder_data";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = orderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@taskId", SqlDbType.Int);
                param.Value = taskId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@desc", SqlDbType.Text);
                param.Value = desc;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DueDate", SqlDbType.DateTime);
                param.Value = dt;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ActionDate", SqlDbType.DateTime);
                param.Value = dt1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value =
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                return "1";
            }
        }


        public string UpdateReminderDetails(int orderDetailId, int orderID, int taskId, DateTime dt, int userID)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string result = string.Empty;
                cnx.Open();
                SqlCommand cmd;

                string cmdText;

                cmdText = "sp_order_update_reminder_data";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = orderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = orderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@taskId", SqlDbType.Int);
                param.Value = taskId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClosedDate", SqlDbType.DateTime);
                param.Value = dt;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = userID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                return "1";
            }
        }


        public List<Reminders> FetchReminderDetails(int OrderId, int userID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsReminder = new DataSet();
                string result = string.Empty;
                cnx.Open();
                SqlCommand cmd;

                string cmdText;

                cmdText = "sp_order_get_reminder_by_userid";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = userID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataReader reader = cmd.ExecuteReader();
                List<Reminders> reminders = new List<Reminders>();

                while (reader.Read())
                {
                    Reminders reminder = new Reminders();
                    reminder.ReminderID = Convert.ToInt32(reader["ReminderID"]);
                    reminder.OrderID = Convert.ToInt32(reader["OrderID"]);
                    reminder.OrderDetailID = Convert.ToInt32(reader["OrderDetailID"]);

                    reminder.TaskID = Convert.ToInt32(reader["TaskID"]);
                    reminder.TaskDescription = Convert.ToString(reader["TaskDescription"]);
                    reminder.TaskName = Convert.ToString(reader["TaskName"]);
                    reminder.TaskShort = Convert.ToString(reader["TaskShort"]);
                    reminder.TaskType = Convert.ToString(reader["TaskType"]);

                    reminder.TaskDueDate = Convert.ToDateTime(reader["TaskDueDate"]);
                    reminder.UserID = Convert.ToInt32(reader["UserID"]);
                    //reminder.UserName = Convert.ToInt32(reader["UserName"]);

                    reminder.ActionDate = Convert.ToDateTime(reader["ActionDate"]);
                    reminder.ClosedDate = (reader["ClosedDate"] != DBNull.Value) ? Convert.ToDateTime(reader["ClosedDate"]) : DateTime.MinValue;
                    reminder.Active = Convert.ToInt32(reader["Active"]);

                    reminders.Add(reminder);
                }

                cnx.Close();

                return reminders;

                //SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                //adapter.Fill(dsReminder);

                //DataTable dt = new DataTable();
                //if (dsReminder.Tables[0].Rows.Count > 0)
                //{
                //    dt = dsReminder.Tables[0];
                //}
                //cnx.Close();
                //return dt;
            }
        }

        //added on 1 march 2011
        public string SaveReminderDetails(string ixml, int userID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string result = string.Empty;
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_order_Save_reminder_data_xml";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Xml", SqlDbType.VarChar);
                param.Size = 4000;
                param.Value = ixml;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = userID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                return "1";
            }
        }

        public DataSet OrderChangeRequestIkandi(string MailType, DateTime iReportDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = (MailType == "IKANDI") ? "sp_get_order_change_request" : "sp_get_order_change_BIPL";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataSet dsOrders = new DataSet();
                SqlParameter param;

                param = new SqlParameter("@ReportDate", SqlDbType.DateTime);
                param.Value = iReportDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsOrders);
                cnx.Close();
                return dsOrders;
            }
        }
        #endregion
        //end



        public bool IscheckShippingRemarksPermission(int DesID, int DeptID, int ColumnId)
        {
            bool bCheckPermission = false;
            DataSet dscheckpermission = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "SP_CheckShipingRemarksPermission";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter paramIn;

                paramIn = new SqlParameter("@DesID", SqlDbType.Int);
                paramIn.Value = DesID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@DeptID", SqlDbType.Int);
                paramIn.Value = DeptID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@ColumnId", SqlDbType.Int);
                paramIn.Value = ColumnId;
                cmd.Parameters.Add(paramIn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dscheckpermission);

                //if (dscheckpermission.Tables[0].Rows.Count > 0)
                //    bCheckPermission = true;
                //else
                //    bCheckPermission = false;
                if (dscheckpermission.Tables[0].Rows.Count > 0)
                {
                    bool PermisionRead = Convert.ToBoolean(dscheckpermission.Tables[0].Rows[0]["PermisionRead"]);
                    bool PermisionWrite = Convert.ToBoolean(dscheckpermission.Tables[0].Rows[0]["PermisionWrite"]);
                    if (PermisionRead == true || PermisionWrite == true)
                    {
                        bCheckPermission = true;
                    }
                }
                else
                {
                    bCheckPermission = false;
                }


            }
            return bCheckPermission;
        }



        public int UpdateDescription(int styleid, string Changevalue, string Flag)
        {
            int StitchingDetailID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdateMovalue";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Id", SqlDbType.Int);
                paramIn.Value = styleid;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@values", SqlDbType.VarChar);
                paramIn.Value = Changevalue;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                paramIn.Value = Flag;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return StitchingDetailID;
        }
        public int UpdateLineNo(int OrderDetailID, string Changevalue, string Flag)
        {
            int StitchingDetailID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdateMovalue";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Id", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@values", SqlDbType.VarChar);
                paramIn.Value = Changevalue;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                paramIn.Value = Flag;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return StitchingDetailID;
        }

        public int UpdateWeight(int styleid, string Changevalue, string Flag)
        {
            int StitchingDetailID = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdateMO_Weight";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Id", SqlDbType.Int);
                paramIn.Value = styleid;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@values", SqlDbType.VarChar);
                paramIn.Value = Changevalue;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                paramIn.Value = Flag;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return StitchingDetailID;
        }

        public int DeleteSession(string SessionId)
        {
            int Sales = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "usp_DeleteSalesSession";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@SessionId", SqlDbType.NVarChar);
                paramIn.Value = SessionId;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Sales;
        }



        public DataTable GetSizeQuantity(int OrderDetailID, int Option)
        {
            DataTable dt = new DataTable();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetQuantityAndSize_Cutting";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Option", SqlDbType.Int);
                    param.Value = Option;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return dt;
        }

        public DataSet GetTotalSizeByContract(string OrderDetailID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetTotalSizeByContract";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.VarChar);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return ds;
        }

        public int IsSizeByOrderDetailsId(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();

                string cmdText = "Usp_CheckSizeByOrderDetailId";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dtSize = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSize);
                cmd.ExecuteReader();
                cnx.Close();

                if (dtSize.Rows.Count > 0)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }

        }

        public List<OrderDetailSizes> CheckIsSizeByOrderDetailId(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<OrderDetailSizes> orderDetailSizeCollection = new List<OrderDetailSizes>();
                try
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;
                    cmdText = "Usp_CheckSizeByOrderDetailId";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();


                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            OrderDetailSizes orderDetailSize = new OrderDetailSizes();
                            orderDetailSize.Size = (reader["Size"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Size"]);
                            orderDetailSizeCollection.Add(orderDetailSize);
                        }
                    }


                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
                return orderDetailSizeCollection;
            }

        }
        //Added By Ashish On 19/11/2014
        public List<OrderDetail> GetMoETAInfo(string Flag1, string Flag2, int StyleId, string Val1, string Val2, int AccworkingID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                try
                {

                    //string cmdText = "Usp_GetEtaDetailsRecord";
                    string cmdText = "Usp_GetMOEtaDetailsRecord";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Flag1", SqlDbType.VarChar);
                    param.Value = Flag1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag2", SqlDbType.VarChar);
                    param.Value = Flag2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val1", SqlDbType.VarChar);
                    param.Value = Val1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val2", SqlDbType.VarChar);
                    param.Value = Val2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccworkingID", SqlDbType.Int);
                    param.Value = AccworkingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {


                        DataTable dt = dsorderDetail.Tables[3];
                        if (dt.Rows.Count > 0)
                        {

                            foreach (DataRow dr in dt.Rows)
                            {
                                OrderDetail orderDetail = new OrderDetail();
                                orderDetail.StyleId = (dr["StyleID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StyleID"]);
                                //orderDetail.AccessoryId = (dr["AccessoryId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["AccessoryId"]);
                                orderDetail.OrderID = (dr["OrderID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderID"]);
                                orderDetail.OrderDetailID = (dr["OrderDetailId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailId"]);
                                orderDetail.StartETAdate = (dr["FabricStartETAdate"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricStartETAdate"]) : DateTime.MinValue;
                                orderDetail.EndETAdate = (dr["FabricEndETAdate"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricEndETAdate"]) : DateTime.MinValue;

                                //orderDetail.CalculatedBIH = (dr["CalculatedBIH"] != DBNull.Value) ? Convert.ToDateTime(dr["CalculatedBIH"]) : DateTime.MinValue;
                                orderDetail.AccessoryName = (dr["AccessoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoryName"]);
                                orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["Quantity"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);

                                orderDetail.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.AccessoryName = (dr["AccessoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoryName"]);

                                orderDetail.Fabric1 = (dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]);
                                orderDetail.Fabric2 = (dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]);
                                orderDetail.Fabric3 = (dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]);
                                orderDetail.Fabric4 = (dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]);

                                orderDetail.Fabric1CCGSM = (dr["Fabric1CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1CCGSM"]);
                                orderDetail.Fabric2CCGSM = (dr["Fabric2CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2CCGSM"]);
                                orderDetail.Fabric3CCGSM = (dr["Fabric3CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3CCGSM"]);
                                orderDetail.Fabric4CCGSM = (dr["Fabric4CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4CCGSM"]);

                                orderDetail.Fabric1Details = (dr["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1DetailsRef"]);
                                orderDetail.Fabric2Details = (dr["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2DetailsRef"]);
                                orderDetail.Fabric3Details = (dr["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3DetailsRef"]);
                                orderDetail.Fabric4Details = (dr["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4DetailsRef"]);

                                orderDetail.FabricStartETAdate = (dr["FabricStartETAdate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate"]);
                                orderDetail.FabricEndETAdate = (dr["FabricEndETAdate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate"]);


                                orderDetail.FabricStartETAdate2 = (dr["FabricStartETAdate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate2"]);
                                orderDetail.FabricEndETAdate2 = (dr["FabricEndETAdate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate2"]);
                                orderDetail.FabricStartETAdate3 = (dr["FabricStartETAdate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate3"]);
                                orderDetail.FabricEndETAdate3 = (dr["FabricEndETAdate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate3"]);
                                orderDetail.FabricStartETAdate4 = (dr["FabricStartETAdate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate4"]);
                                orderDetail.FabricEndETAdate4 = (dr["FabricEndETAdate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate4"]);

                                orderDetail.PCD = (dr["PCD"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PCD"]);
                                orderDetail.BIH = (dr["BIH"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["BIH"]);
                                orderDetail.ExFactory = (dr["ExFactory"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["ExFactory"]);
                                orderDetail.FabricInHouse1 = (dr["FabricInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse1"]);
                                orderDetail.CutPercentInhouse = (dr["CutPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CutPercentInhouse"]);
                                orderDetail.StitchedPercentInhouse = (dr["StitchedPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StitchedPercentInhouse"]);
                                orderDetail.PackedPercentInhouse = (dr["PackedPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PackedPercentInhouse"]);
                                orderDetail.VAPercentInhouse = (dr["VAPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["VAPercentInhouse"]);
                                orderDetail.CutStartETA = (dr["CutStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutStartETA"]);
                                orderDetail.CutEndETA = (dr["CutEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutEndETA"]);
                                orderDetail.StitchedStartETA = (dr["StitchedStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["StitchedStartETA"]);

                                orderDetail.StitchedEndETA = (dr["StitchedEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["StitchedEndETA"]);
                                orderDetail.VAStartETA = (dr["VAStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["VAStartETA"]);
                                orderDetail.VAEndETA = (dr["VAEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["VAEndETA"]);
                                orderDetail.PackedETA = (dr["PackedETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PackedETA"]);

                                orderDetail.STCETA = (dr["STCETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["STCETA"]);
                                orderDetail.PatternSampleDateETA = (dr["PatternSampleDateETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PatternSampleDateETA"]);
                                orderDetail.TOPETA = (dr["TOPETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TOPETA"]);
                                //Added By Ashish on 4/3/2015
                                orderDetail.FitsStatusETA = (dr["FitsETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FitsETA"]);
                                //                             

                                orderDetail.FabricPercent1 = (dr["FabricInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse1"]);
                                orderDetail.FabricPercent2 = (dr["FabricInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse2"]);
                                orderDetail.FabricPercent3 = (dr["FabricInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse3"]);
                                orderDetail.FabricPercent4 = (dr["FabricInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse4"]);

                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.FabricPercent5 = (dr["FabricInHouse5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse5"]);
                                    orderDetail.FabricPercent6 = (dr["FabricInHouse6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse6"]);
                                    orderDetail.Fabric5 = (dr["Fabric5"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5"]);
                                    orderDetail.Fabric6 = (dr["Fabric6"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6"]);

                                    orderDetail.Fabric5CCGSM = (dr["Fabric5CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5CCGSM"]);
                                    orderDetail.Fabric6CCGSM = (dr["Fabric6CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6CCGSM"]);

                                    orderDetail.Fabric5Details = (dr["Fabric5DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5DetailsRef"]);
                                    orderDetail.Fabric6Details = (dr["Fabric6DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6DetailsRef"]);
                                    orderDetail.FabricStartETAdate5 = (dr["FabricStartETAdate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate5"]);
                                    orderDetail.FabricEndETAdate5 = (dr["FabricEndETAdate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate5"]);
                                    orderDetail.FabricStartETAdate6 = (dr["FabricStartETAdate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate6"]);
                                    orderDetail.FabricEndETAdate6 = (dr["FabricEndETAdate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate6"]);
                                }


                                string strNewPercent = "OrderDetailID =" + orderDetail.OrderDetailID;
                                DataRow[] drAccPercent = dsorderDetail.Tables[2].Select(strNewPercent);

                                DataRow[] drAccess = dsorderDetail.Tables[0].Select("OrderID =" + orderDetail.OrderID);
                                DataRow[] drTotalQuantity = dsorderDetail.Tables[1].Select("OrderID =" + orderDetail.OrderID);
                                if (drAccess.Length > 0)
                                {
                                    if (drAccPercent.Length > 0)
                                    {
                                        orderDetail.AccessoriesETA = GetAccessoriesDetailsTableForETA(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, drAccPercent.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity);
                                    }
                                    else
                                    {
                                        orderDetail.AccessoriesETA = GetAccessoriesDetailsTableForNoPercentForETA(drAccess.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity);
                                    }
                                    // orderDetail.Accessories = GetAccessoriesDetailsTable(drAccess.CopyToDataTable());
                                }


                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                //}
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }

        protected List<OrderDetail.AccessoriesDetailsETA> GetAccessoriesDetailsTableForETA(DataTable dt, int orderDetailID, DataTable dtAcc, DataTable dtTotalQuantity, double Quantity)
        {

            List<OrderDetail.AccessoriesDetailsETA> lst = new List<OrderDetail.AccessoriesDetailsETA>();
            foreach (DataRow dr in dt.Rows)
            {
                OrderDetail.AccessoriesDetailsETA Access = new OrderDetail.AccessoriesDetailsETA();

                Access.AccessoriesName = dr["AccessoryName"] == DBNull.Value ? "" : Convert.ToString(dr["AccessoryName"]);
                double TotalSum = (dtTotalQuantity.Rows[0]["TotalSum"] == DBNull.Value) ? 0.0 : Convert.ToDouble(dtTotalQuantity.Rows[0]["TotalSum"]);
                Access.AccessoryWorkingDetailID = dr["Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Id"]);
                Access.TotalQuantity = dr["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Quantity"]);
                Access.ApprovedByAccessoryManager = dr["ApprovedByAccessoryManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccessoryManager"]);
                Access.ApprovedByAccountManager = dr["ApprovedByAccountManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccountManager"]);
                Access.ApprovedByAccessoryManagerOn = (dr["ApprovedByAccessoryManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccessoryManagerOn"]) : DateTime.MinValue;
                Access.ApprovedByAccountManagerOn = (dr["ApprovedByAccountManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccountManagerOn"]) : DateTime.MinValue;
                Access.AccesoriesETA = (dr["AccesoriesETA"] != DBNull.Value) ? Convert.ToDateTime(dr["AccesoriesETA"]) : DateTime.MinValue;
                double TotalQuantity = Convert.ToDouble(Access.TotalQuantity);

                double QuantityRequired = ((Quantity) / TotalSum) * TotalQuantity;
                if (QuantityRequired == 0)
                {
                    QuantityRequired = TotalSum;
                }
                Access.Required = Math.Round(QuantityRequired).ToString();
                Access.Required = Access.Required == "0" ? "1" : Access.Required;

                foreach (DataRow dr8 in dtAcc.Rows)
                {
                    AccesoriesDetails AccesoriesDetails = new AccesoriesDetails();
                    AccesoriesDetails.AccesoriesWorkingDetailsID = (dr8["AccessoryWorkingDetailID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr8["AccessoryWorkingDetailID"]);
                    Access.AccessoriesName = Access.AccessoriesName.Replace("'", "");
                    string strOrderAccID = "accessoryname='" + Access.AccessoriesName + "'";
                    DataRow[] DataOrderAccID = dtAcc.Select(strOrderAccID); ;
                    if (DataOrderAccID.Length > 0)
                    {
                        DataTable dtTemp = DataOrderAccID.CopyToDataTable();
                        foreach (DataRow dr21 in dtTemp.Rows)
                        {


                            Access.percentInHouse = dr21["PercentInHouse"] == DBNull.Value ? 0 : Convert.ToInt32(dr21["PercentInHouse"]);
                            Access.BIHETAAcc = dr21["BIHETAAcc"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(dr21["BIHETAAcc"]);
                            Access.UpdatedOn = (dr21["Date"] != DBNull.Value) ? Convert.ToDateTime(dr21["Date"]) : DateTime.MinValue;
                            Access.QuantityAvail = dr21["QuantityAvail"] == DBNull.Value ? "" : dr21["QuantityAvail"].ToString();


                            // Add By Ravi kumar on 3/3/2015 for Accessories ETA
                            Access.BIHETARemark = dr21["BIHETA_Remark"] == DBNull.Value ? "" : dr21["BIHETA_Remark"].ToString();
                            Access.AccessoryWorkingDetailID = dr21["AccessoryWorkingDetailID"] == DBNull.Value ? 0 : Convert.ToInt32(dr21["AccessoryWorkingDetailID"]);
                            if (Access.QuantityAvail != "")
                                Access.percentInHouse = Convert.ToInt32(Convert.ToDecimal(Access.QuantityAvail.Replace(",", "")) * 100 / Convert.ToDecimal(Access.Required.Replace(",", "")));
                        }
                    }
                    else
                    {
                        Access.percentInHouse = 0;
                        Access.BIHETAAcc = DateTime.MinValue;
                        Access.UpdatedOn = DateTime.MinValue;
                        Access.QuantityAvail = "";
                    }

                }
                if (Access.AccesoriesETA == DateTime.MinValue && Access.BIHETAAcc > DateTime.Today)
                {
                    Access.ETAPending = "Pending";
                }
                lst.Add(Access);
            }
            return lst.Distinct().ToList();


        }
        protected List<OrderDetail.AccessoriesDetailsETA> GetAccessoriesDetailsTableForNoPercentForETA(DataTable dt, DataTable dtTotalQuantity, double Quantity)
        {

            List<OrderDetail.AccessoriesDetailsETA> lst = new List<OrderDetail.AccessoriesDetailsETA>();
            foreach (DataRow dr in dt.Rows)
            {
                OrderDetail.AccessoriesDetailsETA Access = new OrderDetail.AccessoriesDetailsETA();
                Access.AccessoriesName = dr["AccessoryName"] == DBNull.Value ? "" : Convert.ToString(dr["AccessoryName"]);
                double TotalSum = (dtTotalQuantity.Rows[0]["TotalSum"] == DBNull.Value) ? 0.0 : Convert.ToDouble(dtTotalQuantity.Rows[0]["TotalSum"]);
                Access.TotalQuantity = dr["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Quantity"]);
                Access.AccessoryWorkingDetailID = dr["Id"] == DBNull.Value ? 0 : Convert.ToInt32(dr["Id"]);
                Access.ApprovedByAccessoryManager = dr["ApprovedByAccessoryManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccessoryManager"]);
                Access.ApprovedByAccountManager = dr["ApprovedByAccountManager"] == DBNull.Value ? 0 : Convert.ToInt32(dr["ApprovedByAccountManager"]);
                Access.ApprovedByAccessoryManagerOn = (dr["ApprovedByAccessoryManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccessoryManagerOn"]) : DateTime.MinValue;
                Access.ApprovedByAccountManagerOn = (dr["ApprovedByAccountManagerOn"] != DBNull.Value) ? Convert.ToDateTime(dr["ApprovedByAccountManagerOn"]) : DateTime.MinValue;
                Access.AccesoriesETA = (dr["AccesoriesETA"] != DBNull.Value) ? Convert.ToDateTime(dr["AccesoriesETA"]) : DateTime.MinValue;
                double TotalQuantity = Convert.ToDouble(Access.TotalQuantity);
                double QuantityRequired = ((Quantity) / TotalSum) * TotalQuantity;
                if (QuantityRequired == 0)
                {
                    QuantityRequired = TotalSum;
                }
                Access.Required = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:N0}", QuantityRequired);
                //Access.Required = Math.Round(QuantityRequired).ToString();
                Access.percentInHouse = 0;
                Access.UpdatedOn = DateTime.MinValue;
                Access.QuantityAvail = "";

                lst.Add(Access);
            }
            return lst.Distinct().ToList();


        }
        public DataSet GetCuttingDetails(int OrderID, string SessionID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetCuttingDetails";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SessionID", SqlDbType.VarChar);
                    param.Value = SessionID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return ds;
        }
        public DataSet GetAccesoriesDetails(int OrderID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetAccesories_Break_Down_Details";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return ds;
        }
        public void UpdateEtaRemarks(string Flag1, string Flag2, string remarks, string Name, string ids, string SDate, string EDate, string StyleId, string AccessoryWorkingID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();

                //string cmdText = "Usp_UpdateMOETARemarks";
                string cmdText = "Usp_UpdateETARemarksMO";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@Flag1", SqlDbType.VarChar);
                param.Value = Flag1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag2", SqlDbType.VarChar);
                param.Value = Flag2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                param = new SqlParameter("@Remarks", SqlDbType.Text);
                param.Value = remarks.Trim();
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Name", SqlDbType.VarChar);
                param.Value = Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Ids", SqlDbType.Text);
                param.Value = ids;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.VarChar);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AccessoryWorkingID", SqlDbType.VarChar);
                param.Value = AccessoryWorkingID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SDate", SqlDbType.VarChar);
                string strSDate = SDate;
                string[] strSEtsDate = strSDate.Split('(');

                param.Value = strSEtsDate[0];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@EDate", SqlDbType.VarChar);
                string strSEtaDate = EDate;
                string[] strEEtaDate = strSEtaDate.Split('(');

                param.Value = strEEtaDate[0];
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);





                cmd.ExecuteNonQuery();

                cnx.Close();
            }
        }

        public List<OrderDetail> GetOrderDetailByOrderId(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();
                try
                {

                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_OrderDetailById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            if (reader["Id"] != DBNull.Value && Convert.ToInt32(reader["Id"]) > 0)
                            {
                                OrderDetail orderDetail = new OrderDetail();
                                orderDetail.ParentOrder = new Order();
                                orderDetail.ParentOrder.Print = new Print();
                                orderDetail.ParentOrder.Costing = new Costing();

                                orderDetail.OrderDetailID = Convert.ToInt32(reader["Id"]);
                                orderDetail.LineItemNumber = (reader["LineItemNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["LineItemNumber"]);
                                if (orderDetail.LineItemNumber == "")
                                    orderDetail.LineItemNumber = "      ";

                                orderDetail.ContractNumber = (reader["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["ContractNumber"]);
                                if (orderDetail.ContractNumber == "")
                                    orderDetail.ContractNumber = "      ";
                                //orderDetail.ExFactory=

                                orderDetail.FabricDetails = (reader["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Fabric1Details"]);
                                orderDetail.ExFactoryCutting = (reader["ExFactory"] == DBNull.Value) ? "" : Convert.ToString(reader["ExFactory"]);
                                orderDetail.OrderDetailID = (reader["OrderDetailId"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["OrderDetailId"]);
                                orderDetail.SizeOption = (reader["SizeOption"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["SizeOption"]);

                                orderDetail.OrderSizes = GetOrderDetailSizeSet(OrderID, orderDetail.OrderDetailID);

                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
                return orderDetailCollection;
            }

        }
        public string GetMoETARemarks(string Flag1, string Flag2, int StyleId, string Val1, string Val2, int OrderDetailId, int AccworkingID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                string strRemark = "";
                DataTable dtRemarks = new DataTable();
                try
                {

                    string cmdText = "Usp_GetMOEtaRemarksDetails";
                    //  string cmdText = "sp_or"; 
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Flag1", SqlDbType.VarChar);
                    param.Value = Flag1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag2", SqlDbType.VarChar);
                    param.Value = Flag2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val1", SqlDbType.VarChar);
                    param.Value = Val1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val2", SqlDbType.VarChar);
                    param.Value = Val2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailId", SqlDbType.VarChar);
                    param.Value = OrderDetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AccworkingID", SqlDbType.Int);
                    param.Value = AccworkingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtRemarks);

                    if (dtRemarks.Rows.Count > 0)
                    {
                        if (@Flag2 == "Fab1")
                        {

                            strRemark = dtRemarks.Rows[0]["fabric1ETARemarks"].ToString();
                        }
                        if (@Flag2 == "Fab2")
                        {

                            strRemark = dtRemarks.Rows[0]["fabric2ETARemarks"].ToString();
                        }
                        if (@Flag2 == "Fab3")
                        {

                            strRemark = dtRemarks.Rows[0]["fabric3ETARemarks"].ToString();
                        }
                        if (@Flag2 == "Fab4")
                        {

                            strRemark = dtRemarks.Rows[0]["fabric4ETARemarks"].ToString();
                        }

                        if (@Flag1 != "Fabric")
                        {
                            strRemark = dtRemarks.Rows[0]["ETAReamrks"].ToString();
                        }
                    }



                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return strRemark;
            }
        }

        public List<OrderDetailSizes> GetOrderDetailSizeSet(int OrderID, int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<OrderDetailSizes> orderDetailSizeCollection = new List<OrderDetailSizes>();
                try
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetSizeById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderId", SqlDbType.Int);
                    paramIn.Value = OrderID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.VarChar);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    reader = cmd.ExecuteReader();


                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            OrderDetailSizes orderDetailSize = new OrderDetailSizes();
                            orderDetailSize.OrderDetailID = Convert.ToInt32(reader["OrderDetailID"]);
                            orderDetailSize.Size = (reader["Size"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Size"]);

                            orderDetailSize.Quantity = Convert.ToInt32(reader["Quantity"]);
                            if (orderDetailSize.Quantity == 0)
                                orderDetailSize.QuantityString = "";
                            else orderDetailSize.QuantityString = Convert.ToString(reader["Quantity"]);

                            orderDetailSizeCollection.Add(orderDetailSize);
                        }
                    }
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
                return orderDetailSizeCollection;
            }

        }

        public List<OrderDetail> GetSizeSetOption(int CientId, int DeptId)
        {
            List<OrderDetail> orderDetailSizeCollection = new List<OrderDetail>();


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;
                    cmdText = "Usp_GetSizeSetOption";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;
                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = CientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    DataTable dt = new DataTable();
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    if (dt == null || dt.Rows.Count < 1)
                        return null;

                    foreach (DataRow d in dt.Rows)
                    {

                        OrderDetail orderDetailSize = new OrderDetail();
                        orderDetailSize.SizeOption = d["SizeOption"] == DBNull.Value ? 0 : Convert.ToInt32(d["SizeOption"]);
                        orderDetailSize.Size = d["Size"] == DBNull.Value ? "" : Convert.ToString(d["Size"]);
                        orderDetailSizeCollection.Add(orderDetailSize);

                    }

                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }

            return orderDetailSizeCollection;

        }

        public List<OrderDetailSizes> GetOrderDetailSizeAndQuantity(int OrderDetailID, int SizeOption)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetQuantityAndSize_Cutting";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Option", SqlDbType.Int);
                param.Value = SizeOption;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();
                List<OrderDetailSizes> orderDetailSizeCollection = new List<OrderDetailSizes>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        OrderDetailSizes orderDetailSize = new OrderDetailSizes();
                        orderDetailSize.OrderDetailID = Convert.ToInt32(reader["OrderDetailID"]);
                        orderDetailSize.Size = (reader["Size"] == DBNull.Value) ? string.Empty : Convert.ToString(reader["Size"]);

                        orderDetailSize.Quantity = Convert.ToInt32(reader["Quantity"]);
                        if (orderDetailSize.Quantity == 0)
                            orderDetailSize.QuantityString = "";
                        else orderDetailSize.QuantityString = Convert.ToString(reader["Quantity"]);

                        int RatioPack = reader.GetOrdinal("RatioPack");
                        int Ratio = reader.GetOrdinal("Ratio");
                        int Singles = reader.GetOrdinal("Singles");
                        if (reader.IsDBNull(RatioPack) == false)
                        {
                            orderDetailSize.RatioPack = Convert.ToInt32(reader["RatioPack"]);
                        }
                        else
                        {
                            orderDetailSize.RatioPack = 0;
                        }
                        if (orderDetailSize.RatioPack == 0)
                            orderDetailSize.RatioPackString = "";
                        else orderDetailSize.RatioPackString = Convert.ToString(reader["RatioPack"]);

                        if (reader.IsDBNull(Ratio) == false)
                        {
                            orderDetailSize.Ratio = Convert.ToInt32(reader["Ratio"]);
                        }
                        else
                        {
                            orderDetailSize.Ratio = 0;
                        }
                        if (orderDetailSize.Ratio == 0)
                            orderDetailSize.RatioString = "";
                        else orderDetailSize.RatioString = Convert.ToString(reader["Ratio"]);


                        if (reader.IsDBNull(Singles) == false)
                        {
                            orderDetailSize.Singles = Convert.ToInt32(reader["Singles"]);
                        }
                        else
                        {
                            orderDetailSize.Singles = 0;
                        }
                        if (orderDetailSize.Singles == 0)
                            orderDetailSize.SinglesString = "";
                        else orderDetailSize.SinglesString = Convert.ToString(reader["Singles"]);

                        //orderDetailSize.Singles = (orderDetailSize.Singles != DBNull.Value) ? Convert.ToInt32(reader["Singles"]) : 0; 
                        orderDetailSize.OrderDetailSizeID = Convert.ToInt32(reader["OrderDetailSizeID"]);

                        orderDetailSizeCollection.Add(orderDetailSize);
                    }
                }

                return orderDetailSizeCollection;
            }
        }
        public List<FeedingClass> GetFeeding_Report()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "USP_getFeedingReport";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                //SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                //param.Value = OrderID;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<FeedingClass> Feedinglist = new List<FeedingClass>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        FeedingClass FeedingObj = new FeedingClass();
                        FeedingObj.Targetminut = Convert.ToDecimal(reader["Avlminut"]);
                        FeedingObj.TargetQTY = Convert.ToDecimal(reader["QTY"]);
                        FeedingObj.TargetRev = Convert.ToDecimal(reader["REV"]);
                        // orderDetail.File = (reader["File"] == DBNull.Value || reader["File"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File"]);

                        Feedinglist.Add(FeedingObj);


                    }
                }
                return Feedinglist;

            }
        }

        public List<FeedingClass> GetUpcomingFeeding_Report(string todate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "USP_getUpcomingFeedingReport";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@todate", SqlDbType.NVarChar);
                param.Value = todate;// "21/01/2015";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                List<FeedingClass> Feedinglist = new List<FeedingClass>();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        FeedingClass FeedingObj = new FeedingClass();
                        FeedingObj.Targetminut = Convert.ToDecimal(reader["Avlminut"]);
                        FeedingObj.TargetQTY = Convert.ToDecimal(reader["QTY"]);
                        FeedingObj.TargetRev = Convert.ToDecimal(reader["REV"]);
                        // orderDetail.File = (reader["File"] == DBNull.Value || reader["File"].ToString() == string.Empty) ? string.Empty : Convert.ToString(reader["File"]);

                        Feedinglist.Add(FeedingObj);


                    }
                }
                return Feedinglist;

            }
        }

        public string InsertFeedingSelection(string extarget, string exactual, string exdelay, string pcdtarget, string pcdactual, string pcddelay, string accbihtarget, string accbihactual, string accbihdelay,
            string fabbihtarget, string fabbihactual, string fabbihdelay, string Toptarget, string Topactual, string Topdelay, string Stctarget, string Stcactual, string Stcdelay,
            string Protarget, string Proactual, string Prodelay, string Apptarget, string Appactual, string Appdelay, string sessionID = "")
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;
                cmdText = "USP_insertFeedingSelction";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@extarget", SqlDbType.NVarChar);
                param.Value = extarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@exactual", SqlDbType.NVarChar);
                param.Value = exactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@exdelay", SqlDbType.NVarChar);
                param.Value = exdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@pcdtarget", SqlDbType.NVarChar);
                param.Value = pcdtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@pcdactual", SqlDbType.NVarChar);
                param.Value = pcdactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@pcddelay", SqlDbType.NVarChar);
                param.Value = pcddelay;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@accbihtarget", SqlDbType.NVarChar);
                param.Value = accbihtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@accbihactual", SqlDbType.NVarChar);
                param.Value = accbihactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@accbihdelay", SqlDbType.NVarChar);
                param.Value = accbihdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fabbihtarget", SqlDbType.NVarChar);
                param.Value = fabbihtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@fabbihactual", SqlDbType.NVarChar);
                param.Value = fabbihactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@fabbihdelay", SqlDbType.NVarChar);
                param.Value = fabbihdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Toptarget", SqlDbType.NVarChar);
                param.Value = Toptarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Topactual", SqlDbType.NVarChar);
                param.Value = Topactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Topdelay", SqlDbType.NVarChar);
                param.Value = Topdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stctarget", SqlDbType.NVarChar);
                param.Value = Stctarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Stcactual", SqlDbType.NVarChar);
                param.Value = Stcactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Stcdelay", SqlDbType.NVarChar);
                param.Value = Stcdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Protarget", SqlDbType.NVarChar);
                param.Value = Protarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Proactual", SqlDbType.NVarChar);
                param.Value = Proactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Prodelay", SqlDbType.NVarChar);
                param.Value = Prodelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Apptarget", SqlDbType.NVarChar);
                param.Value = Apptarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Appactual", SqlDbType.NVarChar);
                param.Value = Appactual;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Appdelay", SqlDbType.NVarChar);
                param.Value = Appdelay;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@sessionID", SqlDbType.NVarChar);
                param.Value = sessionID;
                cmd.Parameters.Add(param);
                cmd.ExecuteNonQuery();

                return "success";
            }
        }

        public string InsertFeedingSelection_UP(string extarget, string exactual, string pcdtarget, string pcdactual, string accbihtarget, string accbihactual, string fabbihtarget, string fabbihactual,
            string Toptarget, string Topactual, string Stctarget, string Stcactual, string Protarget, string Proactual, string Apptarget, string Appactual, string todate, string sessionID = "")
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;
                cmdText = "USP_insertFeedingSelction_UP";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@extarget", SqlDbType.NVarChar);
                param.Value = extarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@exactual", SqlDbType.NVarChar);
                param.Value = exactual;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@pcdtarget", SqlDbType.NVarChar);
                param.Value = pcdtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@pcdactual", SqlDbType.NVarChar);
                param.Value = pcdactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@accbihtarget", SqlDbType.NVarChar);
                param.Value = accbihtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@accbihactual", SqlDbType.NVarChar);
                param.Value = accbihactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fabbihtarget", SqlDbType.NVarChar);
                param.Value = fabbihtarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@fabbihactual", SqlDbType.NVarChar);
                param.Value = fabbihactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Toptarget", SqlDbType.NVarChar);
                param.Value = Toptarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Topactual", SqlDbType.NVarChar);
                param.Value = Topactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stctarget", SqlDbType.NVarChar);
                param.Value = Stctarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Stcactual", SqlDbType.NVarChar);
                param.Value = Stcactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Protarget", SqlDbType.NVarChar);
                param.Value = Protarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Proactual", SqlDbType.NVarChar);
                param.Value = Proactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Apptarget", SqlDbType.NVarChar);
                param.Value = Apptarget;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@Appactual", SqlDbType.NVarChar);
                param.Value = Appactual;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@todate", SqlDbType.NVarChar);
                param.Value = todate;
                cmd.Parameters.Add(param);
                param = new SqlParameter("@sessionID", SqlDbType.NVarChar);
                param.Value = sessionID;
                cmd.Parameters.Add(param);
                cmd.ExecuteNonQuery();

                return "success";
            }
        }

        public int CheckSizeByOrderId(int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                cnx.Open();

                string cmdText = "Usp_CheckSizeByOrderId";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dtSize = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSize);
                cmd.ExecuteReader();
                cnx.Close();

                int qty = Convert.ToInt32(dtSize.Rows[0]["Quantity"].ToString());
                if (qty > 0)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }

        }
        public string CheckExistBuyingHouse(int OrderId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string returnParameter = "";
                cnx.Open();

                string cmdText = "Usp_CheckBuyingHouse";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;
                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataTable dtSize = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSize);
                cmd.ExecuteReader();
                cnx.Close();
                if (dtSize.Rows.Count > 0)
                    returnParameter = "1";
                else
                    returnParameter = "0";
                return returnParameter;

            }

        }
        // Add By Ravi kumar ON 2/2/2015 For MO Sanjeev Remark
        public string Get_SanjeevRemark(int OrderDetailID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                cnx.Open();

                string cmdText = "sp_get_SanjeevRemark";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsorderDetail);
                DataTable dt = dsorderDetail.Tables[0];
                cnx.Close();
                string Remark = Convert.ToString(dt.Rows[0]["SanjeevRemarks"]);
                return Remark;


            }
        }

        // End Add By Ravi kumar ON 2/2/2015 For MO Sanjeev Remark
        //Added By Ravi kumar on 19/2/15 For Shiped Check box

        public bool UpdateIsShiped(int OrderDetailsID, int IsShiped, DateTime ShippedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_UpdateIsShiped";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@IsShiped", SqlDbType.Int);
                paramIn.Value = IsShiped;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsShipedBy", SqlDbType.Int);
                paramIn.Value = this.LoggedInUser.UserData.UserID;
                cmd.Parameters.Add(paramIn);
                // Added By Ashish on 12/3/15 For IsShpped Date
                if (IsShiped == 1)
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = ShippedDate;
                    cmd.Parameters.Add(paramIn);

                }
                else
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = DBNull.Value;
                    cmd.Parameters.Add(paramIn);
                }
                //END
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        // Add By Ravi kumar on 3/3/2015 for Accessories ETA

        public bool UpdateAccessEtaRemarks(string remarks, string Name, int OrderDetailId, string EDate, string AccessoryWorkingID, string Quantity)
        {
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    //string cmdText = "Usp_UpdateMOETARemarks";
                    string cmdText = "usp_UpdateAccessEtaRemarks";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Name", SqlDbType.VarChar);
                    param.Value = Name;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Remarks", SqlDbType.Text);
                    param.Value = remarks.Trim();
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@AccessoryWorkingDetailID", SqlDbType.VarChar);
                    param.Value = AccessoryWorkingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Quantity", SqlDbType.VarChar);
                    param.Value = Quantity;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@EDate", SqlDbType.VarChar);
                    string strSEtaDate = EDate;
                    string[] strEEtaDate = strSEtaDate.Split('(');

                    param.Value = strEEtaDate[0];
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    cmd.ExecuteNonQuery();

                    cnx.Close();
                    return true;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                return false;
            }
        }
        //Added By Ashish for Filter Permission on 27/3/2015
        public List<MOOrderDetails> GetPermissionFilter(int DeptId, int DesigId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetMoFilterPermissionById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = DesigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    DataTable dt = new DataTable();
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            List<MOOrderDetails> orderDataCollection = new List<MOOrderDetails>();
                            MOOrderDetails orderDetail = new MOOrderDetails();

                            foreach (DataRow dr in dt.Rows)
                            {

                                string strPermission = (dr["ExfactoryOrderBy"] == DBNull.Value) ? string.Empty : dr["ExfactoryOrderBy"].ToString();
                                string ColumnName = (dr["BuyerOrderBy"] == DBNull.Value) ? string.Empty : dr["BuyerOrderBy"].ToString();
                                int CoulmeID = Convert.ToInt32((dr["CoulmeID"] == DBNull.Value) ? string.Empty : dr["CoulmeID"].ToString());
                                switch (strPermission)
                                {
                                    case "Top Section":
                                        if (CoulmeID == 106)
                                        {
                                            orderDetail.FilterSearchRead = true;
                                            orderDetail.FilterSearchWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 107)
                                        {
                                            orderDetail.FilterSelectioYearRead = true;
                                            orderDetail.FilterSelectioYearWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 108)
                                        {
                                            orderDetail.FilterFromRead = true;
                                            orderDetail.FilterFromWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 109)
                                        {
                                            orderDetail.FilterToRead = true;
                                            orderDetail.FilterToWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 110)
                                        {
                                            orderDetail.FilterGroupRead = true;
                                            orderDetail.FilterGroupWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 111)
                                        {
                                            orderDetail.FilterBuyinghouseRead = true;
                                            orderDetail.FilterBuyinghouseWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 112)
                                        {
                                            orderDetail.FilterStatusFromRead = true;
                                            orderDetail.FilterStatusFromWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 113)
                                        {
                                            orderDetail.FilterStatusToRead = true;
                                            orderDetail.FilterStatusToWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 114)
                                        {
                                            orderDetail.FilterSortingRead = true;
                                            orderDetail.FilterSortingWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 119)
                                        {
                                            orderDetail.FilterClientRead = true;
                                            orderDetail.FilterClientWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }

                                        if (CoulmeID == 120)
                                        {
                                            orderDetail.FilterDepartmentRead = true;
                                            orderDetail.FilterDepartmentWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }

                                        if (CoulmeID == 121)
                                        {
                                            orderDetail.FilterUnitRead = true;
                                            orderDetail.FilterUnitWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }
                                        if (CoulmeID == 122)
                                        {
                                            orderDetail.FilterSalesViewRead = true;
                                            orderDetail.FilterSalesViewWrite = (dr["PermisionWrite"] == DBNull.Value) ? false : Convert.ToBoolean(dr["PermisionWrite"]);
                                        }

                                        break;
                                }

                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }
        public DataTable GetMOPermissionFilter(int DeptId, int DesigId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetMoPermissionFilter";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = DesigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        public List<OrderDetail> GetMoInfo(int styleid, int ClientID, int DeptId, int CreateNew, int NewRef, int ReUse, int ReUseStyleId, int Tab)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                List<OrderDetail> orderDetailCollection = new List<OrderDetail>();

                try
                {

                    string cmdText = "Usp_GetMOEnfoDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.VarChar);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.VarChar);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreateNew", SqlDbType.Int);
                    param.Value = CreateNew;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Tab", SqlDbType.Int);
                    param.Value = Tab;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {


                        DataTable dt = dsorderDetail.Tables[3];
                        if (dt.Rows.Count > 0)
                        {

                            foreach (DataRow dr in dt.Rows)
                            {
                                OrderDetail orderDetail = new OrderDetail();
                                orderDetail.StyleId = (dr["StyleID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StyleID"]);
                                orderDetail.OrderID = (dr["OrderID"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderID"]);
                                orderDetail.OrderDetailID = (dr["OrderDetailId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailId"]);
                                orderDetail.StartETAdate = (dr["FabricStartETAdate"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricStartETAdate"]) : DateTime.MinValue;
                                orderDetail.EndETAdate = (dr["FabricEndETAdate"] != DBNull.Value) ? Convert.ToDateTime(dr["FabricEndETAdate"]) : DateTime.MinValue;

                                orderDetail.AccessoryName = (dr["AccessoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoryName"]);
                                orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["Quantity"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);

                                orderDetail.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.AccessoryName = (dr["AccessoryName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["AccessoryName"]);

                                orderDetail.Fabric1 = (dr["Fabric1"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1"]);
                                orderDetail.Fabric2 = (dr["Fabric2"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2"]);
                                orderDetail.Fabric3 = (dr["Fabric3"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3"]);
                                orderDetail.Fabric4 = (dr["Fabric4"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4"]);

                                orderDetail.Fabric1CCGSM = (dr["Fabric1CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1CCGSM"]);
                                orderDetail.Fabric2CCGSM = (dr["Fabric2CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2CCGSM"]);
                                orderDetail.Fabric3CCGSM = (dr["Fabric3CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3CCGSM"]);
                                orderDetail.Fabric4CCGSM = (dr["Fabric4CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4CCGSM"]);

                                orderDetail.Fabric1Details = (dr["Fabric1DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1DetailsRef"]);
                                orderDetail.Fabric2Details = (dr["Fabric2DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric2DetailsRef"]);
                                orderDetail.Fabric3Details = (dr["Fabric3DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric3DetailsRef"]);
                                orderDetail.Fabric4Details = (dr["Fabric4DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric4DetailsRef"]);

                                orderDetail.FabricStartETAdate = (dr["FabricStartETAdate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate"]);
                                orderDetail.FabricEndETAdate = (dr["FabricEndETAdate"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate"]);

                                orderDetail.FabricStartETAdate2 = (dr["FabricStartETAdate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate2"]);
                                orderDetail.FabricEndETAdate2 = (dr["FabricEndETAdate2"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate2"]);
                                orderDetail.FabricStartETAdate3 = (dr["FabricStartETAdate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate3"]);
                                orderDetail.FabricEndETAdate3 = (dr["FabricEndETAdate3"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate3"]);
                                orderDetail.FabricStartETAdate4 = (dr["FabricStartETAdate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate4"]);
                                orderDetail.FabricEndETAdate4 = (dr["FabricEndETAdate4"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate4"]);

                                orderDetail.PCD = (dr["PCD"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PCD"]);
                                orderDetail.BIH = (dr["BIH"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["BIH"]);
                                orderDetail.ExFactory = (dr["ExFactory"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["ExFactory"]);
                                orderDetail.FabricInHouse1 = (dr["FabricInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse1"]);
                                orderDetail.CutPercentInhouse = (dr["CutPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["CutPercentInhouse"]);
                                orderDetail.StitchedPercentInhouse = (dr["StitchedPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StitchedPercentInhouse"]);
                                orderDetail.PackedPercentInhouse = (dr["PackedPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["PackedPercentInhouse"]);
                                orderDetail.VAPercentInhouse = (dr["VAPercentInhouse"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["VAPercentInhouse"]);
                                orderDetail.CutStartETA = (dr["CutStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutStartETA"]);
                                orderDetail.CutEndETA = (dr["CutEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["CutEndETA"]);
                                orderDetail.StitchedStartETA = (dr["StitchedStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["StitchedStartETA"]);

                                orderDetail.StitchedEndETA = (dr["StitchedEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["StitchedEndETA"]);
                                orderDetail.VAStartETA = (dr["VAStartETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["VAStartETA"]);
                                orderDetail.VAEndETA = (dr["VAEndETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["VAEndETA"]);
                                orderDetail.PackedETA = (dr["PackedETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PackedETA"]);

                                orderDetail.STCETA = (dr["STCETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["STCETA"]);
                                orderDetail.PatternSampleDateETA = (dr["PatternSampleDateETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["PatternSampleDateETA"]);
                                orderDetail.TOPETA = (dr["TOPETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["TOPETA"]);

                                orderDetail.FitsStatusETA = (dr["FitsETA"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FitsETA"]);

                                orderDetail.FabricPercent1 = (dr["FabricInHouse1"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse1"]);
                                orderDetail.FabricPercent2 = (dr["FabricInHouse2"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse2"]);
                                orderDetail.FabricPercent3 = (dr["FabricInHouse3"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse3"]);
                                orderDetail.FabricPercent4 = (dr["FabricInHouse4"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse4"]);
                                if ((cnx.Database == "SamratDemo14May") || (cnx.Database == "donttouch") || (cnx.Database == "SamratDemo27Aug") || (cnx.Database == "Final_Migration") || (cnx.Database == "SanjeevStockissue") || (cnx.Database == "Material_Migration") || (cnx.Database == "Testing_Final_New") || (cnx.Database == "Mat_Mig_PrepForLive"))
                                {
                                    orderDetail.Fabric5 = (dr["Fabric5"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5"]);
                                    orderDetail.Fabric6 = (dr["Fabric6"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6"]);

                                    orderDetail.Fabric5CCGSM = (dr["Fabric5CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5CCGSM"]);
                                    orderDetail.Fabric6CCGSM = (dr["Fabric6CCGSM"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6CCGSM"]);

                                    orderDetail.Fabric5Details = (dr["Fabric5DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric5DetailsRef"]);
                                    orderDetail.Fabric6Details = (dr["Fabric6DetailsRef"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric6DetailsRef"]);
                                    orderDetail.FabricStartETAdate5 = (dr["FabricStartETAdate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate5"]);
                                    orderDetail.FabricEndETAdate5 = (dr["FabricEndETAdate5"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate5"]);
                                    orderDetail.FabricStartETAdate6 = (dr["FabricStartETAdate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricStartETAdate6"]);
                                    orderDetail.FabricEndETAdate6 = (dr["FabricEndETAdate6"] == DBNull.Value) ? DateTime.MinValue : Convert.ToDateTime(dr["FabricEndETAdate6"]);
                                    orderDetail.FabricPercent5 = (dr["FabricInHouse5"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse5"]);
                                    orderDetail.FabricPercent6 = (dr["FabricInHouse6"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["FabricInHouse6"]);
                                }

                                string strNewPercent = "OrderDetailID =" + orderDetail.OrderDetailID;
                                DataRow[] drAccPercent = dsorderDetail.Tables[2].Select(strNewPercent);

                                DataRow[] drAccess = dsorderDetail.Tables[0].Select("OrderID =" + orderDetail.OrderID);
                                DataRow[] drTotalQuantity = dsorderDetail.Tables[1].Select("OrderID =" + orderDetail.OrderID);
                                if (drAccess.Length > 0)
                                {
                                    if (drAccPercent.Length > 0)
                                    {
                                        orderDetail.AccessoriesETA = GetAccessoriesDetailsTableForETA(drAccess.CopyToDataTable(), orderDetail.OrderDetailID, drAccPercent.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity);
                                    }
                                    else
                                    {
                                        orderDetail.AccessoriesETA = GetAccessoriesDetailsTableForNoPercentForETA(drAccess.CopyToDataTable(), drTotalQuantity.CopyToDataTable(), orderDetail.Quantity);
                                    }
                                }
                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                //}
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }
        //end
        //Add By Ravi kumar on 4/4/2015 for shipment  

        //added by abhishek 11/4/2017

        public DataTable GetMoInfoOb_new(int styleid, int ClientID, int DeptId, int CreateNew, int NewRef, int ReUse, int ReUseStyleId, int Tab)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                DataTable dt = new DataTable();

                try
                {

                    string cmdText = "Usp_GetMOEnfoDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.VarChar);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.VarChar);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreateNew", SqlDbType.Int);
                    param.Value = CreateNew;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Tab", SqlDbType.Int);
                    param.Value = Tab;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 3)
                    {


                        dt = dsorderDetail.Tables[4];


                    }
                }
                //}
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public bool UpdateIsShiped(int OrderDetailsID, int IsShiped, DateTime ShippedDate, int ShippedQty)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_UpdateIsShiped";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@IsShiped", SqlDbType.Int);
                paramIn.Value = IsShiped;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsShipedBy", SqlDbType.Int);
                paramIn.Value = this.LoggedInUser.UserData.UserID;
                cmd.Parameters.Add(paramIn);
                // Added By Ashish on 12/3/15 For IsShpped Date
                if (IsShiped == 1)
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = ShippedDate;
                    cmd.Parameters.Add(paramIn);

                }
                else
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = DBNull.Value;
                    cmd.Parameters.Add(paramIn);
                }

                paramIn = new SqlParameter("@ShippedQty", SqlDbType.Int);
                paramIn.Value = ShippedQty;
                cmd.Parameters.Add(paramIn);
                //END
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }


        //Added By Gajendra on 24/11/2015   
        public bool UpdateIsShiped_For_Current(int OrderDetailsID, int IsShiped, DateTime ShippedDate, int ShippedQty, float ExpressAiringToUK, float CIFAir, float FiftyPercentCIFAir, float AirToMumbai, float InspectionFailandTransport, float TotalPenalty, float ShippedValue, float PenaltyPercentAge, float OrderDiscount, bool Isdicount, string FileName, int ShippingUnit, int Userid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "UpdateIsShiped_For_Current";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsShiped", SqlDbType.Int);
                paramIn.Value = IsShiped;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsShipedBy", SqlDbType.Int);
                paramIn.Value = this.LoggedInUser.UserData.UserID;
                cmd.Parameters.Add(paramIn);
                // Added By Ashish on 12/3/15 For IsShpped Date
                if (IsShiped == 1)
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = ShippedDate;
                    cmd.Parameters.Add(paramIn);
                }
                else
                {
                    paramIn = new SqlParameter("@ShippedDate", SqlDbType.DateTime);
                    paramIn.Value = DBNull.Value;
                    cmd.Parameters.Add(paramIn);
                }

                paramIn = new SqlParameter("@ShippedQty", SqlDbType.Int);
                paramIn.Value = ShippedQty;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@ExpressAiringToUK", SqlDbType.Float);
                paramIn.Value = ExpressAiringToUK;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@CIFAir", SqlDbType.Float);
                paramIn.Value = CIFAir;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FiftyPercentCIFAir", SqlDbType.Float);
                paramIn.Value = FiftyPercentCIFAir;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@AirToMumbai", SqlDbType.Float);
                paramIn.Value = AirToMumbai;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@InspectionFailandTransport", SqlDbType.Float);
                paramIn.Value = InspectionFailandTransport;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@TotalPenalty", SqlDbType.Float);
                paramIn.Value = TotalPenalty;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@ShippedValue", SqlDbType.Float);
                paramIn.Value = ShippedValue;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PenaltyPercentAge", SqlDbType.Float);
                paramIn.Value = PenaltyPercentAge;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDiscount", SqlDbType.Float);
                paramIn.Value = OrderDiscount;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Isdicount", SqlDbType.Bit);
                paramIn.Value = Isdicount;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@ShippingUnit", SqlDbType.Int);
                paramIn.Value = ShippingUnit;
                cmd.Parameters.Add(paramIn);

                if (FileName == "" || FileName == null)
                {
                    paramIn = new SqlParameter("@UploadFile", SqlDbType.VarChar);
                    paramIn.Value = DBNull.Value;
                    cmd.Parameters.Add(paramIn);
                }
                else
                {
                    paramIn = new SqlParameter("@UploadFile", SqlDbType.VarChar);
                    paramIn.Value = FileName;
                    cmd.Parameters.Add(paramIn);
                }

                paramIn = new SqlParameter("@UserId", SqlDbType.Int);
                paramIn.Value = Userid;
                cmd.Parameters.Add(paramIn);

                //END
                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool UpdateIsShipedTodayDate(int OrderDetailsID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "UpdateIsShipedTodayDate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        //end
        //Updated By Gajendra 24-12-2015
        public DataSet GetShippedDetailByID(int OrderDetailId, int DesignationID, int Departmentid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "sp_GetShippedDetailByID";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DesignationID", SqlDbType.Int);
                param.Value = DesignationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Departmentid", SqlDbType.Int);
                param.Value = Departmentid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);

                cnx.Close();

                return dsShippedDetails;
            }
        }
        //end
        //end
        public string[] GetShippedQty(int OrderDetailsID)
        {
            int Quantity = 0;
            int ShippedQty = 0;
            int CutQty = 0;
            string ShippedDate = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "sp_GetShippedQty";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = OrderDetailsID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            Quantity = (reader["Quantity"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["Quantity"]);
                            ShippedQty = (reader["shippedqty"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["shippedqty"]);
                            CutQty = (reader["CuttingQty"] == DBNull.Value) ? 0 : Convert.ToInt32(reader["CuttingQty"]);
                            ShippedDate = (reader["ShippedDate"] == DBNull.Value) ? "" : reader["ShippedDate"].ToString(); //Gajendra 24-12-2015

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { Quantity.ToString(), ShippedQty.ToString(), CutQty.ToString(), ShippedDate };
            return returnString;
        }
        // End Update By Ravi kumar on 27-1-15 For Limitation form

        //Added By Ashish on 27/4/2015
        public DataTable GetGarmentType()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_SelectGarmentType";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        //END
        //Added By Ashish on 28/4/2015
        public DataTable GetOperationById(string TableName1, string TableName2, string Col1, string Col2, string Col3, string Val)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetOperationById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@TableName1", SqlDbType.VarChar);
                    param.Value = TableName1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@TableName2", SqlDbType.VarChar);
                    param.Value = TableName2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col1", SqlDbType.VarChar);
                    param.Value = Col1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col2", SqlDbType.VarChar);
                    param.Value = Col2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col3", SqlDbType.VarChar);
                    param.Value = Col3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val", SqlDbType.VarChar);
                    param.Value = Val;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public DataTable GetWorkerTypeById(int Id, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetWorkerTypeById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public DataTable GetAttachmentById(int Id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetAttachmentById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = Id;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int InsertUpdateFinalCuttingOB(int ClientID, int ClientDepartmentID, string StyleCode, int StyleId, int GarmentTypeID, int Operationcutting, int FactoryWorkSpace, int AttachmentID, string Flag, int FinalOBID, int ReUseStyleId, int IsReUse, int NewRef, int UserId, float Factor)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateFinalCuttingOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = ClientDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.VarChar);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    //
                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Operationcutting", SqlDbType.VarChar);
                    param.Value = Operationcutting;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryWorkSpace", SqlDbType.VarChar);
                    param.Value = FactoryWorkSpace;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AttachmentID", SqlDbType.VarChar);
                    param.Value = AttachmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FinalOBID", SqlDbType.Int);
                    param.Value = FinalOBID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReUse", SqlDbType.Int);
                    param.Value = IsReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@SFactor", SqlDbType.Float);
                    param.Value = Factor;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }

            }
            return intReturn;
        }

        public DataTable GetFinalOBData(string Flag, OBForm obj_OBForm, int StyleId, int ReUseStyleId, int GarmenttypeId, int IsCreated, int IsReuse, int NewRef)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetFinalOBData";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = obj_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCreate", SqlDbType.Int);
                    param.Value = IsCreated;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmenttypeId", SqlDbType.VarChar);
                    param.Value = GarmenttypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReuse", SqlDbType.Int);
                    param.Value = IsReuse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public DataTable IsAllreadySave(string TableName, string Col1, string Val1, string Val2, string Val3, string Val4, string Val5, string Val6)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_IsAllreadySave";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@TableName", SqlDbType.VarChar);
                    param.Value = TableName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Col1", SqlDbType.VarChar);
                    param.Value = Col1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val1", SqlDbType.VarChar);
                    param.Value = Val1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Val2", SqlDbType.VarChar);
                    param.Value = Val2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Val3", SqlDbType.VarChar);
                    param.Value = Val3;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val4", SqlDbType.VarChar);
                    param.Value = Val4;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val5", SqlDbType.VarChar);
                    param.Value = Val5;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val6", SqlDbType.VarChar);
                    param.Value = Val6;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int UpdateFinalOB(OBForm prm_OBForm, int StyleId, int ReUseStyleId, string IsReuse, int StyleSequence)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFinalOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@FinalOBID", SqlDbType.Int);
                    param.Value = prm_OBForm.FinalOBID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NoOfOperation", SqlDbType.Int);
                    param.Value = prm_OBForm.NoOfOperation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Sam", SqlDbType.Float);
                    param.Value = prm_OBForm.Sam;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MachineCount", SqlDbType.Float);
                    param.Value = prm_OBForm.MachineCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FinalCount", SqlDbType.Int);
                    param.Value = prm_OBForm.FinalCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Commentes", SqlDbType.VarChar);
                    param.Value = prm_OBForm.Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = prm_OBForm.Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = prm_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = prm_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = prm_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReuse", SqlDbType.VarChar);
                    param.Value = IsReuse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleSequence", SqlDbType.Int);
                    param.Value = StyleSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }



        public int UpdateFinalOBProxy(int FinalOBID, int NoOfOperation, float Sam, float MachineCount, int FinalCount, string Comments, string Flag, int ClientID, int DeptId, string StyleCode, int StyleId, int ReUseStyleId, string IsReuse, int StyleSequence, float Factor)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_UpdateFinalOB";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@FinalOBID", SqlDbType.Int);
                    param.Value = FinalOBID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NoOfOperation", SqlDbType.Int);
                    param.Value = NoOfOperation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Sam", SqlDbType.Float);
                    param.Value = Sam;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MachineCount", SqlDbType.Float);
                    param.Value = MachineCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FinalCount", SqlDbType.Int);
                    param.Value = FinalCount;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Commentes", SqlDbType.VarChar);
                    param.Value = Comments;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReuse", SqlDbType.VarChar);
                    param.Value = IsReuse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleSequence", SqlDbType.Int);
                    param.Value = StyleSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SFactor", SqlDbType.Float);
                    param.Value = Factor;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public int InsertSection(OBForm prm_OBForm, int StyleId, int ReUse, int ReUseStyleId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "USP_InsertSection";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Section", SqlDbType.Int);
                    param.Value = prm_OBForm.SectionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.VarChar);
                    param.Value = prm_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = prm_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = prm_OBForm.GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = this.LoggedInUser.UserData.UserID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public DataTable GetSectionById(OBForm prm_OBForm, int StyleID, int IsReuse, int IsCreate, int NewRefrence, int ReUseStyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetSectionById";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = prm_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = prm_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReuse", SqlDbType.Int);
                    param.Value = IsReuse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCreate", SqlDbType.Int);
                    param.Value = IsCreate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewRefrence", SqlDbType.Int);
                    param.Value = NewRefrence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public DataTable GetStyleCodeOBByCode(string StyleCode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetStyleCodeOBByCode";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        public DataTable checkIsStyleCodeSave(OBForm prm_OBForm)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_checkIsStyleCodeSave";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = prm_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public DataSet GetOBData(string Flag, string StyleCode, int ClientId, int DeptId, int Garment)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetOBData";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = ClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmenttypeId", SqlDbType.Int);
                    param.Value = Garment;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return ds;
            }
        }

        public DataSet GetAllOBData(int Styleid, int GarmenttypeId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet ds = new DataSet();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetOBData";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = Styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@GarmenttypeId", SqlDbType.Int);
                    param.Value = GarmenttypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(ds);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return ds;
            }
        }

        public int DeleteStichedOperation(int ClientID, int ClientDepartmentID, int StyleId)
        {
            int Id = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    const string cmdText = "usp_DeleteStichedOperation";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx) { CommandType = CommandType.StoredProcedure };

                    SqlParameter param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = ClientDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    Id = cmd.ExecuteNonQuery();
                    cnx.Close();
                }

            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
            }
            return Id;
        }

        public DataTable GetGarmentTypeByStyleId(int StyleId, string styleCode)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetGarmentTypeByStyleId";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@styleCode", SqlDbType.VarChar);
                    param.Value = styleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int InsertForReuse(OBForm prm_OBForm, int StyleId, string IsStiched, int FlagStiched, int ReUseStyleId, int IsReuse, int NewRef, int GarmentType)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    if (IsStiched == "NO")
                    {
                        cmdText = "Usp_InsertForReuse";
                    }
                    else
                    {
                        cmdText = "Usp_InsertForReuseForStiching";

                    }
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = prm_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = prm_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = prm_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagStiched", SqlDbType.VarChar);
                    param.Value = FlagStiched;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReuse", SqlDbType.Int);
                    param.Value = IsReuse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentType", SqlDbType.Int);
                    param.Value = GarmentType;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public int UpdateReuseFlag(int StyleId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_UpdateReuseFlag";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public DataTable GetStichedManPower(OBForm obj_OBForm, int StyleId, int GarmentTypeID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetStichedManPower";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int UpdaetStichedManPower(double NoOfMachine, double MachinePercentage, int MachineAttachmentId, int GarmentTypeID, OBForm obj_OBForm, int StyleId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_UpdaetStichedManPower";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@MachineAttachmentId", SqlDbType.Int);
                    param.Value = MachineAttachmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MachinePercentage", SqlDbType.Int);
                    param.Value = MachinePercentage;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NoOfMachine", SqlDbType.Float);
                    param.Value = NoOfMachine;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public DataTable GetFinishedManPower(OBForm obj_OBForm, int GarmentTypeID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetFinishingManPower";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = obj_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int UpdaetFinishedManPower(double NoOfMachine, double MachinePercentage, int MachineAttachmentId, int GarmentTypeID, OBForm obj_OBForm)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_UpdaetFinishedManPower";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@MachineAttachmentId", SqlDbType.Int);
                    param.Value = MachineAttachmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MachinePercentage", SqlDbType.Int);
                    param.Value = MachinePercentage;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NoOfMachine", SqlDbType.Float);
                    param.Value = NoOfMachine;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = obj_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public DataTable GetValuefromTable(string TableName, string Cal1, OBForm obj_OBForm, int GarmentTypeID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "USP_GetValuefromTable";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@TableName", SqlDbType.VarChar);
                    param.Value = TableName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@Cal1", SqlDbType.VarChar);
                    param.Value = Cal1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val1", SqlDbType.VarChar);
                    param.Value = obj_OBForm.ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val2", SqlDbType.VarChar);
                    param.Value = obj_OBForm.DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val3", SqlDbType.VarChar);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Val4", SqlDbType.VarChar);
                    param.Value = obj_OBForm.StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int UpdateCheckbox(int StyleId, bool IsFactoryIE, bool IsProductionGM, bool IsFactoryManager, bool IsIEManager, int UserId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_UpdateCheckbox";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsFactoryIE", SqlDbType.Bit);
                    param.Value = IsFactoryIE;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsProductionGM", SqlDbType.Bit);
                    param.Value = IsProductionGM;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsFactoryManager", SqlDbType.Bit);
                    param.Value = IsFactoryManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsIEManager", SqlDbType.Bit);
                    param.Value = IsIEManager;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public int GetStyleByStyleId(int styleid)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetStyleByStyleId";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    isReturn = Convert.ToInt32(dt.Rows[0]["style"].ToString());

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }
        public int GetHoppmCompleteByStyleId(int styleid)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_IsHOPPMCompleteforStyle";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    isReturn = Convert.ToInt32(dt.Rows[0]["style"]);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }
        public int GetCreateOBStatus(int styleid)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Uso_Get_Create_OB_Status";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    isReturn = Convert.ToInt32(dt.Rows[0]["CreateOBStatus"]);

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }
        public int GetCheckIsRepeat(int styleid)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "usp_IsCheckRepeatOrderForOB";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    isReturn = Convert.ToInt32(dt.Rows[0]["OrderCount"].ToString());

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }
        //END 
        //Added By ashish on 2/6/2015
        public int DeleteOBById(int OBId, string Flag)
        {
            int Id = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    const string cmdText = "Usp_DeleteOBById";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx) { CommandType = CommandType.StoredProcedure };

                    SqlParameter param = new SqlParameter("@Id", SqlDbType.Int);
                    param.Value = OBId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    Id = cmd.ExecuteNonQuery();
                    cnx.Close();
                }

            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
            }
            return Id;
        }
        //END
        //Added By ashish on 4/6/2015 
        public DataTable GetManPower(int Styleid, int GarmentTypeId, string Flag, string StyleCode, int IsReUse, int ReUseStyleId, int NewRefrence)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetCuttingManPower";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Styleid", SqlDbType.Int);
                    param.Value = Styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@GarmentTypeId", SqlDbType.Int);
                    param.Value = GarmentTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@IsReuse", SqlDbType.Int);
                    param.Value = IsReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRefrence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        //END
        //Added By Ashish on 8/6/2015
        public DataSet GetOBRemarks(string StyleCode, int styleid, int strClientId, int DepartmentId, int CreateNew, int NewRef, int ReUse, int ReUseStyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dt = new DataSet();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetOBRemarkDetails";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = strClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreateNew", SqlDbType.Int);
                    param.Value = CreateNew;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }

        public int InsertupdateOBRemarksDetails(string StyleCode, int styleid, int strClientId, int DepartmentId, int CreateNew, int NewRef, int ReUse, int ReUseStyleId, string FabricRemark, int RiskFabricId, int StyleSequence, int UserId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_InsertupdateOBRemarksDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientId", SqlDbType.Int);
                    param.Value = strClientId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DepartmentId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreateNew", SqlDbType.Int);
                    param.Value = CreateNew;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Remark", SqlDbType.VarChar);
                    param.Value = FabricRemark;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@RemarkId", SqlDbType.VarChar);
                    param.Value = RiskFabricId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleSequence", SqlDbType.VarChar);
                    param.Value = StyleSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public int ReuseOBRemarks(int styleid, int ReUse, int UserId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_ReuseOBRemarks";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUse", SqlDbType.Int);
                    param.Value = ReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        public int DeleteOBRemarkById(int RemarkId)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "";
                    cmdText = "Usp_DeleteOBRemarkById";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@RemarkId", SqlDbType.Int);
                    param.Value = RemarkId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }
        //END
        public int GetOperationType(int StyleId, int OperationId, int WorkerTypeId, int NoOfOperation, string Flag, int FinalOBID)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetOperationType";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OperationId", SqlDbType.Int);
                    param.Value = OperationId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@WorkerTypeId", SqlDbType.Int);
                    param.Value = WorkerTypeId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@NoOfOperation", SqlDbType.Int);
                    param.Value = NoOfOperation;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FinalOBID", SqlDbType.Int);
                    param.Value = FinalOBID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        isReturn = 1;
                    }
                    else
                    {
                        isReturn = 0;
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }

        //Added By Ashish on 18/5/2015
        public int DeleteStichedRecordById(int ClientID, int ClientDepartmentID, string StyleCode, int styleId, int ReUseStyleId, int newRef, int Flag)
        {
            int Id = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    const string cmdText = "usp_DeleteStichedRecordById";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx) { CommandType = CommandType.StoredProcedure };

                    SqlParameter param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = ClientDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@styleId", SqlDbType.Int);
                    param.Value = styleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@newRef", SqlDbType.Int);
                    param.Value = newRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.Int);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    Id = cmd.ExecuteNonQuery();
                    cnx.Close();
                }

            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
            }
            return Id;
        }
        //END
        //END For OB Form


        //Added By Abhishek on 15/5/2015
        public int UpdateOrderAvgDAL(int OrderDetailsID, double OrderAvg, int CountFabric, int StyleID, string FabricName, string printDetails, int IsALL)
        {
            int result = -1;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    SqlDataAdapter adapter = new SqlDataAdapter();
                    string cmdText = "sp_Update_Order_Avg";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailsID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@CutAvg", SqlDbType.Float);
                    paramIn.Value = OrderAvg;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@CountFabric", SqlDbType.Int);
                    paramIn.Value = CountFabric;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@StyleId", SqlDbType.Int);
                    paramIn.Value = StyleID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@FabricName", SqlDbType.VarChar);
                    paramIn.Value = FabricName;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@PrintDetail", SqlDbType.VarChar);
                    paramIn.Value = printDetails;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@IsAll", SqlDbType.Int);
                    paramIn.Value = IsALL;
                    cmd.Parameters.Add(paramIn);

                    result = cmd.ExecuteNonQuery();
                    cnx.Close();


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }


            }
            return result;
        }
        //END

        public int CheckObIsNeededOrNot(int styleid)
        {
            int isReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "sp_CheckObIsNeededOrNot";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleiD", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    isReturn = Convert.ToInt32(dt.Rows[0]["StyleCount"].ToString());

                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return isReturn;
            }
        }

        public DataTable GetOBPermission(int DeptId, int DesigId, int SectionId)
        {
            DataTable dtpermission = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    DataTable dtOBHeader = new DataTable();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "usp_GetOBPermission";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param = new SqlParameter("@DeptId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesigId", SqlDbType.Int);
                    param.Value = DesigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SectionId", SqlDbType.Int);
                    param.Value = SectionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtpermission);



                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dtpermission;
        }


        public int DeleteOBRemarkByStyleId(int styleid)
        {
            int Id = 0;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_DeleteOBRemarksByStyleId";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx) { CommandType = CommandType.StoredProcedure };

                    SqlParameter param = new SqlParameter("@StyleiD", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    Id = cmd.ExecuteNonQuery();
                    cnx.Close();

                }

            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
            }
            return Id;
        }

        //Added By ashish on 29/7/2015
        public int IsRiskDone(int StyleID, string Flag, int orderid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                int Isachieved = 0;
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_IsTaksCreateORAchived";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = orderid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSAMachieved);

                if (dtSAMachieved.Rows.Count > 0)
                {
                    Isachieved = 1;
                }


                return Isachieved;
            }

        }


        public int IsOBCreate(int StyleID, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                int Isachieved = 0;
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_IsTaksCreateORAchived";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSAMachieved);

                if (dtSAMachieved.Rows.Count > 0)
                {
                    Isachieved = 1;
                }


                return Isachieved;
            }

        }

        public int IsFinalizeOB(int StyleID, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                int Isachieved = 0;
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_IsTaksCreateORAchived";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtSAMachieved);

                if (dtSAMachieved.Rows.Count > 0)
                {
                    Isachieved = 1;
                }


                return Isachieved;
            }

        }

        //END  GetMoShippingInfo
        // Added by ravi kumar on 21/2/18
        public List<MoShippingDetail> GetReAllocationDetails(int styleId, double StatusFrom, double StatusTo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                List<MoShippingDetail> orderDetailCollection = new List<MoShippingDetail>();

                try
                {
                    string cmdText = "Usp_GetReAllocationDetailsByStyleId";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = styleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusMode", SqlDbType.Float);
                    param.Value = StatusFrom;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeSequence", SqlDbType.Float);
                    param.Value = StatusTo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                MoShippingDetail orderDetail = new MoShippingDetail();
                                orderDetail.OrderDetailID = (dr["OrderDetailsId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailsId"]);
                                orderDetail.LineItemNumber = (dr["LinesNo"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LinesNo"]);
                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);
                                orderDetail.ModeName = (dr["ModeName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ModeName"]);
                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["Quantity"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.Fabric1Detail = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.Remarks = (dr["Remarks"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Remarks"]);
                                orderDetail.StyleId = (dr["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StyleId"]);
                                orderDetail.Untid = (dr["UnitID"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["UnitID"]);
                                orderDetail.OrderDate = (dr["OrderDate"] != DBNull.Value) ? Convert.ToDateTime(dr["OrderDate"]) : DateTime.MinValue;
                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }

        public List<MoShippingDetail> GetQuantity_Allocation_Details(int styleId, double StatusFrom, double StatusTo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataSet dsorderDetail = new DataSet();
                List<MoShippingDetail> orderDetailCollection = new List<MoShippingDetail>();

                try
                {
                    string cmdText = "sp_GetQuantity_Allocation_DetailsByStyleId";
                    //  string cmdText = "sp_or";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@StyleId", SqlDbType.Int);
                    param.Value = styleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusMode", SqlDbType.Float);
                    param.Value = StatusFrom;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusModeSequence", SqlDbType.Float);
                    param.Value = StatusTo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                    adapter.Fill(dsorderDetail);

                    if (dsorderDetail.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = dsorderDetail.Tables[0];
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                MoShippingDetail orderDetail = new MoShippingDetail();
                                orderDetail.OrderDetailID = (dr["OrderDetailsId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["OrderDetailsId"]);
                                orderDetail.LineItemNumber = (dr["LinesNo"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["LinesNo"]);
                                orderDetail.Mode = (dr["Mode"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["Mode"]);
                                orderDetail.ModeName = (dr["ModeName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ModeName"]);
                                orderDetail.ExFactory = (dr["ExFactory"] != DBNull.Value) ? Convert.ToDateTime(dr["ExFactory"]) : DateTime.MinValue;
                                orderDetail.DC = (dr["DC"] != DBNull.Value) ? Convert.ToDateTime(dr["DC"]) : DateTime.MinValue;
                                orderDetail.SerialNumber = (dr["SerialNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["SerialNumber"]);
                                orderDetail.Quantity = (dr["Quantity"] == DBNull.Value) ? -1 : Convert.ToInt32(dr["Quantity"]);
                                orderDetail.ContractNumber = (dr["ContractNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ContractNumber"]);
                                orderDetail.Fabric1Detail = (dr["Fabric1Details"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Fabric1Details"]);
                                orderDetail.StyleNumber = (dr["StyleNumber"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["StyleNumber"]);
                                orderDetail.Remarks = (dr["Remarks"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["Remarks"]);
                                orderDetail.StyleId = (dr["StyleId"] == DBNull.Value) ? 0 : Convert.ToInt32(dr["StyleId"]);
                                orderDetail.Untid = (dr["UnitID"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["UnitID"]);
                                orderDetail.From_Status = (dr["From_Status"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["From_Status"]);
                                orderDetail.To_Status = (dr["To_Status"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["To_Status"]);
                                orderDetail.VA_Name = (dr["ValueAdditionName"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ValueAdditionName"]);
                                orderDetail.ValueAdditionID = (dr["ValueAdditionID"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["ValueAdditionID"]);
                                orderDetail.IsPartial = (dr["IsPartial"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["IsPartial"]);
                                orderDetail.IsVARellocation = (dr["IsVARellocation"] == DBNull.Value) ? string.Empty : Convert.ToString(dr["IsVARellocation"]);
                                orderDetailCollection.Add(orderDetail);
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return orderDetailCollection;
            }
        }

        public DataTable CheckCutting_FinishingActive(int ProductionId)
        {
            DataTable dtCutting_FinishingActive = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetReAllocationDetailsByStyleId";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                    param.Value = 2;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ProductionId", SqlDbType.Int);
                    param.Value = ProductionId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtCutting_FinishingActive);
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dtCutting_FinishingActive;
        }


        public int SaveReAllocationPartialOrFull(int OrderDetailsId, bool IsPartialOrFull, bool IsRealocationFull)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_UpdatePartialOrFull";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsPartialOrFull", SqlDbType.Bit);
                param.Value = IsPartialOrFull;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsRealocationFull", SqlDbType.Bit);
                param.Value = IsRealocationFull;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int SaveVAReAllocationPartialOrFull(int StyleId, int VA_ID, bool IsPartialOrFull, bool IsRealocationFull)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_InsertPartialOrFull";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_ID", SqlDbType.Int);
                param.Value = VA_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsPartialOrFull", SqlDbType.Bit);
                param.Value = IsPartialOrFull;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsRealocationFull", SqlDbType.Bit);
                param.Value = IsRealocationFull;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        public int updateRescan(ProductionDetail objProduction, int CycleCount, int UserId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_updateRescanValue";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Orderdetailid", SqlDbType.Int);
                param.Value = objProduction.OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@date", SqlDbType.Date);
                param.Value = objProduction.RescanDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@C4546_ScanValue", SqlDbType.Int);
                param.Value = objProduction.C4546_ScanValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@C47_ScanValue", SqlDbType.Int);
                param.Value = objProduction.C47_ScanValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@D169_ScanValue", SqlDbType.Int);
                param.Value = objProduction.D169_ScanValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@C52_ScanValue", SqlDbType.Int);
                param.Value = objProduction.C52_ScanValue;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsRescan", SqlDbType.Bit);
                param.Value = objProduction.chkIsScan;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CycleCount", SqlDbType.Int);
                param.Value = CycleCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        public int SubmitRescan(int Orderdetilaid, string date, int RescanQty, int FailQty, int ManPower, double workingHrs, string BreakDownRemarks, bool IncludedRescan, int UnitId, int CycleNo)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_SubmitRescandetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetails", SqlDbType.Int);
                param.Value = Orderdetilaid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@date", SqlDbType.VarChar);
                param.Value = date;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReScanQty", SqlDbType.Int);
                param.Value = RescanQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FailQty", SqlDbType.Int);
                param.Value = FailQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ManPower", SqlDbType.Int);
                param.Value = ManPower;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Workinghrs", SqlDbType.Float);
                param.Value = workingHrs;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@BreakDownRemarks", SqlDbType.VarChar, 1000);
                param.Value = BreakDownRemarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IncludedRescan", SqlDbType.Bit);
                param.Value = IncludedRescan;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CycleNo", SqlDbType.Int);
                param.Value = CycleNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int InsertUpdatePartialOrFullAllocation(int OrderDetailsId, int Factory, int Cutting, int Stitching, int Finishing, int ReAllocationId, int TdyCutReady, int TdyCutIssueOutHouse, bool CheckDelete, bool IsOHStitchComplete, string Committed_EndDate, int UserID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_InsertUpdatePartialOrFullAllocation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Factory", SqlDbType.Int);
                param.Value = Factory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Cutting", SqlDbType.Int);
                param.Value = Cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stitching", SqlDbType.Int);
                param.Value = Stitching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Finishing", SqlDbType.Int);
                param.Value = Finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReAllocationId", SqlDbType.Int);
                param.Value = ReAllocationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TdyCutReady", SqlDbType.Int);
                param.Value = TdyCutReady;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TdyCutIssueOutHouse", SqlDbType.Int);
                param.Value = TdyCutIssueOutHouse;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@OutHouseManpower", SqlDbType.Int);
                //param.Value = OutHouseManpower;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@OutHouseQc", SqlDbType.VarChar);
                //param.Value = OutHouseQc;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@OutHouseQcChecker", SqlDbType.VarChar);
                //param.Value = OutHouseQcChecker;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);



                //param = new SqlParameter("@QcOutHouseQcChecker", SqlDbType.VarChar);
                //param.Value = QCOutHouseQcChecker;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@CheckDelete", SqlDbType.Bit);
                param.Value = CheckDelete;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@IsOHStitchComplete", SqlDbType.Bit);
                param.Value = IsOHStitchComplete;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Committed_EndDate", SqlDbType.VarChar);
                param.Value = Committed_EndDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        //added by raghvinder on 10-09-2020 starts
        public DataTable GetReallocationPreviousValues(int ReAllocationId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "usp_getReallocationPreviousValues";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                SqlParameter param;



                param = new SqlParameter("@ReAllocationId", SqlDbType.Int);
                param.Value = ReAllocationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                adapter.Fill(dt);

                return dt;
            }
        }

        //added by raghvinder on 10-09-2020 ends

        //ADDED BY RAGHVINDER ON 10-09-2020 STARTS
        public int CreateReallocationHistory(int OrderDetailsId, int Factory, int Cutting, int Stitching, int Finishing, int ReAllocationId, int UserID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_Create_Reallocation_History";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Factory", SqlDbType.Int);
                param.Value = Factory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Cutting", SqlDbType.Int);
                param.Value = Cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stitching", SqlDbType.Int);
                param.Value = Stitching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Finishing", SqlDbType.Int);
                param.Value = Finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReAllocationId", SqlDbType.Int);
                param.Value = ReAllocationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        //ADDED BY RAGHVINDER ON 10-09-2020 STARTS        
        public int DeleteReallocationHistory(int OrderDetailsId, int Factory, int UserID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_Delete_Reallocation_History";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Factory", SqlDbType.Int);
                param.Value = Factory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        //ADDED BY RAGHVINDER ON 10-09-2020 ENDS

        public int UpdateReallocationHistory(int OrderDetailsId, int Factory, int Cutting, int Stitching, int Finishing, int ReAllocationId, int UserID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "usp_UpdateReallocationHistory";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Factory", SqlDbType.Int);
                param.Value = Factory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Cutting", SqlDbType.Int);
                param.Value = Cutting;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Stitching", SqlDbType.Int);
                param.Value = Stitching;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Finishing", SqlDbType.Int);
                param.Value = Finishing;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReAllocationId", SqlDbType.Int);
                param.Value = ReAllocationId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        //ADDED BY RAGHVINDER ON 10-09-2020 ENDS

        public int InsertVA_AllocationDetails(int StyleId, int VA_Id, int SupplierId, int AllocationQty1, int AllocationQty2, int PerDayOutPut, string Committed_EndDate, int orderdetailid)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_InsertVARellocation_history";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_Id", SqlDbType.Int);
                param.Value = VA_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierId", SqlDbType.Int);
                param.Value = SupplierId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AllocationQty1", SqlDbType.Int);
                param.Value = AllocationQty1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@AllocationQty2", SqlDbType.Int);
                param.Value = AllocationQty2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PerDayOutPut", SqlDbType.Int);
                param.Value = PerDayOutPut;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Committed_EndDate", SqlDbType.VarChar);
                param.Value = Committed_EndDate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@orderDetailId", SqlDbType.Int);
                param.Value = orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        // new parameter added
        public int InsertVA_Details(int StyleId, int VA_Id, string SupplierName, bool Finalize, double Rate, double IntialAgreementRate, int RiskSupplierID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_InsertVADetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_Id", SqlDbType.Int);
                param.Value = VA_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                param.Value = SupplierName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Finalize", SqlDbType.Bit);
                param.Value = Finalize;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Rate", SqlDbType.Float);
                param.Value = Rate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IntialAgreementRate", SqlDbType.Float);
                param.Value = IntialAgreementRate;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RiskSupplierID", SqlDbType.Int);
                param.Value = RiskSupplierID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int UpdateCheckDelete(int StyleId, int OrderDetailsId, int UserID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_InsertUpdatePartialOrFullAllocation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int DeleteReallocationEntry(int OrderDetailsId, int Factory, int userID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_InsertUpdatePartialOrFullAllocation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Factory", SqlDbType.Int);
                param.Value = Factory;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = userID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int DeleteVA_DetailsEntry(string SupplierName, int styleid, int VA_Id, int RiskSupplierID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Sp_DeleteVA_Details";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                param.Value = SupplierName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Styleid", SqlDbType.Int);
                param.Value = styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_ID", SqlDbType.Int);
                param.Value = VA_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@RiskSupplierID", SqlDbType.Int);
                param.Value = RiskSupplierID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int DeleteVA_Quantity_AllocationEntry(int SupplierId, int VA_Id)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Sp_DeleteVA_Quantity_AllocationEntry";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@SupplierId", SqlDbType.Int);
                param.Value = SupplierId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_Id", SqlDbType.Int);
                param.Value = VA_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public DataSet GetReAllocationUnit(int OrderDetailsId, int ReallocationID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetReAllocationUnit";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ReallocationID", SqlDbType.Int);
                param.Value = ReallocationID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }

        }

        public DataSet GetVADetails()
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_VenderName";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }

        }

        public DataSet GetVADetails(int Styleid, string Suppliername, int ValueAdditionID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_Get_VA_Details";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Styleid", SqlDbType.Int);
                param.Value = Styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierName", SqlDbType.VarChar);
                param.Value = Suppliername;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ValueAdditionID", SqlDbType.Int);
                param.Value = ValueAdditionID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }

        }

        public DataSet GetSumAltpluspasspcs(int OrderDetailsId, int unitid)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "GetSumAltpluspasspcs";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@orderdeatilid", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@unitid", SqlDbType.Int);
                param.Value = unitid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }
        }

        public DataSet GetRescan_History(int OrderDetailsId, int CycleNo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_GetRescanValue";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Orderdetailid", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CycleNo", SqlDbType.Int);
                param.Value = CycleNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }
        }
        public bool UpdateSelectCheckBox(string IsCheked, string FaultID, string OrderdetailId, string type, int CreatedBy)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {

                    cnx.Open();

                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "Usp_tblScan_FaultDetails_InstUpdt_ByWebService";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;


                    param = new SqlParameter("@FaultID", SqlDbType.Int);
                    param.Value = FaultID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderdetailId", SqlDbType.Int);
                    param.Value = OrderdetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsSelect", SqlDbType.Int);
                    param.Value = IsCheked;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.Int);
                    param.Value = type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                    param.Value = CreatedBy;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);



                    cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message.ToString();
                }


            }
            return true;
        }
        public DataSet GetFaultType_Rescan(int OrderDetailsId, int CycleNo)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetFualType_ForRescan";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Orderdetilid", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@CycleNo", SqlDbType.Int);
                param.Value = CycleNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }
        }
        public DataSet GetSubFaultType_Rescan(int OrderDetailsId)
        {


            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataSet dtAllocationUnit = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetSubFualType_ForRescan";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Orderdetilid", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);


                return dtAllocationUnit;
            }
        }
        public DataTable GetSubFaultType_View(int OrderDetailsId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataTable dtAllocationUnit = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetSubFualType_View";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Orderdetilid", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtAllocationUnit);

                return dtAllocationUnit;
            }
        }
        public string SubFaultType_Rescan_InstUpdt(int Orderdetailid, string FaultDescription, int CreatedBy)
        {
            string Result = "";
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_tblScan_FaultDetails_InstUpdt";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@OrderdetailId", SqlDbType.Int);
                param.Value = Orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultDescription", SqlDbType.NVarChar);
                param.Value = FaultDescription;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CreatedBy", SqlDbType.Int);
                param.Value = CreatedBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter outParam;

                outParam = new SqlParameter("@Return", SqlDbType.VarChar, 200);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);
                cmd.ExecuteNonQuery();

                Result = outParam.Value.ToString();

                // Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        public int SubFaultType_Rescan_Delete(int Id)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_tblScan_FaultDetails_Delete";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@Scan_FaultDetailsID", SqlDbType.Int);
                param.Value = Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        public DataSet GetReAllocationDetailsById(int OrderDetailsId, int unitd)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dsAllocation = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetReAllocationDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@unitid", SqlDbType.Int);
                param.Value = unitd;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsAllocation);


                return dsAllocation;
            }

        }

        public DataSet GetVADetails(int Styleid, int VA_Id)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dsAllocation = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "SP_GetVADetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = Styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_Id", SqlDbType.Int);
                param.Value = VA_Id;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsAllocation);


                return dsAllocation;
            }

        }
        public DataSet GetRell_VA_Details(int Styleid, int VA_ID, int orderdetailid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dsAllocation = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_GetRell_VA_Details";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = Styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@VA_ID", SqlDbType.Int);
                param.Value = VA_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Orderdetailid", SqlDbType.Int);
                param.Value = orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsAllocation);


                return dsAllocation;
            }

        }
        public int DeleteReAllocation(int OrderDetailsId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_DeleteReAllocation";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@OrderDetailsId", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }


        public int UpdatelineQty_unitQty(int lineQty, int unitid, int orderdetailid, string type, int lineplainid, int UserId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();


                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "UpdatelineQty_unitd";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@lineQty", SqlDbType.Int);
                param.Value = lineQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@untid", SqlDbType.Int);
                param.Value = unitid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@orderdetailid", SqlDbType.Int);
                param.Value = orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@typesum", SqlDbType.VarChar);
                param.Value = type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@lineplainid", SqlDbType.VarChar);
                param.Value = lineplainid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int UpdateCuttingQty(int UnitId, int OrderDetailId, int UnitQty, int UserId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "UpdateCutting_FinishingQty";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitQty", SqlDbType.Int);
                param.Value = UnitQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public int UpdateFinishingQty(int UnitId, int OrderDetailId, int UnitQty, int UserId)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataTable dtSAMachieved = new DataTable();
                SqlCommand cmd;
                string cmdText;

                cmdText = "UpdateCutting_FinishingQty";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@inType", SqlDbType.Int);
                param.Value = 2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitQty", SqlDbType.Int);
                param.Value = UnitQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }

        public string LineUpdateByLimitation(int OrderId, int DaysDiff)
        {
            string result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_LineUpdateByLimitation";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@DaysDiff", SqlDbType.Int);
                param.Value = DaysDiff;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlParameter outParam;

                outParam = new SqlParameter("@LineDayIntimation", SqlDbType.VarChar, 200);
                outParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outParam);
                cmd.ExecuteNonQuery();

                result = outParam.Value.ToString();


                //result = Convert.ToInt32(cmd.ExecuteScalar());

                cnx.Close();

            }
            return result;

        }
        // Add By Ravi kumar for checking Stitched or not

        public int CheckStitched_ByOrderDetailId(int OrderDetailId)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "usp_CheckStitched_ByOrderDetailId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = Convert.ToInt32(cmd.ExecuteScalar());

                cnx.Close();

            }
            return result;

        }

        //Added by abhishek on 25/12/2015
        public int UploadTestReportMo(int OrderDetailId, string filepath1, string filepath2, string filepath3, string UploadTestReportMo)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "Usp_UpdateMoTestReportUpload";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fileUrl1", SqlDbType.VarChar);
                param.Value = filepath1;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fileUrl2", SqlDbType.VarChar);
                param.Value = filepath2;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fileUrl3", SqlDbType.VarChar);
                param.Value = filepath3;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@TestReportsCheckBox", SqlDbType.Int);
                param.Value = UploadTestReportMo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return result;
        }

        public DataTable GetTestReportMo(int OrderDetailId)
        {
            DataTable dtTestReportMo = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_ShowMoTestReportUpload";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = OrderDetailId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtTestReportMo);
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dtTestReportMo;
        }


        public int UpdateFabricWorkingETARemarks(int orderID, string fabricDetails, String Flag, string Remarks)
        {
            int Result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();


                string cmdText = "Usp_UpdateFabricWorkingETARemarks";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@orderID", SqlDbType.Int);
                param.Value = orderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@fabricDetails", SqlDbType.VarChar);
                param.Value = fabricDetails;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Remarks", SqlDbType.VarChar);
                param.Value = Remarks;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                Result = cmd.ExecuteNonQuery();

                cnx.Close();
            }
            return Result;
        }
        public string GetFabricWorkingETARemarks(string Flag, int OrderID)
        {

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string strRemarkFind = "";
                DataTable dtRemarks = new DataTable();
                try
                {
                    string cmdText = "Usp_GetFabricWorkingETARemarks";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderID", SqlDbType.VarChar);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dtRemarks);


                    int countRow = dtRemarks.Rows.Count;
                    if (countRow > 0)
                    {
                        for (int i = 0; i < countRow; i++)
                        {
                            if (dtRemarks.Rows[i]["ETAReamrks"].ToString() != "")
                            {
                                strRemarkFind += '`';
                                strRemarkFind += dtRemarks.Rows[i]["ETAReamrks"].ToString();
                            }
                        }
                    }


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return strRemarkFind;
            }
        }
        public DataSet GetMoFabricETA_Status(string Flag, int OrderDetailsId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                DataSet dsAllocation = new DataSet();
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetFabricETA_Status";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetails", SqlDbType.Int);
                param.Value = OrderDetailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsAllocation);


                return dsAllocation;
            }

        }
        //end by abhishek on 25/12/2015

        // Add By Ravi kumar on 1/1/2016 for Production Section

        public int CheckSizeSet_ByOrderDetailId(int OrderDetailId)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "usp_CheckSizeSet_ByOrderDetailId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = Convert.ToInt32(cmd.ExecuteScalar());

                cnx.Close();

            }
            return result;

        }

        public int Update_cutting_Stitching_Finishing_ByOrderDetailId(int OrderDetailId, string Type, int UnitId, int Value, int UserId)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "usp_Update_cutting_Stitching_Finishing_ByOrderDetailId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Value", SqlDbType.Int);
                param.Value = Value;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserId", SqlDbType.Int);
                param.Value = UserId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        //added by abhishek on 19/1/2015
        public bool UpdatePhotoShot(string Photoshotdate, int IsPicShot, int orderDetails_ID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdatePhotoShot_Date";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Photoshotdate", SqlDbType.DateTime);
                if (Photoshotdate == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    Photoshotdate = Photoshotdate.Substring(0, 9);
                    IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                    DateTime CutDate = Convert.ToDateTime(Photoshotdate, Provider);
                    paramIn.Value = CutDate;
                }

                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@orderDetails_ID", SqlDbType.Int);
                paramIn.Value = orderDetails_ID;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@IsPicShot", SqlDbType.Int);
                paramIn.Value = IsPicShot;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        //end by abhishek on 19/1/2015

        // Add By Ravi kumar for task done of repeat order
        public bool UpdateWorkflow_RepeatOrder(int orderID, int StyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                List<string> IdsCollection = new List<string>();
                SqlTransaction transaction = null;

                try
                {
                    cnx.Open();
                    transaction = cnx.BeginTransaction();
                    SqlDataAdapter adapter = new SqlDataAdapter();

                    string cmdText = "Usp_UpdateWorkflow_RepeatOrder";

                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.Transaction = transaction;

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderId", SqlDbType.Int);
                    param.Value = orderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    cmd.ExecuteNonQuery();

                    transaction.Commit();
                    return true;
                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                    transaction.Rollback();
                    return false;
                }
            }

        }

        public int SaveCQDByOrderId(int OrderId)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "usp_SaveCQDByOrderId";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public int SaveMOOrderDetails(string POUploadFile1Name, string POUploadFile2Name, string POUploadFile3Name, int POorderdetailID)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "usp_UpdatePOUploadFromMO";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@POUploadFile1Name", SqlDbType.VarChar);
                param.Value = POUploadFile1Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@POUploadFile2Name", SqlDbType.VarChar);
                param.Value = POUploadFile2Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@POUploadFile3Name", SqlDbType.VarChar);
                param.Value = POUploadFile3Name;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@POorderdetailID", SqlDbType.Int);
                param.Value = POorderdetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public int UpdatePOUploadTask(int POorderdetailID, int UserID)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "Usp_UpdatePOUploadTask";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;


                param = new SqlParameter("@POorderdetailID", SqlDbType.Int);
                param.Value = POorderdetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public int UpdateIC_Check(int OrderID, int orderDetails_ID, int Ischeck)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_Update_UpdateIC_Check";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@orderDetailsID", SqlDbType.Int);
                param.Value = orderDetails_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@Ischeck", SqlDbType.Int);
                param.Value = Ischeck;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public int update_OutHouse(int orderDetails_ID, int OutHouse)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "sp_Update_OutHouse_Check";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;



                param = new SqlParameter("@orderDetailsID", SqlDbType.Int);
                param.Value = orderDetails_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@OutHouse", SqlDbType.Int);
                param.Value = OutHouse;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        //added by abhishek 19/8/2016
        public int UploadFilePeekCap(int OrderDeailsId, string fileName)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "Usp_InsertOrGet_PeekCapacity";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                param.Value = OrderDeailsId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FileName", SqlDbType.VarChar);
                param.Value = fileName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public DataTable GetPeekCapacityFile(int OrderDeatislID)
        {
            //bool bCheckPermission = false;
            DataTable Peek = new DataTable();

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                string cmdText = "Usp_InsertOrGet_PeekCapacity";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                param.Value = OrderDeatislID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FileName", SqlDbType.Int);
                param.Value = DBNull.Value;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(Peek);



            }
            return Peek;
        }
        public int DeleteAddFualtDetails(int OrderDetaild, int Cnty, string FaultName, string FlagIsDelete)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_DeleteAddFualtDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = OrderDetaild;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnshipedQnty", SqlDbType.Int);
                    param.Value = Cnty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FaultName", SqlDbType.VarChar);
                    param.Value = FaultName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagIsDelete", SqlDbType.VarChar);
                    param.Value = FlagIsDelete;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }
        public bool UpdateAccAppDate(int WorkingAccID, string Date, int OrderDetailsID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdateAccsessoryApproDate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter paramIn;

                paramIn = new SqlParameter("@AccWoringID", SqlDbType.Int);
                paramIn.Value = WorkingAccID;

                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;

                cmd.Parameters.Add(paramIn);


                Date = Date.Substring(0, 9);
                IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                DateTime AccDate = Convert.ToDateTime(Date, Provider);
                paramIn = new SqlParameter("@Dates", SqlDbType.DateTime);
                paramIn.Value = Date;
                cmd.Parameters.Add(paramIn);




                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        //abhishek 5/1/2017
        public DataSet GetCriticalPathReportNew(int UserID, string ClientDeptID, int FilterBY)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetCriticalPathReport";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientDeptID", SqlDbType.VarChar);
                if (ClientDeptID == string.Empty || ClientDeptID == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = ClientDeptID;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                param = new SqlParameter("@FilterBY", SqlDbType.Int);
                param.Value = FilterBY;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        public DataSet GetCriticalDepertmentWiseUser(int UserID, string ClientDeptID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetCriticalPathReport_DepartmentWiseUser";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientDeptID", SqlDbType.VarChar);
                if (ClientDeptID == string.Empty || ClientDeptID == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = ClientDeptID;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        #region Addeed by Shubhendu
        public DataSet GetSampleTrackerDetails(int UserID, string ClientDeptIDs, int FilterBy)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;
                cmdText = "USP_GetSampleTrackerDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientDeptIds", SqlDbType.VarChar);
                if (ClientDeptIDs == string.Empty || ClientDeptIDs == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = ClientDeptIDs;
                }
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FilterBy", SqlDbType.Int);
                param.Value = FilterBy;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        public DataSet GetSampleTrackerWiseUser(int UserID, string ClientDeptID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetSampleTrackerDetailsReport_DepartmentWiseUser";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@ClientDeptID", SqlDbType.VarChar);
                if (ClientDeptID == string.Empty || ClientDeptID == "")
                {
                    param.Value = DBNull.Value;
                }
                else
                {
                    param.Value = ClientDeptID;
                }
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        #endregion
        public DataSet GetClientDepartment(int userid)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetClientDepartment";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@UserID", SqlDbType.Int);
                param.Value = userid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        public DataSet GetChildDepartment(int ParentDeptID)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetChildDepartment";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@ParentDeptID", SqlDbType.Int);
                param.Value = ParentDeptID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        public DataSet GetParentDepartment()
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetDistinctParentDepartment";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
            }
            return ds;
        }
        //end by abhishek 

        // Add By Ravi kumar on 29/10/16 from M.O filter Permission
        public DataTable GetMO_OrderByFilter(int DeptId, int DesigId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetMO_OrderByFilter";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@DepartmentId", SqlDbType.Int);
                    param.Value = DeptId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@DesignationId", SqlDbType.Int);
                    param.Value = DesigId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        public DataTable GetAltAllSum(int OrderDetailID, int UnitID, int LinePlaingID, string Slotdate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetAltAllSum_ForPage";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UnitID", SqlDbType.Int);
                    param.Value = UnitID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@LinePlaingID", SqlDbType.Int);
                    param.Value = LinePlaingID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CloseDay", SqlDbType.VarChar);
                    param.Value = Slotdate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        public int DeleteAddFualtDetails_IStitchedSlotEntry(int LinePlanID, int FaultQnty, int OrderDetailID, string FaultName, string FlagIsDeletes, string startdate)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_DeleteAddFualtDetails_StitchedEntryAltSum";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@linePlaningID", SqlDbType.Int);
                    param.Value = LinePlanID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    //param = new SqlParameter("@FaultID", SqlDbType.Int);
                    //param.Value = FaultID;
                    //param.Direction = ParameterDirection.Input;
                    //cmd.Parameters.Add(param);

                    param = new SqlParameter("@FualtQnty", SqlDbType.VarChar);
                    param.Value = FaultQnty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FaultName", SqlDbType.VarChar);
                    param.Value = FaultName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagIsDelete", SqlDbType.VarChar);
                    param.Value = FlagIsDeletes;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@startdate", SqlDbType.VarChar);
                    if (startdate != "")
                    {




                        param.Value = startdate;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }

                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }
        public DataSet GetStichedSlotAltSumFaultName(int OrderDetailId, int linePlaningID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetIEStitchedAltSumFaultName";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@linePlaningID", SqlDbType.Int);
                param.Value = linePlaningID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);
                cnx.Close();

                return dsShippedDetails;
            }
        }
        //added by abhishek 13/1/2017
        public DataSet GetCutAvgDetails(int OrderDetailId, int styleID, string FabricName, string printdetails, int FabCount)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetCutAvgDeatils";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@StyleId", SqlDbType.Int);
                param.Value = styleID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricName", SqlDbType.VarChar);
                param.Value = FabricName;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PrintDetail", SqlDbType.VarChar);
                param.Value = printdetails;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabCount", SqlDbType.Int);
                param.Value = FabCount;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);
                cnx.Close();

                return dsShippedDetails;
            }
        }
        public DataSet Get_TechPacs(int styleid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_Get_TechPacs";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;

                //param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                //param.Value = OrderDetailId;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = styleid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                //param = new SqlParameter("@FabricName", SqlDbType.VarChar);
                //param.Value = FabricName;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@PrintDetail", SqlDbType.VarChar);
                //param.Value = printdetails;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                //param = new SqlParameter("@FabCount", SqlDbType.Int);
                //param.Value = FabCount;
                //param.Direction = ParameterDirection.Input;
                //cmd.Parameters.Add(param);

                DataSet dsTechpacs = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsTechpacs);
                cnx.Close();

                return dsTechpacs;
            }
        }

        // Add by prabhaker 09-feb-18
        public DataSet GetQcUploadFile(int OrderDetailID, int OrderIDs)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GET_QcProd";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderIDs", SqlDbType.Int);
                param.Value = OrderIDs;
                param.Direction = ParameterDirection.Input;

                cmd.Parameters.Add(param);

                param = new SqlParameter("@flag", SqlDbType.VarChar);
                param.Value = "GET";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);
                cnx.Close();

                return dsShippedDetails;
            }
        }

        public int UpdateQcUploadFile(int OrderDetailID, string File1, string File10, string File50, string FileInline, string FileMidline, string FileFinal, int UserId, DateTime CQDInlieDate, DateTime CQDMidlineDate, DateTime CQDFinalDate, int IsCQDInlie, int IsCQDMidline, int IsCQDFinal, DateTime CQDFirstPcsDate, DateTime CQDFirst10Pcs, DateTime CQDFirst50PcsDate, int IsCQDFirstPcs, int IsCQDFirst10Pcs, int IsCQDFirst50Pcs)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateQcProd";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@File1", SqlDbType.VarChar, 1000);
                    param.Value = File1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@File10", SqlDbType.VarChar, 1000);
                    param.Value = File10;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@File50", SqlDbType.VarChar, 1000);
                    param.Value = File50;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FileInline", SqlDbType.VarChar, 1000);
                    param.Value = FileInline;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FileMidline", SqlDbType.VarChar, 1000);
                    param.Value = FileMidline;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FileFinal", SqlDbType.VarChar, 1000);
                    param.Value = FileFinal;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = UserId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CQDInlieDate", SqlDbType.Date);
                    if (CQDInlieDate == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDInlieDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CQDMidlineDate", SqlDbType.Date);
                    if (CQDMidlineDate == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDMidlineDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CQDFinalDate", SqlDbType.Date);
                    if (CQDFinalDate == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDFinalDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDInlie", SqlDbType.Int);
                    param.Value = IsCQDInlie;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDMidline", SqlDbType.Int);
                    param.Value = IsCQDMidline;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDFinal", SqlDbType.Int);
                    param.Value = IsCQDFinal;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);





                    param = new SqlParameter("@CQDFirstPcsDate", SqlDbType.Date);
                    if (CQDFirstPcsDate == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDFirstPcsDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CQDFirst10Pcs", SqlDbType.Date);
                    if (CQDFirst10Pcs == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDFirst10Pcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CQDFirst50PcsDate", SqlDbType.Date);
                    if (CQDFirst50PcsDate == DateTime.MinValue)
                        param.Value = DBNull.Value;
                    else
                        param.Value = CQDFirst50PcsDate;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDFirstPcs", SqlDbType.Int);
                    param.Value = IsCQDFirstPcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDFirst10Pcs", SqlDbType.Int);
                    param.Value = IsCQDFirst10Pcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsCQDFirst50Pcs", SqlDbType.Int);
                    param.Value = IsCQDFirst50Pcs;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }

            }
            return intReturn;
        }
        // End of Code

        public DataSet GetOrderContactDetailsByOrderID(int OrderID, int orderdetailid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetContractDetailsByOrderID";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;


                SqlParameter param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@orderdetailid", SqlDbType.Int);
                param.Value = orderdetailid;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);



                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);
                cnx.Close();

                return dsShippedDetails;
            }
        }
        //end
        public int UpdateFinalCuttingOB(int ClientID, int ClientDepartmentID, string StyleCode, int StyleId, int GarmentTypeID, int Operationcutting, int FactoryWorkSpace, int AttachmentID, string Flag, int FinalOBID, int ReUseStyleId, int IsReUse, int NewRef, int OprationID, int userid, float Factor, int StyleSequence)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_InsertUpdateFinalCuttingOB_For_update";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@ClientID", SqlDbType.Int);
                    param.Value = ClientID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ClientDepartmentID", SqlDbType.Int);
                    param.Value = ClientDepartmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleCode", SqlDbType.VarChar);
                    param.Value = StyleCode;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleId", SqlDbType.VarChar);
                    param.Value = StyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);
                    //
                    param = new SqlParameter("@GarmentTypeID", SqlDbType.Int);
                    param.Value = GarmentTypeID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Operationcutting", SqlDbType.VarChar);
                    param.Value = Operationcutting;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FactoryWorkSpace", SqlDbType.VarChar);
                    param.Value = FactoryWorkSpace;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@AttachmentID", SqlDbType.VarChar);
                    param.Value = AttachmentID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = Flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@UserId", SqlDbType.Int);
                    param.Value = userid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FinalOBID", SqlDbType.Int);
                    param.Value = FinalOBID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@ReUseStyleId", SqlDbType.Int);
                    param.Value = ReUseStyleId;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsReUse", SqlDbType.Int);
                    param.Value = IsReUse;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    param = new SqlParameter("@NewRef", SqlDbType.Int);
                    param.Value = NewRef;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OprationID", SqlDbType.Int);
                    param.Value = @OprationID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SFactor", SqlDbType.Float);
                    param.Value = Factor;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleSequence", SqlDbType.Float);
                    param.Value = StyleSequence;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }

            }
            return intReturn;
        }
        public DataTable GetTestReportFile(int OrderID)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                DataTable dt = new DataTable();
                List<MOOrderDetails> orderDetailCollection = new List<MOOrderDetails>();
                try
                {
                    string cmdText = "";
                    SqlCommand cmd;
                    cmdText = "Usp_GetTestReportFile";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;
                    param = new SqlParameter("@OrderID", SqlDbType.Int);
                    param.Value = OrderID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);




                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);


                }
                catch (SqlException ex)
                {
                    System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                    System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                }
                return dt;
            }
        }
        public bool UpdateTestReportFile(int OrderDetailsID, string FileName, int TestReportCheckBox)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_UpdateTestReportFile";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FileName", SqlDbType.VarChar);
                if (FileName == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = FileName;

                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@TestReportCheckBox", SqlDbType.Int);
                paramIn.Value = TestReportCheckBox;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        //Add by Prabhaker 19/Feb/18
        public bool UpdateCostingPairing(int Styleid, string PairedValue)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                // DataTable dt = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_insert_costing_pairing";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Styleid", SqlDbType.Int);
                paramIn.Value = Styleid;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PairedId", SqlDbType.VarChar);
                if (PairedValue == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = PairedValue;

                }
                cmd.Parameters.Add(paramIn);


                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public bool InsertCommentHistory_New(CommentHistory objCommentHistory)
        {
            string cmdText = "Usp_Insert_Costing_Comment_History";
            SqlConnection cnx = new SqlConnection();
            cnx.ConnectionString = Constants.CONFIGURATION_STRING;
            SqlCommand cmd = new SqlCommand(cmdText, cnx);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
            cnx.Open();


            SqlParameter param;

            param = new SqlParameter("@CostingID", SqlDbType.Int);
            param.Value = objCommentHistory.CostingID;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@TypeFlag", SqlDbType.Int);
            param.Value = objCommentHistory.TypeFlag;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@FieldName", SqlDbType.VarChar);
            param.Value = objCommentHistory.FieldName;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@OldValue", SqlDbType.VarChar);
            param.Value = objCommentHistory.OldValue;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@NewValue", SqlDbType.VarChar);
            param.Value = objCommentHistory.NewValue;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@UpdatedByUserId", SqlDbType.Int);
            param.Value = objCommentHistory.UpdatedByUserId;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@UpdatedOn", SqlDbType.DateTime);
            param.Value = objCommentHistory.UpdatedOn;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@DetailDescription", SqlDbType.VarChar);
            param.Value = objCommentHistory.DetailDescription;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@Isbipl", SqlDbType.Bit);
            param.Value = objCommentHistory.isBipl;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            param = new SqlParameter("@IsPriceQuote", SqlDbType.Bit);
            param.Value = objCommentHistory.isPriceQuote;
            param.Direction = ParameterDirection.Input;
            cmd.Parameters.Add(param);

            cmd.ExecuteNonQuery();
            cnx.Close();
            return true;
        }



        public DataTable GetCostingPairing(int Styleid)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "sp_Get_costing_pairing";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@Styleid", SqlDbType.Int);
                    param.Value = Styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        //End Of Code
        //added by abhishek on 20/6/2017
        public DataTable GetReAllocationStyleContactDetails(int StyleID, int type, int OrderDatailsID, double StatusTo)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetStyleContractDetails";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@type", SqlDbType.Int);
                    param.Value = type;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDatailsID", SqlDbType.Int);
                    param.Value = OrderDatailsID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StatusTo", SqlDbType.Int);
                    param.Value = StatusTo;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }

        //add by surendra 2 on 04-04-2018
        public DataTable Get_VA_Details(int StyleID)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Get_VA_Details";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param = new SqlParameter("@styleid", SqlDbType.Int);
                    param.Value = StyleID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            return dt;
        }
        public int UpdateReAllocationStyleContactDetails(string Valueaddtion1, string Valueaddtion2, decimal Valueaddtion1_rate, decimal Valueaddtion2_rate, decimal stitchRate, string VA_supplier1, string VA_supplier2, string VA_supplier3, decimal IntialAgreementRate1, decimal IntialAgreementRate2, int OrderDetailsID, int IsCheckboxchecked, int StyleID)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_updateReallocationContact";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;


                paramIn = new SqlParameter("@Valueaddtion1", SqlDbType.NVarChar);
                if (Valueaddtion1 == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = Valueaddtion1;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Valueaddtion2", SqlDbType.NVarChar);
                if (Valueaddtion2 == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = Valueaddtion2;
                }

                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Valueaddtion1_rate", SqlDbType.Decimal);
                if (Valueaddtion1_rate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = Valueaddtion1_rate;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Valueaddtion2_rate", SqlDbType.Decimal);
                if (Valueaddtion2_rate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = Valueaddtion2_rate;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@stitchRate", SqlDbType.Decimal);
                if (stitchRate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = stitchRate;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_supplier1", SqlDbType.NVarChar);
                if (VA_supplier1 == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_supplier1;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_supplier2", SqlDbType.NVarChar);
                if (VA_supplier2 == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_supplier2;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_supplier3", SqlDbType.NVarChar);
                if (VA_supplier3 == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_supplier3;
                }
                // Add By Prabhaker
                cmd.Parameters.Add(paramIn);
                paramIn = new SqlParameter("@IntialAgreementRate1", SqlDbType.NVarChar);
                if (IntialAgreementRate1 == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = IntialAgreementRate1;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IntialAgreementRate2", SqlDbType.NVarChar);
                if (IntialAgreementRate2 == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = IntialAgreementRate2;
                }


                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsCheckboxchecked", SqlDbType.Int);
                paramIn.Value = IsCheckboxchecked;
                cmd.Parameters.Add(paramIn);
                // End 



                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleID", SqlDbType.Int);
                paramIn.Value = StyleID;
                cmd.Parameters.Add(paramIn);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }

        public int UpdateReAllocationStyle_stch(string VA_Stch_Supplier, decimal Rate, int RowID, int isFineLineCheck, int OrderDetailsID, int StyleID, decimal VA_Cut_Rate, int IsVaFinelCut, decimal VA_Finished_Rate, int IsVaFinelFinished)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_updateReallocationContact_Upergrid";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;


                paramIn = new SqlParameter("@VA_Stch_Supplier", SqlDbType.NVarChar);
                if (VA_Stch_Supplier == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_Stch_Supplier;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_Stch_Rate", SqlDbType.Decimal);
                if (Rate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = Rate;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@isFineLineCheck", SqlDbType.Int);
                paramIn.Value = isFineLineCheck;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StchVAID", SqlDbType.Int);
                paramIn.Value = RowID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@type", SqlDbType.Int);
                paramIn.Value = 1;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleID", SqlDbType.Int);
                paramIn.Value = StyleID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsVaFinelCut", SqlDbType.Int);
                paramIn.Value = IsVaFinelCut;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_Cut_Rate", SqlDbType.Decimal);
                if (VA_Cut_Rate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_Cut_Rate;
                }
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@IsVaFinelFinished", SqlDbType.Int);
                paramIn.Value = IsVaFinelFinished;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA_Finished_Rate", SqlDbType.Decimal);
                if (VA_Finished_Rate == 0)
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = VA_Finished_Rate;
                }
                cmd.Parameters.Add(paramIn);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }
        public int UpdateReAllocationStyle_stch_Check(int RowID, int isFineLineCheck, int OrderDetailsID, int StyleID, int IsCheckboxchecked)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_updateReallocationContact";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@isFineLineCheck", SqlDbType.Int);
                paramIn.Value = isFineLineCheck;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StchVAID", SqlDbType.Int);
                paramIn.Value = RowID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailsID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@type", SqlDbType.Int);
                paramIn.Value = 4;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@StyleID", SqlDbType.Int);
                paramIn.Value = StyleID;

                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@IsCheckboxchecked", SqlDbType.Int);
                paramIn.Value = IsCheckboxchecked;
                cmd.Parameters.Add(paramIn);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }
        //Add By Prabhaker
        public int InsertReAllocationStyle_PerDayQty(int styleid, int qtyallow, string StartDate, int PerdayProduction, int VA)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_VAReallocation_insert";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@styleid", SqlDbType.Int);
                paramIn.Value = styleid;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Qtyallow", SqlDbType.Int);
                paramIn.Value = qtyallow;
                cmd.Parameters.Add(paramIn);
                //
                if (StartDate != "")
                {
                    StartDate = StartDate.Substring(0, 9);
                    IFormatProvider Provider = System.Globalization.CultureInfo.CreateSpecificCulture("en-GB").DateTimeFormat; //(dd/mm/yyyy)
                    DateTime Start_Date = Convert.ToDateTime(StartDate, Provider);

                    //paramIn = new SqlParameter("@ProductionFileDate", SqlDbType.DateTime);
                    //paramIn.Value = PrdFileDate;
                    //cmd.Parameters.Add(paramIn);

                    //
                    paramIn = new SqlParameter("@StartDate", SqlDbType.DateTime);
                    paramIn.Value = Start_Date;
                    cmd.Parameters.Add(paramIn);
                }
                else
                {
                    paramIn = new SqlParameter("@StartDate", SqlDbType.DateTime);
                    paramIn.Value = DBNull.Value;
                    cmd.Parameters.Add(paramIn);
                }

                paramIn = new SqlParameter("@perdayproduction", SqlDbType.Int);
                paramIn.Value = PerdayProduction;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@VA", SqlDbType.Int);
                paramIn.Value = VA;
                cmd.Parameters.Add(paramIn);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }

        public DataTable GetReAllocationStyle_PerDayQty(int StyleId)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_VAReallocation_Get";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;


                param = new SqlParameter("@styleid", SqlDbType.Int);
                param.Value = StyleId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);


                cnx.Close();
                return ds.Tables[0];
            }

        }

        //End Of Code
        public bool UpdateTechFile(string FileName, int Styleid, int Position, int userid, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "usp_Updated_TechPacks_AgainstCosting";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Styleid", SqlDbType.Int);
                paramIn.Value = Styleid;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FileName", SqlDbType.VarChar);
                if (FileName == "")
                {
                    paramIn.Value = DBNull.Value;
                }
                else
                {
                    paramIn.Value = FileName;

                }

                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@UserID", SqlDbType.Int);
                paramIn.Value = userid;
                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@Position", SqlDbType.Int);
                paramIn.Value = Position;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                paramIn.Value = Flag;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public bool deletetechPacsFile(int Styleid)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Delete_TechPacs";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Styleid", SqlDbType.Int);
                paramIn.Value = Styleid;
                cmd.Parameters.Add(paramIn);



                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public int DeleteAddFualtDetails_History(int LinePlanID, int FaultQnty, int OrderDetailID, string FaultName, string FlagIsDeletes, string startdate, int FaultID, int SlotWiseFualtID)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_DeleteAddFualtDetails_History";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@linePlaningID", SqlDbType.Int);
                    param.Value = LinePlanID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SlotWiseFualtID", SqlDbType.Int);
                    param.Value = SlotWiseFualtID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FaultID", SqlDbType.Int);
                    param.Value = FaultID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FualtQnty", SqlDbType.VarChar);
                    param.Value = FaultQnty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                    param.Value = OrderDetailID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FaultName", SqlDbType.VarChar);
                    param.Value = FaultName;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagIsDelete", SqlDbType.VarChar);
                    param.Value = FlagIsDeletes;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@startdate", SqlDbType.VarChar);
                    if (startdate != "")
                    {

                        param.Value = startdate;
                    }
                    else
                    {
                        param.Value = DBNull.Value;
                    }

                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);


                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }
        //Added by abhishek on 17/10/2017
        public string ValidateBnkRefNo(String BnkRefNo, int CurrencyType)
        {
            DataTable dt = new DataTable();
            string message;

            try
            {

                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    string cmdText = "Usp_GetInvoiceDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@BankRefNos", SqlDbType.VarChar);
                    paramIn.Value = BnkRefNo;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@ClientCurrency", SqlDbType.Int);
                    paramIn.Value = CurrencyType;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                    paramIn.Value = "VALIDATEBNKREFNO";
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);

                    //Result[0] = dt.Rows[0]["Result"].ToString();

                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            message = dt.Rows[0]["Result"].ToString();
            return message;
        }
        //abhishek 12/12/2017
        public DataSet GetPOUploadContract(int OrderID, string Flag)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                string cmdText = "Usp_GetPOfileUpload";

                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter param;



                param = new SqlParameter("@OrderID", SqlDbType.Int);
                param.Value = OrderID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                DataSet dsShippedDetails = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsShippedDetails);
                cnx.Close();

                return dsShippedDetails;
            }
        }
        // Added By Ravi kumar on 20/3/18 for Plan date
        public bool Update_PlanDate(int OrderDetailId, int PlanType, DateTime PlanDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "sp_Update_PlanDate";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailsID", SqlDbType.Int);
                paramIn.Value = OrderDetailId;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PlanType", SqlDbType.Int);
                paramIn.Value = PlanType;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@PlanDate", SqlDbType.DateTime);
                paramIn.Value = PlanDate;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }
        public int GetPOUploadContract_delete(string file, int orderdetailid)
        {
            int intReturn = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {

                try
                {
                    cnx.Open();
                    string cmdText = "Usp_GET_QcProd";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter param;

                    param = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                    param.Value = orderdetailid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@flag", SqlDbType.VarChar);
                    param.Value = "DELETE";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@filedelete", SqlDbType.VarChar);
                    param.Value = file;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    intReturn = cmd.ExecuteNonQuery();
                    cnx.Close();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return intReturn;
        }

        //Added by abhishek on 2/7/2018
        public string ValidateSupplierName(string Flag, string SupplierName, string BasicType)
        {
            DataTable dt = new DataTable();
            string message;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();
                    string cmdText = "Usp_InserUpdateSupplierDetails";
                    SqlCommand cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@Flag", SqlDbType.VarChar);
                    paramIn.Value = Flag;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@SupplierName", SqlDbType.Int);
                    paramIn.Value = SupplierName;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@BasicType", SqlDbType.VarChar);
                    paramIn.Value = BasicType;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                    //Result[0] = dt.Rows[0]["Result"].ToString();
                }
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }
            message = dt.Rows[0]["Result"].ToString();
            return message;
        }
        //Added By abhishek on 28/8/2018
        public bool UpdateReallocationCommitedDate(int ReallocationID, string commitedDate)
        {
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                string cmdText = "Usp_GetStyleContractDetails";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@type", SqlDbType.Int);
                paramIn.Value = 4;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@ReallocationID", SqlDbType.Int);
                paramIn.Value = ReallocationID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Committed_EndDate", SqlDbType.VarChar);
                paramIn.Value = commitedDate;
                cmd.Parameters.Add(paramIn);

                cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return true;
        }

        public bool CheckQCUploadFile(int OrderDetailID, string File, int FileType)
        {
            bool Result = false;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "usp_CheckQCUploadFile";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                paramIn.Value = OrderDetailID;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@File", SqlDbType.VarChar, 200);
                paramIn.Value = File;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@FileType", SqlDbType.Int);
                paramIn.Value = FileType;
                cmd.Parameters.Add(paramIn);

                Result = Convert.ToBoolean(Convert.ToInt32(cmd.ExecuteScalar()));
                cnx.Close();

            }
            return Result;
        }

        public int SubmitRescan_FaultDetails(int OrderDetailId, string date, int UnitId, int CycleNo, int FaultId, int FailQty)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();

                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_SubmitRescan_FaultDetails";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@OrderDetails", SqlDbType.Int);
                param.Value = OrderDetailId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@date", SqlDbType.VarChar);
                param.Value = date;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UnitId", SqlDbType.Int);
                param.Value = UnitId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@CycleNo", SqlDbType.Int);
                param.Value = CycleNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FaultId", SqlDbType.Int);
                param.Value = FaultId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FailQty", SqlDbType.Int);
                param.Value = FailQty;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                Result = cmd.ExecuteNonQuery();
                cnx.Close();
            }
            return Result;
        }
        public int Updatecontractholdstatus(int orderDetails_ID, int IsChecked, int UserID)
        {
            int result;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();

                string cmdText = "Usp_Update_ContractStatus";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = orderDetails_ID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@IsChecked", SqlDbType.Bit);
                param.Value = IsChecked;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@UserID", SqlDbType.Bit);
                param.Value = UserID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                result = cmd.ExecuteNonQuery();

                cnx.Close();

            }
            return result;

        }
        public DataTable GetCuttingSheettabs(string SessionID, int OrderDetailID)
        {
            DataTable dt = new DataTable();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                try
                {
                    cnx.Open();
                    SqlCommand cmd;
                    string cmdText;
                    cmdText = "Usp_GetCuttingSheettabs";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                    SqlParameter paramIn;

                    paramIn = new SqlParameter("@SessionID", SqlDbType.VarChar);
                    paramIn.Value = SessionID;
                    cmd.Parameters.Add(paramIn);

                    paramIn = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                    paramIn.Value = OrderDetailID;
                    cmd.Parameters.Add(paramIn);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dt);
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }
            return dt;
        }
        //Added by abhishek on 27/3/2019
        public string[] GetSupplierRate(string flag, string flagOtion, int FabricQualityID, int SupplierMasterID, string faricdetails, int Styleid)
        {
            string SupplierQuatedRete = "", SupplierLeadDays = "", SupplierLeadDaysRange = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_Base_Get_Fabric_PO_Raise_Details";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                    param.Value = FabricQualityID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SuppliermasterID", SqlDbType.Int);
                    param.Value = SupplierMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@colorprintdetail", SqlDbType.VarChar);
                    param.Value = faricdetails;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagOption", SqlDbType.VarChar);
                    param.Value = flagOtion;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = Styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ConvertToUnit", SqlDbType.Int);
                    param.Value = -1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ConversionValue", SqlDbType.Int);
                    param.Value = -1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SupplierQuatedRete = (reader["SupplierQuotedRate"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierQuotedRate"]);
                            SupplierLeadDays = (reader["SupplierLeadDays"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierLeadDays"]);
                            SupplierLeadDaysRange = (reader["SupplierLeadDays"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierLeadDaysRange"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { SupplierQuatedRete.ToString(), SupplierLeadDays.ToString(), SupplierLeadDaysRange.ToString() };
            return returnString;
        }
        public string[] GetSupplierRateVA(string flag, string flagOtion, int FabricQualityID, int SupplierMasterID, string faricdetails, int Styleid)
        {
            string SupplierQuatedRete = "", SupplierLeadDays = "", supplierLeadDrange = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetFabricOrderSupplierDetails_RFD";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                    param.Value = FabricQualityID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@SuppliermasterID", SqlDbType.Int);
                    param.Value = SupplierMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@colorprintdetail", SqlDbType.VarChar);
                    param.Value = faricdetails.Replace(",", "");
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagOption", SqlDbType.VarChar);
                    param.Value = flagOtion;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@StyleID", SqlDbType.Int);
                    param.Value = Styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SupplierQuatedRete = (reader["SupplierQuotedRate"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierQuotedRate"]);
                            SupplierLeadDays = (reader["SupplierLeadDays"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierLeadDays"]);
                            supplierLeadDrange = (reader["SupplierLeadDaysRange"] == DBNull.Value ? "0" : reader["SupplierLeadDaysRange"].ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { SupplierQuatedRete.ToString(), SupplierLeadDays.ToString(), supplierLeadDrange };
            return returnString;
        }
        public string[] ValidateRececiedQty(string flag, string flagOtion, int FabricQualityID, int ReceviedQty, string Potype, string PoNumber, int MasterPoID, string fabricdetails)
        {
            string Result = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_Base_Get_Fabric_PO_Raise_Details";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                    param.Value = FabricQualityID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagOption", SqlDbType.VarChar);
                    param.Value = flagOtion;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ReceviedQty", SqlDbType.Int);
                    param.Value = ReceviedQty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Potype", SqlDbType.VarChar);
                    param.Value = Potype;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Po_Number", SqlDbType.VarChar);
                    param.Value = PoNumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@colorprintdetail", SqlDbType.VarChar);
                    param.Value = fabricdetails;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@MasterPoID", SqlDbType.Int);
                    param.Value = MasterPoID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ConvertToUnit", SqlDbType.Int);
                    param.Value = -1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@ConversionValue", SqlDbType.Int);
                    param.Value = -1;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            Result = (reader["Result"] == DBNull.Value) ? "0" : Convert.ToString(reader["Result"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { Result.ToString() };
            return returnString;
        }
        public string[] GetSupplierIntialCode(string flag, int SupplierMasterID)
        {
            string SupplierIntialCode = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetFabricOrderSupplier";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@SuppliermasterID", SqlDbType.Int);
                    param.Value = SupplierMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SupplierIntialCode = (reader["SupplierIntial"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierIntial"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { SupplierIntialCode.ToString() };
            return returnString;
        }

        public int[] GetDeliveryType(string Flag, string FlagOption, int FabricQualityID, int SupplierMasterID, string FabricDetails, int styleida, bool isStyleSpecific)
        {
            int DeliveryType = 0;

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataReader reader;
                SqlCommand cmd;
                string cmdText;

                cmdText = "Usp_GetFabricOrderSupplier";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Flag", SqlDbType.VarChar);
                param.Value = Flag;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FlagOption", SqlDbType.VarChar);
                param.Value = FlagOption;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                param.Value = FabricQualityID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@SupplierMasterID", SqlDbType.Int);
                param.Value = SupplierMasterID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@FabricDetails", SqlDbType.VarChar);
                param.Value = FabricDetails;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@styleida", SqlDbType.Int);
                param.Value = styleida;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@isStyleSpecific", SqlDbType.Int);
                param.Value = isStyleSpecific;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DeliveryType = Convert.ToInt32(reader["DeliveryType"]);
                    }
                }
            }

            return new int[] { DeliveryType };

        }


        public string[] GetSupplierIntialCode2(string flag, int SupplierMasterID, int PoID)
        {
            string SupplierIntialCode = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetFabricOrderSupplier";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@SuppliermasterID", SqlDbType.Int);
                    param.Value = SupplierMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@POID", SqlDbType.Int);
                    param.Value = PoID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SupplierIntialCode = (reader["SupplierIntial"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierIntial"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { SupplierIntialCode.ToString() };
            return returnString;
        }
        public string[] ValidateMinReceiveQty(string flag, int SupplierMasterID)
        {
            string SupplierIntialCode = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetFabricOrderSupplier";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@SuppliermasterID", SqlDbType.Int);
                    param.Value = SupplierMasterID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SupplierIntialCode = (reader["SupplierIntial"] == DBNull.Value) ? "0" : Convert.ToString(reader["SupplierIntial"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { SupplierIntialCode.ToString() };
            return returnString;
        }
        public string Cancel_Close_PO(int SupplierPO_Id, string field)
        {
            string status = "";

            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "Usp_update_Cancel_Close_From_Working_Screen_Fabric";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Po_ID", SqlDbType.Int);
                paramIn.Value = SupplierPO_Id;
                cmd.Parameters.Add(paramIn);



                paramIn = new SqlParameter("@Flag", SqlDbType.NVarChar);
                paramIn.Value = field;
                cmd.Parameters.Add(paramIn);

                SqlDataReader reader=cmd.ExecuteReader();
                

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        status = (reader["status"] == DBNull.Value) ? "" : Convert.ToString(reader["status"]);
                    }
                }                
                cnx.Close();
            }
            return status;
        }

        public DataSet GetDestinationMap(int OrderId, string Type)
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "sp_destination_map";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@OrderId", SqlDbType.Int);
                param.Value = OrderId;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = Type;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }
        public DataSet USP_GetStitchOutHousePO(int OrderDetailID, int SeqNo, string PONumber = "")
        {
            DataSet ds = new DataSet();
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlCommand cmd;
                string cmdText;

                cmdText = "USP_Get_StichOutHousePO";
                cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                SqlParameter param;

                param = new SqlParameter("@Type", SqlDbType.VarChar);
                param.Value = "GetStitchOutHousePOId";
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
                param.Value = OrderDetailID;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@LocationType", SqlDbType.Int);
                param.Value = SeqNo;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                param = new SqlParameter("@PONumber", SqlDbType.VarChar);
                param.Value = PONumber;
                param.Direction = ParameterDirection.Input;
                cmd.Parameters.Add(param);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
        }

        public int UpdateDestinationMap(int OrderDetailId, int DestinationCode, int Mode, DateTime DC, DateTime ExFactory)
        {
            int Result = 0;
            using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
            {
                cnx.Open();
                SqlDataAdapter adapter = new SqlDataAdapter();
                string cmdText = "sp_destination_map";
                SqlCommand cmd = new SqlCommand(cmdText, cnx);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;
                SqlParameter paramIn;

                paramIn = new SqlParameter("@Type", SqlDbType.VarChar);
                paramIn.Value = "UpdateDestinationMap";
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@OrderDetailId", SqlDbType.Int);
                paramIn.Value = OrderDetailId;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@DestinationCode", SqlDbType.Int);
                paramIn.Value = DestinationCode;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@Mode", SqlDbType.Int);
                paramIn.Value = Mode;
                cmd.Parameters.Add(paramIn);

                paramIn = new SqlParameter("@DC", SqlDbType.DateTime);
                paramIn.Value = DC;

                cmd.Parameters.Add(paramIn);


                paramIn = new SqlParameter("@ExFactory", SqlDbType.DateTime);
                paramIn.Value = ExFactory;
                cmd.Parameters.Add(paramIn);


                Result = cmd.ExecuteNonQuery();
                cnx.Close();

            }
            return Result;
        }

        public string GetVAPOIdZByRiskVASupplierId(int RiskVASupplierID, string PONumber)
        {
            string PONo;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "ASP_Get_ValueAddedPO";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@RiskVASupplierId", SqlDbType.Int);
                    param.Value = RiskVASupplierID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.VarChar);
                    param.Value = "GetValueAdditionPOId";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PONumber", SqlDbType.VarChar);
                    param.Value = PONumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    object obj = cmd.ExecuteScalar();
                    PONo = obj != null ? Convert.ToString(obj) : "";
                    return PONo;

                }
            }

            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                PONo = "Error";
                return PONo;
            }
        }
        public string Get_Check_RegesteredSupplier(int RiskVASupplierID)
        {
            string PONo;
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "ASP_Get_ValueAddedPO";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@RiskVASupplierId", SqlDbType.Int);
                    param.Value = RiskVASupplierID;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Type", SqlDbType.VarChar);
                    param.Value = "GetRegesterSupplier";
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    object obj = cmd.ExecuteScalar();
                    PONo = obj != null ? Convert.ToString(obj) : "";
                    return PONo;

                }
            }

            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
                PONo = "Error";
                return PONo;
            }
        }
        public string[] GetReceiveQtyBySendQty(string flag, string flagoption, int fabricqualityid, string fabricdetails, int currentstagenumber, int previousstagenumber, int pendingqty, bool IsStyleSpecific, int styleid)
        {
            string Qty = "";
            try
            {
                using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
                {
                    cnx.Open();

                    SqlDataReader reader;
                    SqlCommand cmd;
                    string cmdText;

                    cmdText = "Usp_GetFabricOrderSupplier";
                    cmd = new SqlCommand(cmdText, cnx);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

                    SqlParameter param;

                    param = new SqlParameter("@Flag", SqlDbType.VarChar);
                    param.Value = flag;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FlagOption", SqlDbType.VarChar);
                    param.Value = flagoption;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricQualityID", SqlDbType.Int);
                    param.Value = fabricqualityid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@FabricDetails", SqlDbType.VarChar);
                    param.Value = fabricdetails;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@CurrenStage", SqlDbType.Int);
                    param.Value = currentstagenumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@PreviousStage", SqlDbType.Int);
                    param.Value = previousstagenumber;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@pendingqty", SqlDbType.Int);
                    param.Value = pendingqty;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@IsStyleSpecific", SqlDbType.Int);
                    param.Value = IsStyleSpecific;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    param = new SqlParameter("@Styleida", SqlDbType.Int);
                    param.Value = styleid;
                    param.Direction = ParameterDirection.Input;
                    cmd.Parameters.Add(param);

                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            Qty = (reader["RecieveQty"] == DBNull.Value) ? "0" : Convert.ToString(reader["RecieveQty"]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine("Error occur in  Client Registration Email on" + DateTime.Now.ToString("dd MMM yy (ddd)") + "at" + DateTime.Now.ToString("HH:mm:ss tt"));
                System.Diagnostics.Trace.WriteLine(String.Format("{0} - Error:{1} \n\n{2} \n\n", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
            }
            string[] returnString = new string[] { Qty.ToString() };
            return returnString;
        }
        //public string USP_GetStitchOutHousePO(int OrderDetailID, int SeqNo)
        //{
        //    string PONo;
        //    try
        //    {
        //        using (SqlConnection cnx = new SqlConnection(Constants.CONFIGURATION_STRING))
        //        {
        //            cnx.Open();

        //            SqlCommand cmd;
        //            string cmdText;

        //            cmdText = "USP_Get_StichOutHousePO";
        //            cmd = new SqlCommand(cmdText, cnx);
        //            cmd.CommandType = CommandType.StoredProcedure;
        //            cmd.CommandTimeout = Constants.CONFIGURATION_TimeOut;

        //            SqlParameter param;

        //            param = new SqlParameter("@OrderDetailID", SqlDbType.Int);
        //            param.Value = OrderDetailID;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            param = new SqlParameter("@Type", SqlDbType.VarChar);
        //            param.Value = "GetStitchOutHousePOId";
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            param = new SqlParameter("@LocationType", SqlDbType.Int);
        //            param.Value = SeqNo;
        //            param.Direction = ParameterDirection.Input;
        //            cmd.Parameters.Add(param);

        //            object obj = cmd.ExecuteScalar();
        //            PONo = obj != null ? Convert.ToString(obj) : "";
        //            return PONo;

        //        }
        //    }

        //    catch (Exception ex)
        //    {
        //        PONo = "Error";
        //        return PONo;
        //    }
        //}

    }

}
